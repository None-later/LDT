T 1476102536 18<bugbot18>	ofourdan@redhat.com changed the Product on bug 771900 from totem to gtk+.
T 1476102536 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=771900 .General, normal, gtk-bugs, NEW , Returning from fullscreen on Wayland causes window decorations and navigation bar to disappear
T 1476103605 18<supra18>	hello mates, after updating gtk+:2 and 3 + gtkmm on my Gentoo, my themes got crashed everywhere, could you look into it and give me detailed info what should you give to inspect a problem?
T 1476103617 18<supra18>	example: http://i.imgur.com/eMxttku.png
T 1476103909 18<supra18>	i tried to fall back to default theme, but with no luck
T 1476103911 18<supra18>	http://i.imgur.com/66MRbm2.png
T 1476106590 18<csoriano18>	supra: you probably need to update the theme to the latest changes. Most probably the class renames from e.g. GtkWindow to .window . You can read more information in the gtk+ documentation of each widget
T 1476106788 18<bugbot18>	mclasen@redhat.com changed the Status on bug 772511 from NEW --- to RESOLVED FIXED.
T 1476106788 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=772511 general, critical, gtkdev, RESOLVED FIXED, g_log_default_handler crashes windows apps with "Unspecified fatal error encountered, aborting."
T 1476106884 18<supra18>	csorlano: you're right, updating my theme resolved the problem
T 1476106902 18<supra18>	but it's strange that even greybird (really popular theme) is not updated
T 1476107824 18<bugbot18>	ofourdan@redhat.com changed the Component on bug 767713 from Movie player to .General.
T 1476107824 18<bugbot18>	ofourdan@redhat.com changed the Product on bug 767713 from totem to gtk+.
T 1476107824 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=767713 .General, major, gtk-bugs, NEW , Fullscreen in wayland is buggy
T 1476108731 18<mclasen18>	Company: master should now be ready for gtk4 stuff, if you feel like merging some of the cleanups
T 1476108848 18<Company18>	mclasen: do we have a policy for pushing API breakage to master?
T 1476108866 18<Company18>	mclasen: about cleaning up the apps that use GTK4?
T 1476108880 18<Company18>	s/have a policy/need or want a policy/
T 1476108985 18<mclasen18>	no apps use gtk4 atm
T 1476109052 18<mclasen18>	what would the policy be ? "make sure your app works with gtk4 before using it" ?
T 1476109054 18<Company18>	that's a good excuse!
T 1476109085 18<Company18>	sth like "make sure apps still compile when changing API"
T 1476109087 18<mclasen18>	we should proably write something on the gtk blog once the initial cleanups have landed
T 1476109138 18<Company18>	for example, I removed the state argument from gtk_style_context_get_foo()
T 1476109157 18<Company18>	which will probably break every app, but be rather simple to fix
T 1476109177 18<mclasen18>	we probably need to start keeping some docs / notes somewhere, for a porting guilde
T 1476109218 18<mclasen18>	do we want to just keep going the same way, and add it as a chapter to the api docs ?
T 1476109231 18<mclasen18>	the advantage of that is that its easy to link to api docs
T 1476109244 18<mclasen18>	the disadavantage is that it gets bigger and bigger
T 1476109263 18<Company18>	we had the GTK2=>3 porting guide
T 1476109268 18<Company18>	no idea if people read it
T 1476109293 18<Company18>	oh wow
T 1476109297 18*	Company discovers https://git.gnome.org/browse/gtk+/tree/gtk/gtkmenu.c#n1340
T 1476109325 18<Company18>	writing GTK code in the 90s - back when compilers didn't help
T 1476109443 18<Company18>	mclasen: I also did https://git.gnome.org/browse/gtk+/commit/?h=wip/otte/gtk4&id=d2f6bf1ae36ffcff9a9ce593eff6b7940f7f8496
T 1476109467 18<Company18>	mclasen: It turned out lots of code still used border-width
T 1476109520 18<Company18>	and i learned people used border width of 5, 6, 8, 10 and 12 interchangeably
T 1476109593 18<Company18>	mclasen: so I'm not sure we really want to remove border-width
T 1476109602 18<owen18>	Company: that's the funky style I was talking about yesterday
T 1476109615 18<mclasen18>	how to things look without border-width ?
T 1476109616 18<owen18>	and why g_object_connect() exists
T 1476109643 18<Company18>	mclasen: most of those are tests that probably look shitty either way
T 1476109660 18<Company18>	mclasen: but widget-factory's window for example lost its padding
T 1476109670 18<mclasen18>	that should be fixable
T 1476109688 18<mclasen18>	but its an indicator of what to expect in the wild
T 1476109695 18<Company18>	mclasen: and shortcuts windows definitely need lapo to make them look neat again
T 1476109729 18<Company18>	mclasen: essentially, border-width was used like a cheap way to add spacing - which should be done by the theme but isn't today
T 1476109736 18<baedert18>	but now you need tons of different style classes for different window(s|types)?
T 1476109753 18<Company18>	mclasen: like, there's no way to say "add some spacing to the toplevel"
T 1476109859 18<Company18>	we clearly could have a gtk_window_set_spacy(TRUE); API
T 1476109872 18<Company18>	or tell people to add a "spacious" style class
T 1476109932 18<Company18>	fwiw, GtkWidget::margin is used for the same purpose
T 1476109957 18*	Company wonders if lapo has an opinion
T 1476110528 18<lapo18>	about?
T 1476110530 18*	lapo reads
T 1476110565 18<lapo18>	Company: it's pretty common to see border-width widget prop (ab)used as a spacer
T 1476110591 18<lapo18>	Company: so all the spacing done in css or not you mean?
T 1476110623 18<lapo18>	Company: atm it's a bit of a frankenstein thing while something is done with widget properties and something with css
T 1476110666 18<Company18>	lapo: i was wondering mostly how you'd imagine spacing to work in an ideal world
T 1476110716 18<lapo18>	Company: in an ideal world it should be like html I think, content separated from layout
T 1476110734 18<lapo18>	Company: not sure how this model applies to css
T 1476110742 18<lapo18>	ehm gtk+ not css
T 1476110779 18<Company18>	lapo: so who decides if a window needs spacing for the content and how much?
T 1476110800 18<mclasen18>	it is not that clear-cut. if you use spacing to separate sections, is that content or layout ?
T 1476110832 18<lapo18>	mclasen: that's the problem
T 1476110872 18<lapo18>	mclasen: on the web everything is content, "ui" included
T 1476110878 18<mclasen18>	you can always solve it via an indireciton
T 1476110884 18<lapo18>	content as content on html
T 1476110887 18<Company18>	rofl
T 1476110892 18<lapo18>	s/on/as in/
T 1476110899 18*	Company just started testgtk after removing border-width
T 1476110935 18<lapo18>	apart from the theory atm dealing with all the spacing with margins would be kind of painfull
T 1476110950 18<lapo18>	s/kind of/pretty much/
T 1476110961 18<Company18>	lapo: if i get my way, widget margins should die anyway
T 1476110967 18<lapo18>	also we don't really have a dom
T 1476110984 18<lapo18>	Company: speaking about css margins, yep overlapping props should die
T 1476111010 18<lapo18>	doing a parallel with html, gtk+ atm works mostly like tables
T 1476111032 18<lapo18>	a window is a big table, with other tables nested
T 1476111119 18<Company18>	yeah, that's because GTK's layout is different from web layout
T 1476111129 18<lapo18>	it's a table layout
T 1476111133 18<lapo18>	which is ok
T 1476111146 18<Company18>	you can't really flow content the way you do on the web if you're not forced into a viewport
T 1476111271 18<lapo18>	Company: it could be made like a table for the css
T 1476111295 18<lapo18>	Company: so you'll have things like border-collapse (YAY!) and border-spacing
T 1476111304 18<Company18>	lapo: it's a bit tricky because it's not a table but often a table of tables
T 1476111307 18*	lapo looks for tables specific props
T 1476111315 18<Company18>	lapo: but I definitely want to add border-spacing
T 1476111318 18<lapo18>	Company: yep nested tables
T 1476111323 18<Company18>	border-collapse might be harder
T 1476111371 18<lapo18>	Company: well if you think in terms of tables you won't have frames but cell borders
T 1476111499 18<lapo18>	border spacing would be the distance between border cells, which is kind of like spacing in a gtkbox
T 1476111640 18<lapo18>	https://www.w3.org/TR/CSS22/tables.html
T 1476111644 18<lapo18>	Company: ^ sigh
T 1476111653 18<lapo18>	Company: that's quite a bit of madness there
T 1476111659 18<lapo18>	there's^
T 1476111832 18<lapo18>	Company: border-spacing is a property of the childs of the table, I thought it was a table itself prop
T 1476111839 18<lapo18>	better for gtk+ model
T 1476111884 18<Company18>	lapo: yeah, tables have lots of crack
T 1476111897 18<Company18>	lapo: unfortunately, so has flexbox
T 1476111906 18<Company18>	lapo: so I never know what to try to follow...
T 1476111985 18<lapo18>	not to mention css3 table layout
T 1476112027 18<lapo18>	Company: uhm, probably better to go after tables, to my ignorant eyes that describes the gtk+ model pretty accuratelly
T 1476112065 18<Company18>	the first neat issue is that GtkBox is 1-dimensional
T 1476112082 18<Company18>	but you can set_orientation() it to flip the dimension
T 1476112097 18<lapo18>	kind of like a flexbox
T 1476112100 18<lapo18>	uhmph
T 1476112102 18<Company18>	plus, tables have <tr> and <td>
T 1476112107 18<Company18>	and GtkGrid doesn't
T 1476112139 18<Company18>	but then, vertical borders are collapse between <td> elements across <tr>s
T 1476112152 18<Company18>	it's crack all the way down
T 1476112173 18<lapo18>	it's not totally crack, but it's a nice example of additional design :-)
T 1476112195 18<Company18>	I guess I'll just wait until somebody files a bug to treat GtkWindow titles like <th> instead of <tr>
T 1476112201 18<Company18>	before suiciding
T 1476112204 18<lapo18>	it's a bit overengineered
T 1476112245 18<lapo18>	a tiny bit
T 1476112324 18<Company18>	<table><tr><td>Absolutely</td></tr></table>
T 1476112334 18<lapo18>	ok, a gtkbox works pretty much exactly like a flexbox, no?
T 1476112351 18<Company18>	until you start with the crack
T 1476112374 18<Company18>	and flexboxes can flow, kinda like GtkFlowBox
T 1476112401 18<lapo18>	yep
T 1476112420 18<lapo18>	justify-content prop would be neat
T 1476112493 18<Company18>	justify-content: blame-app-developer;
T 1476112534 18<Company18>	lapo: we do that same thing with align and expand flags
T 1476112555 18<lapo18>	indeed
T 1476112567 18<lapo18>	as widgets props not in css tho
T 1476112575 18<Company18>	yeah
T 1476112583 18<Company18>	i think it makes sense as widget props though
T 1476112589 18<Company18>	because it's layout and not style
T 1476112598 18<lapo18>	layout is style
T 1476112607 18<lapo18>	at least on the web
T 1476112616 18<Company18>	yeah
T 1476112622 18<Company18>	but not in GTK
T 1476112638 18<lapo18>	where do you draw a line?
T 1476112645 18<lapo18>	spacing is layout as well
T 1476112649 18<lapo18>	AND style
T 1476112652 18<Company18>	i try not to be too strict about it
T 1476112677 18<Company18>	but it's my differentiation between "what the app developer should do" and "what's better left to lapo"
T 1476112687 18<Company18>	app developers do layout, you're all about style
T 1476112719 18<lapo18>	it's more about what the app developer should do with css
T 1476112727 18*	Company just for fun opened https://www.google.de/search?q=lapo+style&tbm=isch now
T 1476112742 18<Company18>	lapo: the app developer IMNSHO should ideally never touch css ever
T 1476112757 18<lapo18>	I guess you'll end up with elkan
T 1476112762 18<lapo18>	pretty sure about it
T 1476112766 18<lapo18>	indeed
T 1476112773 18<mclasen18>	whats elkan ?
T 1476112794 18<lapo18>	mclasen: lapo elkann
T 1476112798 18<Company18>	mclasen: http://www.theconfuseddasher.com/wp-content/uploads/2014/11/Lapo-Elkann-Fashion-Icon.jpg
T 1476112834 18<lapo18>	mclasen: you know agnellis, owner of fiat-crysler, ferrari, juventus and some other stuff
T 1476112844 18<Company18>	mclasen: he's also a fedora fan apparently: http://irenebrination.typepad.com/.a/6a00e55290e7c48833017c350bc64a970b-320wi
T 1476112879 18<Company18>	jasper needs that hat
T 1476112910 18<lapo18>	a member of that family which ended up on the newspapers over here, since got paparazzed wasted on coke with three transsexual whores
T 1476112921 18<lapo18>	or something like that
T 1476112927 18<mclasen18>	oh, I missed the query
T 1476112976 18<lapo18>	he drives a camouflage painter ferrari, which is blasphemous at least
T 1476112984 18<lapo18>	painted
T 1476113024 18<bugbot18>	otaylor@redhat.com changed the Status on bug 747540 from RESOLVED OBSOLETE to REOPENED ---.
T 1476113024 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=747540 gio, normal, gtkdev, REOPENED , g_unix_mounts_get() ignores btrfs subvolumes
T 1476123473 18<bugbot18>	mclasen@redhat.com changed the Status on bug 772415 from NEW --- to RESOLVED FIXED.
T 1476123473 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=772415 Backend: Wayland, normal, gtk-bugs, RESOLVED FIXED, Avoid calling eglGetDisplay
T 1476123494 18<phako18>	ehm. anyone seen Negative repeat count does nothing at /usr/bin/gtkdoc-mkdb line 3812, <INPUT> line 88. ?
T 1476126141 18<Company18>	huh?
T 1476126151 18<Company18>	so GDK_WINDOW_SUBSURFACE windows are toplevels?
T 1476126304 18<Company18>	no, they are not
T 1476126311 18<Company18>	but somehow GDK pretends they are
T 1476126330 18<Company18>	we apparently also make transient toplevels subsurfaces
T 1476126335 18<Company18>	what's up with that?
T 1476126366 18<Company18>	git blame says ofourdan and jadahl know about that
T 1476126414 18<Company18>	this code looks very brittle
T 1476126513 18<Company18>	if (impl->transient_for && !impl->transient_for->impl->mapped) { g_warning ("I'll create a different window now. Whatever"); do_something_else(); }
T 1476126570 18*	Company goes elsewhere to not have to rant about the duct tape backend
T 1476126572 18<Company18>	again
T 1476126873 18<bugbot18>	mclasen@redhat.com changed the Status on bug 772348 from NEW --- to RESOLVED FIXED.
T 1476126874 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=772348 Widget: GtkFileChooser, normal, gtk-bugs, RESOLVED FIXED, placesviewrow: busy_spinner when visible offsets the rest of the widgets on the row
T 1476127332 18<aleb18>	I call tree_view.enable_model_drag_source(Gdk.ModifierType.BUTTON1_MASK, [EFFECT_TARGET_ENTRY], Gdk.DragAction.COPY). The problem is that when I drag elements out of the treeview, the elements disappear. This should not happen because I specify only DragAction.COPY. Why is this happening? Should I file a bug?
T 1476132516 18<bugbot18>	christian@hergert.me changed the Component on bug 772695 from general to .General.
T 1476132517 18<bugbot18>	christian@hergert.me changed the Product on bug 772695 from gnome-builder to gtk+.
T 1476132517 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=772695 .General, normal, gtk-bugs, NEW , Show the keyboard shortcuts from left to right even in RTL
T 1476133037 18<heftig18>	GLib:ERROR:timer.c:38:test_timer_basic: assertion failed (micros == ((guint64)(elapsed * 1e6)) % 1000000): (1 == 0)
T 1476133046 18<heftig18>	what is this? rounding error?
T 1476134974 18<aleb18>	http://lazka.github.io/pgi-docs/#Gtk-3.0/functions.html#Gtk.drag_finish "del"?!
T 1476135032 18<gregier18>	aleb: must be a problem with the docs, however the prototype is correct (del_)
T 1476135072 18<gregier18>	pygobject keeps a list of keywords and adds an '_' if required 
T 1476135111 18<aleb18>	no, see above why I'm surprised
T 1476135130 18<aleb18>	I have the feeling I specify "COPY" everywhere and then at the end a boolean flag overrides that and makes the operation MOVE instead of COPY.
T 1476137676 18<bugbot18>	christian@hergert.me changed the Status on bug 772695 from NEEDINFO --- to RESOLVED FIXED.
T 1476137676 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=772695 .General, normal, christian, RESOLVED FIXED, Show the keyboard shortcuts from left to right even in RTL
T 1476138381 18<Company18>	ebassi: what do we do with https://git.gnome.org/browse/gtk+/tree/gdk/gdkwindow.c#n4280 going forward?
T 1476138398 18<Company18>	ebassi: does it even work with GSK/GGL?
T 1476146563 18<robert_18>	so is there a way I can tell one GdkEvent from another?
T 1476146590 18<robert_18>	like if I have two or three events being handled by the same event handler
T 1476151143 18<Company18>	robert_: what kind of event are we talking here?
T 1476161088 18<xor18>	Hello. Does anyone know if there is a shortcut for expanding a node in a treeview? I'm looking at the gedit file browser sidebar, and I'd like to work on it with just the keyboard, but I can seem to expand folders without using the mouse.
T 1476161121 18<xor18>	... but I *can't* seem to expand folders...
T 1476162278 18<xor18>	The_gull> xor: <shift>right for expand all (and <shift>left to collapse all)
T 1476162598 18<The_gull18>	“and looks like + and - should expand/collapse, but usually trigger other things (like a zoom) ; I remember notably that these chars are handled by default by the searchbar, if there’s one”
T 1476175113 20*	Disconnected (20Connection reset by peer)
T 1476175127 19*	Now talking on 22#gtk+
T 1476175127 22*	Topic for 22#gtk+ is: #gtk+ is proud to announce its selection as the official IRC channel of the Toronto 2017 GTK+ Hackfest
T 1476175127 22*	Topic for 22#gtk+ set by 26Company (24Fri Aug 19 18:16:57 2016)
T 1476180141 18<tomtryf18>	Hello, there's a bug in the Greek translation of evolution that a string breaks the window width of the application. https://bugzilla.gnome.org/show_bug.cgi?id=577530
T 1476180173 18<tomtryf18>	Can i find the specific string(s) using the Gtk inspector?
T 1476183517 18<swilmet18>	no This Week in GTK+ ?
T 1476183618 18<swilmet18>	last one was 3 weeks ago
T 1476183705 18<mclasen18>	I guess we should set up a schedule and do it round robin
T 1476183718 18<timj18>	ebassi: why does extract_objects help with your unit tests? you can simply link the unit tests against the library you're developing...
T 1476183865 18<ebassi18>	timj: I'm testing an internal API
T 1476183877 18<ebassi18>	timj: The symbols I'm using are not exported in the shared library
T 1476183928 18<ebassi18>	timj: I'd have to create a separate, static, non-installed library, and then link the tests against it
T 1476183943 18<ebassi18>	swilmet: Not much happened until last week
T 1476184292 18<ebassi18>	(and I was kind of busy yesterday, so I forgot even if I wanted to write it)
T 1476185333 18<swilmet18>	ok
T 1476185347 18<swilmet18>	another thing, at https://blog.gtk.org/2016/09/01/versioning-and-long-term-stability-promise-in-gtk/
T 1476185358 18<swilmet18>	"More details about these plans, including specifics for library developers and distribution packagers, will follow in subsequent blog posts."
T 1476185442 18<swilmet18>	I suppose the subsequent blog posts are in the pipeline
T 1476185507 18<ebassi18>	The will be, if they are needed, or if somebody writes them
T 1476185617 18<swilmet18>	ok, it's still a bit too early
T 1476187894 18<mclasen18>	I was planning on writing something when Company lands his big cleanup branch
T 1476188985 18<mclasen18>	ebassi: how is your layout work coming along ?
T 1476190906 18<ebassi18>	mclasen_afk: Pretty nicely; I'm adding a custom GtkBuildable parser, and writing the visual layout language one
T 1476190919 18<ebassi18>	mclasen: Resizing is still a bit meh
T 1476190951 18*	ebassi needs to figure out better priorities for all the basic constraints
T 1476190981 18<mclasen18>	is there a branch to play with, somewhere ?
T 1476191073 18<ebassi18>	mclasen: Oh, it's not integrated in GTK because we kind of needed it in our apps
T 1476191091 18<ebassi18>	mclasen: But it's pretty much a pass of sed
T 1476191100 18<ebassi18>	https://github.com/ebassi/emeus
T 1476191126 18<baedert18>	Company: How do we handle e.g. the style properties in GtkScrollbar?
T 1476191170 18<ebassi18>	For integration inside GTK, it would be interesting to get it into GtkWidget itself, and replace GtkSizeGroup, for instance, instead of being a separate layout manager
T 1476191189 18<mclasen18>	ebassi: no problem, playing with it outside is a bit nicer anyway
T 1476191191 18<ebassi18>	But I honestly don't know whether or not it's a good idea
T 1476191289 18<mclasen18>	did we ever discuss separating out layout managers, clutter-style ?
T 1476191367 18<ebassi18>	mclasen: Not seriously, no; though I still think it'd be a good thing to do, to avoid having to implement GtkContainer just to lay out children
T 1476191484 18<ebassi18>	Apropos of things to put on the 4.0 pile: I'd like to propose we start using C99
T 1476191516 18<ebassi18>	API break is a good time as any
T 1476191961 18<mclasen18>	that still requires us to bet on msvc adopting clang ?
T 1476192137 18<ebassi18>	MSVC kind of supports C99. Ish.
T 1476192171 18<alex18>	What would it give us exactly?
T 1476192173 18<alex18>	 // comments
T 1476192173 18<ebassi18>	Not all of it, because of course, who would support a 17 years old ISO standard.
T 1476192199 18<ebassi18>	declarations interleaved with statements, mostly
T 1476192208 18<ebassi18>	Fewer undefined behaviours
T 1476192211 18<alex18>	designated initializers
T 1476192227 18<ebassi18>	Initializers, yes. Except MSVC doesn't support all of those
T 1476192265 18<ebassi18>	Would be nice if we could get rid of the glib types, but those will have to stay for backward compat
T 1476192284 18<alex18>	http://stackoverflow.com/questions/24090739/possible-compiler-bug-in-msvc12-vs2013-with-designated-initializer
T 1476192311 18<alex18>	Seems to be there, but there is at least one bug in vs2013 fixed in 2015
T 1476192357 18<ebassi18>	compound literals are actually my favourites
T 1476192383 18<mclasen18>	yeah, those are nice
T 1476192408 18<alex18>	Seems pretty sane
T 1476192413 18<alex18>	Lets go with that
T 1476192434 18<mclasen18>	can we write down a definition of the C99 subset we allow somewhere ?
T 1476192447 18<alex18>	Possibly with some limitations wrt MSVC, but i think we can require a pretty recent msvc
T 1476192473 18<ebassi18>	We use a bunch of stuff from math.h that is kind of defined for C99
T 1476192497 18<ebassi18>	We already need to fall back to reimplementations for older MSVC, would be nice to drop that code
T 1476192525 18<alex18>	https://msdn.microsoft.com/en-us/library/hh409293(v=vs.120).aspx
T 1476192533 18<alex18>	Supports these ISO C99 language features:
T 1476192533 18<alex18>	    _Bool
T 1476192533 18<alex18>	    Compound literals.
T 1476192533 18<alex18>	    Designated initializers.
T 1476192533 18<alex18>	    Mixing declarations with code.
T 1476192543 18<alex18>	So, lets require msvc 2013?
T 1476192586 18<alex18>	Things that are still missing:
T 1476192586 18<alex18>	    Variable length arrays (optional in C11).
T 1476192586 18<alex18>	    Support for the inline keyword (you can use __inline, but semantics might be slightly different).
T 1476192586 18<alex18>	    Support for the restrict keyword (you might be able to use __restrict).
T 1476192586 18<alex18>	    Type-generic math functions from tgmath.h.
T 1476192588 18<alex18>	    _Complex type (optional in C11).
T 1476192598 18<alex18>	so, lets not use those
T 1476192727 18<ebassi18>	We could use `bool` internally, but not in public API because `bool` has a different size than `gboolean`
T 1476192742 18<ebassi18>	We don't use VLAs; we already have inline/__inline
T 1476192747 18<ebassi18>	And we don't use _Complex
T 1476192780 18<ebassi18>	So I guess the subset is: mixed declarations; designated initializers; compound literals; single-line comments
T 1476192816 18<mclasen18>	yeah, thats a good list
T 1476192837 18<mclasen18>	desrt: how do you feel about doing the same in glib ?
T 1476192906 18<ebassi18>	doing things like `typedef gint64 int64_t;` unconditionally would also be nice…
T 1476192917 18<desrt18>	compound literals are cool
T 1476192926 18<desrt18>	almost everything else is not that useful
T 1476192945 18<desrt18>	for example, i think using a weird mix of gboolean/bool would only be confusing and lead to problems
T 1476192982 18<mclasen18>	thats true
T 1476192983 18<desrt18>	designated initialisers are also quite useful for readability, of course
T 1476192990 18<desrt18>	so i wouldn't mind starting to use those
T 1476193016 18<desrt18>	typedef bool gboolean; is on my 3.0 list
T 1476193018 18<tpm18>	ebassi, I think it'd be alright to just require MSVC 2015
T 1476193044 18<desrt18>	GVariant boolean is ABI compatible with 'bool', not gboolean, and it would be cool to resolve that   (i planned for the future on that one... future is a bit slow coming, though)
T 1476193255 18<alex18>	descender: designated initializers are kinda nice
T 1476193261 18<alex18>	eh, desrt
T 1476193263 18<desrt18>	poor descender :)
T 1476193287 18<alex18>	for (int i = 0; ...
T 1476193289 18<alex18>	also kinda nice
T 1476193295 18<desrt18>	also kinda crack :)
T 1476193303 18<alex18>	single like comments, sorta nice
T 1476193319 18<desrt18>	woh.  single line comments?!?  take it easy now...
T 1476193325 18<alex18>	crazy eh!
T 1476193349 18<pwithnall18>	!!!
T 1476193350 18<desrt18>	single-line comments is one of those C++ feature that nobody really understands and leads to spaghetti code!
T 1476193369 18<alex18>	 some code(); // blah
T 1476193372 18<alex18>	is kind nice
T 1476193378 18<alex18>	/ for blocks, not so
T 1476193379 18<alex18>	 // for blocks, not so
T 1476193397 18<desrt18>	i don't like it
T 1476193405 18<alex18>	Its the most useful for commenting out lines
T 1476193418 18<alex18>	but thats not generally a problem, because they don't end up in the final resulöt
T 1476193418 18<desrt18>	i use single-line comments when i'm hacking on stuff to make "// TODO: clean this up" sort of comments
T 1476193429 18<desrt18>	that way it's easy to find all of those cases before pushing :)
T 1476193430 18<baedert18>	Who doesn't have a shortcut for (un)comment lines or blocks anyway?
T 1476193446 18<alex18>	shorter than // ?
T 1476193473 18<baedert18>	using // on a 200 line block of code is pretty long
T 1476193489 18<alex18>	yeah, for those its different
T 1476193492 18<baedert18>	I can use cc here to comment a line or a block
T 1476193500 18<csorianoi18>	baedert: #if 0....#endif
T 1476193503 18<desrt18>	we're not saying to get rid of /* */ entirely
T 1476193512 18<csorianoi18>	best way to "comment" lines
T 1476193527 18<desrt18>	in fact, i imagine that /* */ would still be the preference
T 1476193534 18<desrt18>	but for quick one-offs like alex just mentioned...
T 1476193536 18<baedert18>	Why is there no tests/testlabel?
T 1476193543 18<desrt18>	basically, any comment where /* and */ would have been on the same line
T 1476193594 18<baedert18>	Or, in other words, can I just assume that https://paste.xinu.at/s7Iw/ will work? :)
T 1476193612 18<alex18>	of course, what we actually want from the compiler is constructors, and g_auto*
T 1476193617 18<alex18>	:/
T 1476193634 18<desrt18>	but single-line comments!!
T 1476193639 18<ebassi18>	baedert: No, it wouldn't
T 1476193654 18<alex18>	baedert: tests/testgtk has all sorts of test
T 1476193668 18<alex18>	of course, its complete shit, so you have to "know" what its supposed to do
T 1476193671 18<ebassi18>	baedert: GdkRGBA uses [0,1] values; Pango still expects [0,255] values
T 1476193713 18<ebassi18>	baedert: So you cannot just replace GdkColor with GdkRGBA
T 1476193998 18<mclasen18>	also, pango supports alpha now, so if you switch to rgba, you may want to add that
T 1476194360 18<Company18>	ebassi: what do we do with https://git.gnome.org/browse/gtk+/tree/gdk/gdkwindow.c#n4280 going forward?
T 1476194362 18<Company18>	ebassi: does it even work with GSK/GL?
T 1476194422 18<Company18>	I was thinking about just nuking it, but I suppose we want to keep redraw hilighting as a debug feature
T 1476194517 18<Company18>	baedert: min-slider-length is min-width, fixed-slider-length shouldn't be a style property - that keeps the visibility toggles for the stepper buttons
T 1476194543 18<ebassi18>	Company: No, it doesn't; and yes, I'd nuke it
T 1476194571 18<ebassi18>	Company: But it's probably something that needs to be done inside GSK or GTK, since GdkWindow doesn't really handle drawing any more
T 1476194592 18<Company18>	baedert: we can either add display: none; support or just hardcode things
T 1476194647 18<Company18>	ebassi: so I'll nuke it for now, but I don't have a nice place to put it
T 1476194685 18<Company18>	ebassi: so I'm open for ideas
T 1476194861 18<ebassi18>	Company: That code just draws over every window that received an invalidation, right?
T 1476194901 18<ebassi18>	It would be possible to add a bunch of render nodes to GtkWindow that just rendered a rectangle for each gtk_widget_queue_draw() call
T 1476194917 18<ebassi18>	Though it may need some more internal API to intercept it
T 1476194927 18<Company18>	ebassi: yeah, that's my best idea so far
T 1476194958 18<Company18>	ebassi: save { timestamp, invalid_region } tuples and fade them out over a few seconds
T 1476194985 18<ebassi18>	Heat maps! :-)
T 1476194991 18<ebassi18>	But, yes: seems like a good plan
T 1476195017 18<Company18>	now we just need a good place to store the setting
T 1476195032 18<Company18>	because if it's in GTK, we can't store it on the GdkDisplay...
T 1476195125 18<Company18>	and we can't store it on the GtkWindow, because we want to toggle it on for future windows, too
T 1476195262 18<baedert18>	Company: yeah, same for the stepper properties in gtknotebook
T 1476195420 18<Company18>	baedert: do we have more examples where a display: none; might be useful?
T 1476195625 18<baedert18>	Company: Don't think so
T 1476195718 18<Company18>	baedert: the hackish version would be to make the arrows request a size of min-width x min-height
T 1476195732 18<Company18>	baedert: and then that would be 0x0 and everything would just work
T 1476196032 18<baedert18>	Company: isn't that the size request for them anyway?
T 1476196119 18<Company18>	baedert: I thought someone hardcoded 16x16 or so
T 1476196213 18<mclasen18>	Company: keep the inspector in mind - those debug features need ideally to be tied to a display so they don't affect the inspector
T 1476196234 18<Company18>	mclasen: yeah, that's why I'm wondering where to put them
T 1476196244 18<baedert18>	heh GtkBuiultinIcon checks for min-size > 0.0
T 1476196247 18<Company18>	mclasen: I want per-display features inside GTK (not GDK)
T 1476196309 18<baedert18>	I guess so they aren't invisible if themes don't set a min size?
T 1476196346 18<baedert18>	Oh I didn't delete default_size_property from there
T 1476196355 18<Company18>	baedert: that check is because of backwards compat
T 1476196371 18<Company18>	min-width overrides style property overrides default value
T 1476196390 18<alex18>	Company: that ugly flash thing doesn't work on wayland anyway i think
T 1476196401 18<alex18>	it just overdraws and then sync waits
T 1476196405 18<Company18>	baedert: and because I can't check for "is it set", I just check for 0
T 1476196405 18<alex18>	that can't ever wokr
T 1476196406 18<alex18>	work
T 1476196418 18<alex18>	needs to be a proper part of the redraw machinery
T 1476196424 18<Company18>	yeah
T 1476196425 18<mclasen18>	yeah, doesn't work on wayland
T 1476196431 18<mclasen18>	so nuke it
T 1476196449 18<alex18>	of course, the point of the thing is to show how each lowlevel frame is drawn
T 1476196466 18<mclasen18>	I did put some other debug draw stuff directly into the gadget drawing code
T 1476196468 18<alex18>	so, queueing a new frame for the flashing make things... interesting...
T 1476196479 18<Company18>	alex: that reminds me: I intend to remove the ability to call gdk_window_invalidate() on client-side windows
T 1476196491 18<alex18>	anyway, with gsk based drawing we'll not do that kind of partial updates anyway
T 1476196499 18<Company18>	alex: and make sure queue_draw() calls travel inside the widget hierarchy
T 1476196519 18<alex18>	Company: i posted something about this in the gsk threads
T 1476196557 18<alex18>	https://mail.gnome.org/archives/gtk-devel-list/2016-July/msg00002.html & co
T 1476196606 18<alex18>	I think this may have changed a bit with how ebassi wants to do caching
T 1476196625 18<alex18>	but yeah, we definately want to rethink invalidation
T 1476196703 18<Company18>	i'm just realizing that invalidation still does clipping
T 1476196727 18<Company18>	to GdkWindow
T 1476196771 18<alex18>	Its nice that invalidating an scrolled-away widget does nothing
T 1476196789 18<alex18>	but that is assuming a trivial mapping of widgets to the final rendering
T 1476196790 18<Company18>	yes, that is definitely an important feature to keep
T 1476196833 18<alex18>	Things may be more complex in a gsk world
T 1476196841 18<Company18>	i think for now I want GtkContainerClass.queue_draw_on_child(widget, child); vfunc
T 1476196867 18<Company18>	and call that from queue_draw()
T 1476196952 18<oholy18>	msanchez: hey, can you please take a look at Bug 747540 ?
T 1476196964 18*	msanchez looks
T 1476196966 18<Company18>	and then make sure GtkWindow overrides queue_draw() to actually invalidate on the GDK window
T 1476196993 18<Company18>	and override queue_draw_on_child() on widgets that need clipping
T 1476197005 18<alex18>	Company: Make sure to check it with ebassi
T 1476197210 18<Company18>	there goes my X server
T 1476197290 18<Company18>	can anybody else nuke their X server by running tests/print-editor and going File => Preview ?
T 1476197303 18<Company18>	or is that just me?
T 1476197422 18<Company18>	*boom*
T 1476197425 18<Company18>	works very reliable
T 1476197792 18<ofourdan18>	mclasen: only one attachment from bug 772415 has been pushed and the bug is closed, did we forget to push attachment 337345 or is it intentional?
T 1476197843 18<ofourdan18>	I dunno if ajax has the right to push to gtk+ git
T 1476198446 18<mclasen18>	ofourdan: I pushed a build fix on top of the first patch. I believe it is all taken care of
T 1476198487 18<ofourdan18>	ah all right then
T 1476198572 18<msanchez18>	oholy: replied
T 1476198586 18<oholy18>	msanchez: thanks
T 1476198630 18<msanchez18>	sorry I did not see the email yet  
T 1476198783 18<mclasen18>	Company: didn't crash here
T 1476198840 18<Company18>	mclasen: Wayland or X?
T 1476198956 18<mclasen18>	tried both with wayland and X (xwayland)
T 1476199014 18<Company18>	then it's probably jsut creating a too-big window or so and metacity can't deal with it
T 1476199053 18<ofourdan18>	unlikely, metacity craashing won;t bring the whole session on X
T 1476199088 18<ofourdan18>	what does journalctl says about Xorg backtrace at the time of the problem?
T 1476199268 18<mclasen18>	that was my guess, big texture / window
T 1476199434 18<Company18>	metacity gdk_x_error()s
T 1476199503 18<Company18>	due to request_code 129 (SHAPE) giving a BadMatch
T 1476199584 18<ofourdan18>	on X, gnome-session will automatically respawn metacity i ncases it terminates unexpectedly, so that won;t make you lose your entire session, at worst you'll see the windows being redicorated when metacity restarts
T 1476199626 18<ofourdan18>	but you shouldn;t lose your xsession - the only case where you'd lose your xsession is when Xorg itself crashes or if gnome-session dies
T 1476199740 18*	ofourdan whishes we could say the same about gnome-shell on Wayland :)
T 1476199798 18<Company18>	well, my setup is a bit screwed up
T 1476199807 18<Company18>	so it might just be that X terminates when metacity dies
T 1476199844 18<Company18>	when I login, I get an empty screen and need to start gnome-panel manually...
T 1476199851 18<ofourdan18>	oh
T 1476199891 18<Company18>	but yeah, gnome-session restarts metacity
T 1476199896 18<Company18>	you're right
T 1476199909 18<Company18>	metacity then decides to recreate decorations for the too large window and crashes again
T 1476199916 18<Company18>	and then gnome-session restarts metacity
T 1476199919 18<Company18>	metacity then decides to recreate decorations for the too large window and crashes again
T 1476199924 18<ofourdan18>	lol
T 1476199932 18<Company18>	that happens a few times and then gnome-session calls it quits
T 1476199957 18<ofourdan18>	it should start twm as a fallback :p
T 1476199960 18*	ofourdan hides!
T 1476199966 18<ofourdan18>	j/k
T 1476200003 18<Company18>	it should not crash asa fallback!
T 1476200029 18<Company18>	ofourdan: while you're here, we need to talk about wayland and subsurfaces
T 1476200077 18<Company18>	because (a) GDK creates subsurfaces for toplevel windows when they are set as transient for other windows and that feels wrong
T 1476200087 18<ofourdan18>	nah
T 1476200095 18<ofourdan18>	it doesn't - oly for popup
T 1476200099 18<ofourdan18>	*only
T 1476200133 18<ofourdan18>	if it does, then yeah, it feels wrong - but I don;t think it does, does it?
T 1476200139 18<Company18>	and (b) GDK_WINDOW_SUBSURFACE windows are created as toplevels that then need to be marked as transient for something
T 1476200178 18<Company18>	you're right
T 1476200181 18<Company18>	only for popups
T 1476200217 18<Company18>	why are popups mapped as subsurfaces?
T 1476200221 18<ofourdan18>	iirc, a GTK_POPUP_WINDOW (ie equivalent of a o-r in X11) will be mapped as a subsurface *if* there is no active grab and if it's a transient - it doesn't make all regular toplevel windows transient as subsurface 
T 1476200278 18<ofourdan18>	because there is no equivalent of override redirect windows in Wayland, the closest is subsurface, these can be placed relativeley to their ttoplevel (thus the need for a transient relationship)
T 1476200320 18<Company18>	so it's used for menus, combobox dropdowns etc?
T 1476200339 18<ofourdan18>	those which have an active grab will use an xdg_popup instead
T 1476200368 18<ofourdan18>	but as nto all gtk popup windows use an actve grab, those who don't will translate as a subsurface
T 1476200384 18<ofourdan18>	so that apps using gtk popup windows still work in wayland
T 1476200411 18<Company18>	i feel that differentiation should be more explicit
T 1476200431 18<Company18>	now that we break API...
T 1476200433 18<ofourdan18>	there is no gtk equivalent to subsurface
T 1476200438 18<ofourdan18>	but if we had ...
T 1476200440 18<baedert18>	grabless popup windows are broken on wayland :(
T 1476200465 18<ofourdan18>	baedert: not if they have a transient relationship
T 1476200483 18<Company18>	ofourdan: we could create one
T 1476200518 18<ofourdan18>	Company: yeah, we could, but I wouldn't want to model gtk4 after Wayland like we modeled the previous versions after X
T 1476200528 18<Company18>	ofourdan: especially because I'm currently taking apart gdk_window_new() and adding specific constructors for all the subtypes
T 1476200552 18<ofourdan18>	I mean, subsurfaces are Wayland specific, how much of that actually applies to other backends
T 1476200552 18<baedert18>	ofourdan: mine has a transient parent set and I'm pretty sure so has the gsv one
T 1476200568 18<ofourdan18>	baedert: I would need a simple rproducer :)
T 1476200588 18<Company18>	ofourdan: and I consider Wayland the main guideline for desiging GDK's API
T 1476200608 18<baedert18>	tests/test-completion in gtksourceview
T 1476200621 18<baedert18>	But there's even a bug open against gtk+ now iirc
T 1476200639 18<Company18>	ofourdan: with X, win32, quartz and Mir being the backends that must be able to also implement whatever feature we come up with
T 1476200640 18<ofourdan18>	baedert: that's aregression then, because I fixed it circa 3.20 iirc
T 1476200672 18<Company18>	ofourdan: subsurfaces for example should be easy in X if you just make them regular override_redirect toplevels and move them in sync with their parent
T 1476200684 18<garnacho18>	ofourdan: zxdg-shell v6 maybe?
T 1476200700 18<ofourdan18>	garnacho, possibly, I dunno
T 1476200767 18<Company18>	ofourdan: one of the differences between GDK1 and GDK4 for me is that early GDK tried to be just a wrapper - ie you were able to just use X calls and GDK would deal with those fine
T 1476200803 18<Company18>	ofourdan: while current GDK assumes control and if you fiddle directly with the backend, you're responsible for it - GDK will make very little effort to sync up
T 1476200829 18<Company18>	(both Mozilla and Eclipse used to be heavy users of that early behavior)
T 1476200847 18<ofourdan18>	yeah, and that bites hard :)
T 1476200863 18<Company18>	right
T 1476200901 18<Company18>	but if we assume full control over X, we can create override_redirect toplevels for subsurfaces or things like that
T 1476200936 18<Company18>	(might still be hard because of X window stacking rules, but it's possible at least)
T 1476200989 18<ofourdan18>	yes, I understand and mostly agree, my only concern is to design gdk4 after a specific backend (being Wayland in this case) while previous version was designed after X, a different backend, but still designed after one specific implementation
T 1476201041 18<ofourdan18>	if that's the way forward, then yes, subsurfaces should be somehting in gdk more than Wayland backend alone
T 1476201074 18<ofourdan18>	and yes, it;s probably easier to simulate subsurfaces in X than o-r in Wayland
T 1476201359 18<Company18>	ofourdan: i wouldn't use the term "designed after" but "design guided by"
T 1476201383 18<Company18>	ofourdan: we don't need to have every Wayland feature in GDK, but every GDK feature should be implementable in Wayland without hacks
T 1476201402 18<ofourdan18>	yes, completely agree
T 1476201446 18<Company18>	clearly, our feature decisions should be made by what GTK needs
T 1476201451 18<Company18>	not by what Wayland offers
T 1476201475 18<Company18>	ie we won't add a subsurface window type to GDK if no GTK widget wants it
T 1476201552 18<baedert18>	ofourdan: https://bugzilla.gnome.org/show_bug.cgi?id=771694
T 1476201568 18<baedert18>	GtkEntryCompletion works because it explicitly requests a subsurface fwiw
T 1476201580 18<baedert18>	Or at least that what I think is the reason
T 1476201836 18<ofourdan18>	baedert: I don't see any completion window with testentrycompletion
T 1476201845 18<ofourdan18>	so  it's broken as well
T 1476201883 18<Company18>	I think we should really fix our window types
T 1476201898 18<Company18>	the exisiting ones don't make sense in a Wayland world
T 1476201915 18<Company18>	and they don't represent GTK's requirements well anyway
T 1476201981 18<Company18>	I don't even know what the difference between a TEMP and a TOPLEVEL is
T 1476201998 18<Company18>	let alone if you mix that with the override_redirect flag
T 1476202161 18<Company18>	oh also
T 1476202170 18<Company18>	what do we do with offscreen windows?
T 1476202186 18<Company18>	does anything real (outside of clutter-gtk) use that?
T 1476205475 18<heftig18>	eDP1 is suddenly named eDP-1. the heck happened? 
T 1476205495 18<heftig18>	(the latter actually matches the kms name)
T 1476205576 18<heftig18>	ooh, right.
T 1476205583 18<heftig18>	intel driver vs modesetting driver
T 1476220402 19*	Now talking on 22#gtk+
T 1476220402 22*	Topic for 22#gtk+ is: #gtk+ is proud to announce its selection as the official IRC channel of the Toronto 2017 GTK+ Hackfest
T 1476220402 22*	Topic for 22#gtk+ set by 26Company (24Fri Aug 19 18:16:57 2016)
T 1476222169 18<hergertme18>	desrt, is this crack? https://bugzilla.gnome.org/show_bug.cgi?id=772775
T 1476281793 20*	Disconnected (20Connection timed out)
T 1476281807 19*	Now talking on 22#gtk+
T 1476281807 22*	Topic for 22#gtk+ is: #gtk+ is proud to announce its selection as the official IRC channel of the Toronto 2017 GTK+ Hackfest
T 1476281807 22*	Topic for 22#gtk+ set by 26Company (24Fri Aug 19 18:16:57 2016)
T 1476281846 18<owen18>	meh: It might be possible to improve the fallback heuristics, or it might not. I dont' think they've been worked on since the very first versions of Pango ~15 years ago - which had to deal with bdf fonts because that's all there was
T 1476281871 18<owen18>	(not in the world, but for X)
T 1476282199 18<meh18>	owen, yeah, can confirm it's broken with any BDF font, bummer
T 1476282303 18<meh18>	owen, wouldn't it just need to draw it above the same glyph tho? I don't get why it's going all the way above
T 1476282328 18<owen18>	meh: probably because it thinks that the combining mark is that tall?
T 1476282371 18<owen18>	meh: can you try the same string in chrome or firefox that use harfbuzz but not pango and see what you get?
T 1476282379 18<meh18>	owen, it works on firefox
T 1476282383 18<meh18>	kinda
T 1476282386 18<owen18>	meh: odd
T 1476282391 18<meh18>	it puts the combining character on the next glyph
T 1476282400 18<owen18>	meh: that doesn't sound like working
T 1476282405 18<meh18>	it works in rxvt-unicode, but I think that uses Xft
T 1476282703 18<owen18>	meh: unfortunately, I really don't know what is expected to work or not these days and where the code lives. Feel free to look around, but really, bdf fonts are best left on the shelf with 5.25" inch floppy disks :-)
T 1476282718 18<meh18>	owen, but I like my BDF fonts :(
T 1476282722 18<meh18>	but yeah, I'm looking into it
T 1476285418 20*	Disconnected (20Connection timed out)
T 1476285432 19*	Now talking on 22#gtk+
T 1476285432 22*	Topic for 22#gtk+ is: #gtk+ is proud to announce its selection as the official IRC channel of the Toronto 2017 GTK+ Hackfest
T 1476285432 22*	Topic for 22#gtk+ set by 26Company (24Fri Aug 19 18:16:57 2016)
T 1476288256 18<ricotz18>	Company, hi :), could you rebase your gtk4 on git master?
