T 1493689844 18<andlabs18>	oh yeah that reminds me
T 1493689848 18<andlabs18>	I forgot
T 1493689869 18<andlabs18>	do composite widget templates not have the whole GtkBuilder not giving you an extra reference to a non-GtkWindow thing
T 1493689890 18<andlabs18>	it's been a very long time but I know I want to use .ui files for some things like popovers now
T 1493689939 18<pengobab18>	i have no idea
T 1493690087 18<andlabs18>	...
T 1493690088 18<andlabs18>	oh cool
T 1493690094 18<andlabs18>	gst-plugins-bad doesn't build with libressl
T 1493690100 18<andlabs18>	and google turns up nothing! yay!
T 1493690293 18<pengobab18>	otherwise it would be gst-plugins-good
T 1493690511 18<andlabs18>	(there is a gst-plugins-good, I'm not sure what plugin this one is)
T 1493690654 18<pengobab18>	lol
T 1493690689 18*	pengobab is suspicious because everything is working correctly
T 1493691050 18<hergertme18>	Company, since i can't have a cssnode in gtk3 outside of libgtk, is there a better way than doing "add_class", "remove_class" in the draw vfunc to get an alternate style?
T 1493691111 18<Company18>	hergertme: no
T 1493691142 18<Company18>	hergertme: the save/restore method is the only thing you can do - outside of doing a composite widget of course
T 1493691188 18<hergertme18>	Company, what about a new style context, set_parent()/add_class() and reusing that?
T 1493691211 18<Company18>	that doesn't gain you anything
T 1493691226 18<Company18>	you only lose lots of things
T 1493691241 18*	hergertme basically just needs to be able to gtk_render_handle() without affecting parent border
T 1493691290 18<hergertme18>	basically i want "multipane" and "multipane .handle" to have separate borders
T 1493691306 18<hergertme18>	so that i can use gtk_render_handle() in the second case
T 1493691335 18<Company18>	custom widget! :)
T 1493691395 18<hergertme18>	i guess i can create an internal widget and just set_allocation() on it a bunch w/o a window
T 1493691423 18<hergertme18>	i just remember save/restore() being really heavy on sysprof profiles way back when
T 1493691878 18<andlabs18>	so I made a local change to a meson.build file
T 1493691885 18<andlabs18>	and I even committed it just to be safe
T 1493691895 18<andlabs18>	but when I tell jhbuild to go back to configure (step 7) it deletes the repo and redownloads it
T 1493691898 18<andlabs18>	how do I not do that
T 1493692929 18<Company18>	hergertme: premature evil is the root of all optimization
T 1493693611 18<pengobab18>	can I use https://developer.gnome.org/gtk4/unstable/ as a mean to know if something will be removed in Gtk4?
T 1493693627 18<pengobab18>	or is there a better source?
T 1493699418 18<yudi09918>	hello, I newbie here and need a help. I follow GTK+ tutorial from gnome.org and compile the example at https://git.gnome.org/browse/gtk+/tree/examples/application5, but got errors: https://pastebin.com/RC49YMeY
T 1493709292 18<cfoch18>	hi
T 1493709318 18<cfoch18>	are PangoAttrList and PangoAttrIterator still used?
T 1493709327 18<ebassi18>	Yes
T 1493709392 18<cfoch18>	do you use that in Python too?
T 1493709406 18<cfoch18>	I feel like there are annotations missing here -> https://git.gnome.org/browse/pango/tree/pango/pango-attributes.c#n1680
T 1493709436 18<cfoch18>	it should be "Returns: ..." instead of "Return value: ..." and the same for many other functions
T 1493709519 18<cfoch18>	my question "do you use that in Python" was referring to attr_list.get_iterator(), and I think you don't because that method is not available
T 1493709541 18<cfoch18>	so what do you do if you can't access to its iterator?
T 1493709655 18<ebassi18>	You will have to ask some Python developer for that
T 1493709681 18<ebassi18>	But it's true: the Pango API is not heavily introspection-friendly
T 1493709739 18<cfoch18>	I think it should be "Returns: (type PangoAttrIterator) (transfer none)" at leas it adds the get_iterator() method in Python but I have not tried it because IDK how to use it
T 1493709748 18<ebassi18>	Pango predates introspection by almost a decade, and it hasn't seen an API break like GTK+ to improve the introspectability of its API
T 1493709795 18<cfoch18>	bbl
T 1493713128 18<geek18>	gtk3 + python3 works on windows?
T 1493713469 18<ebassi18>	Yes
T 1493713503 18<ebassi18>	geek: Instructions: https://www.gtk.org/download/windows.php
T 1493713531 18<geek18>	ebassi, thank you
T 1493713764 18<andlabs18>	ok I need to set trycheckout to False
T 1493713773 18<andlabs18>	and then restart jhbuild because apparently Reload configuration doesn't work with that variable
T 1493714468 18<baedert18>	so
T 1493714490 18<baedert18>	my build apparently produces a file called "=" and then make distcheck complains because distclean doesn't delete it
T 1493714499 18<baedert18>	O_o
T 1493717777 18<geek18>	ebassi, is it easy to port python gtk code from linux to windows?
T 1493717818 18<ebassi[m]18>	geek: It depends on the Python code, what the goal of the code is.
T 1493717854 18<ebassi[m]18>	I'm pretty sure that a simple subprocess call to read the systemd journal is pretty much portable to Windows, from a Python perspective, but would fail quite spectacularly when executed.
T 1493717860 18<geek18>	ebassi[m], I am making an ERP in linux and further I want to port it to windows
T 1493717918 18<ebassi[m]18>	If you're using Python modules, G* platform API, and you're not conforming to OS-specific interfaces, then it should be portable.
T 1493717929 18<ebassi[m]18>	Standard disclaimers apply
T 1493717988 18<geek18>	I will try to do that, I hope it won't lead to much trouble
T 1493718050 18<tristan18>	geek, I think the trickiest part is in deployment, like do you rely on GTK+ dlls being installed, or do you do your own bundling
T 1493718071 18<tristan18>	geek, probably you can find other projects which have lived this and reuse
T 1493718142 18<geek18>	tristan, I want it to be hard to install so people will get in trouble to steal my code
T 1493718176 18<tristan18>	theres a new one :)
T 1493718192 18<geek18>	haha thank you both ebassi[m] tristan 
T 1493718798 18<mclasen18>	jadahl: if you are still around, one thing I forgot to bring up yesterday: https://github.com/flatpak/xdg-desktop-portal/issues/99
T 1493718808 18<mclasen18>	maybe this is more for garnacho anyway
T 1493718833 18<mclasen18>	but it is a protocol question: can we somehow get an app id added to data offer api ?
T 1493718873 18<mclasen18>	or can we add a separate request that lets a data source obtain the app id of the target before sending data ?
T 1493718976 18<mclasen18>	garnacho: ^
T 1493719231 18<garnacho18>	mclasen: hmm, the answer is "no" to both, besides wl_data_source/offer request additions. Maybe the compositor is in a better position to fill it in on behalf of the app?
T 1493719322 18<garnacho18>	mclasen: I think the extra mimetype makes sense, although I guess we still do need the app id to make it fly
T 1493721013 18<hadess18>	does this look weird to anyone? https://git.gnome.org//browse/glib/tree/gio/gdbusinterfaceskeleton.c#n384
T 1493721018 18<hadess18>	the "Propert" bit
T 1493721197 18<mclasen18>	PropertiesChanged, I guess ?
T 1493721228 18<mclasen18>	coincidentally, I just looked at that file yesterday, but I didn't notice this
T 1493721296 18<hadess18>	mclasen: i'm looking at that file for the same reason you were ;)
T 1493721336 18<mclasen18>	I concluded I can't do what I wanted
T 1493721340 18<mclasen18>	maybe you are more successful
T 1493721514 18<krnowak18>	pwithnall: About https://bugzilla.gnome.org/show_bug.cgi?id=781829 - you suggested adding a base parameter.
T 1493721515 18<bugbot18>	Bug 781829: general, normal, gtkdev, NEW , Add convenience functions for converting string to number
T 1493721524 18<hadess18>	mclasen: maybe providing "garbage" (everything off) values would be good enough, no?
T 1493721536 18<mclasen18>	if I could
T 1493721536 18<pwithnall18>	krnowak: hey
T 1493721552 18<mclasen18>	I don't think gdbus lets me reliably return different values for different callers
T 1493721552 18<krnowak18>	So basically that would stop being a convenience function, but rather a replacement. That's fine. Do we want base guessing (when you pass zero)?
T 1493721565 18<mclasen18>	there's too much caching going on for properties
T 1493721576 18<mclasen18>	and even if you turn that off, you don't know the caller in get_properties
T 1493721584 18<hadess18>	mclasen: ha, and the xdg-desktop-portal is the same for all apps
T 1493721600 18<mclasen18>	but it is only a beauty wart anyway
T 1493721612 18<krnowak18>	@pwithnall: Also, about hexadecimal numbers - they are sometimes prefixed with "0x". Do we want to allow that? If so, should passing only "0x" result in a failure?
T 1493721613 18<mclasen18>	not really a dangerous leak or attack surface
T 1493721614 18<pwithnall18>	krnowak: It still wouldn’t be a full replacement, since you can’t use it to part-parse something like ‘123 hello’. I don’t think we want base guessing — does g_ascii_strto{,u}ll() do base guessing?
T 1493721620 18<pwithnall18>	hmm
T 1493721635 18<pwithnall18>	krnowak: I don’t think we do want that. The caller can strip a leading ‘0x’ off if they want easily enough
T 1493721635 18<krnowak18>	pwithnall: g_strtoull guesses the base.
T 1493721642 18<krnowak18>	But only for octal and hexadecimal.
T 1493721644 18<pwithnall18>	eww
T 1493721662 18<krnowak18>	Basically if number is 0555 then it's octal.
T 1493721666 18<ernestask18>	a bit of a vague question: how are widget grabs supposed to work between multiple processes? this is again about portals and modal dialogs
T 1493721668 18<bugbot18>	marciosr10@gmail.com changed the Status on bug 782019 from NEW --- to RESOLVED FIXED.
T 1493721668 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=782019 gio, normal, gtkdev, RESOLVED FIXED, [GIO] Fail unity test on build with debug enabled
T 1493721676 18<pwithnall18>	krnowak: How useful do you think base guessing is?
T 1493721686 18<krnowak18>	If 0x333, hexadecimal. But all that happens only when you pass zero.
T 1493721688 18<ernestask18>	is blocking input on the parent supposed to be handled by the protocol?
T 1493721689 18<pwithnall18>	yup
T 1493721692 18<krnowak18>	Eh, never used that.
T 1493721701 18<mclasen18>	it is not really guessing for 0x or 0 prefixes
T 1493721708 18<mclasen18>	more of a formatting convention
T 1493721708 18<bugbot18>	marciosr10@gmail.com changed the Resolution on bug 782019 from FIXED to NOTABUG.
T 1493721730 18<krnowak18>	I mean, if somebody says it is super useful, we probably could add it, but I wouldn't.
T 1493721733 18<pwithnall18>	krnowak: I’m inclined to not add it, since then GLib is deciding on the convention which the caller should really be deciding
T 1493721743 18<pwithnall18>	We can always disallow `base == 0` for now, and add it later if people want it
T 1493721748 18<pwithnall18>	that would not be an API break
T 1493721773 18<pwithnall18>	mclasen: any other thoughts
T 1493721776 18<pwithnall18>	?
T 1493721787 18<mclasen18>	my mind is empty
T 1493721796 18*	pwithnall hands mclasen some coffee
T 1493721847 18<pwithnall18>	krnowak: thanks for working on this
T 1493721858 18<pwithnall18>	While we’re talking APIs, does anybody have any thoughts about https://bugzilla.gnome.org/show_bug.cgi?id=622721?
T 1493721858 18<krnowak18>	mclasen: https://git.gnome.org/browse/glib/tree/glib/gstrfuncs.c#n1054
T 1493721859 18<bugbot18>	Bug 622721: general, normal, gtkdev, NEW , Reference counted memory areas (and strings)
T 1493721863 18<pwithnall18>	I’m spending an hour on it this morning
T 1493721866 18<krnowak18>	That's what I thought is guessing.
T 1493721881 18<pwithnall18>	I see no rand() calls
T 1493721892 18<pwithnall18>	looks suspiciously deterministic to me ¬_¬
T 1493722050 18<krnowak18>	What rand() calls?
T 1493722057 18<krnowak18>	Eh, I guess it wasn't directed to me.
T 1493722073 18<ebassi18>	pwithnall: My thoughts are: add a refcount_t type, with atomic/non-atomic variants; write refcounted strings on top, with optional de-duplication if the string is smaller than a certain threshold
T 1493722081 18<pwithnall18>	krnowak: Guessing involves making a decision with an element of randomness, right? :)
T 1493722107 18<ebassi18>	pwithnall: I don't care about API that makes a refcount_t go from non-atomic to atomic
T 1493722117 18<pwithnall18>	ebassi: I think I’m sold on the refcount_t type. I’m still trying to work out what the use case is for the non-atomic-to-atomic toggle
T 1493722130 18<ebassi18>	See above :-)
T 1493722140 18<pwithnall18>	If we eliminate the ability for the refcount_t type to do that, the runtime checks disappear, and everything about the refcount type can be inlined
T 1493722144 18<pwithnall18>	fast++
T 1493722147 18<ebassi18>	I agree
T 1493722151 18<tpm18>	what's the rationale again for not always making it atomic? has anyone quantified the real-world perf impact of that?
T 1493722167 18*	pwithnall has not
T 1493722180 18<ebassi18>	tpm: Performance penalty for API that we already know is not going to cross thread boundaries
T 1493722192 18<ebassi18>	We did some testing, years ago
T 1493722197 18<ebassi18>	(less than 5)
T 1493722215 18<ebassi18>	Mostly, memory barriers are ridiculous
T 1493722247 18<ebassi18>	Could have been the g_atomic_* implementation, and maybe switching to C11 semantics will save us all
T 1493722266 18<ebassi18>	But atomic refcounting in GTK+ types is still pretty pointless
T 1493722282 18<pwithnall18>	I’m guessing the non-atomic-to-atomic toggle was introduced because someone thought it would be useful for objects which live in one thread for a bit (during construction), then get shared between threads. I can’t think of a case where that’s common, and where the single-thread stage of the object’s life is not trivially short
T 1493722302 18<krnowak18>	pwithnall: Right, it's not guessing, it's, I don't know, heuristics? 0x333 could be very well a number with 36 base. But anyway.
T 1493722303 18<pwithnall18>	*introduced in the branch
T 1493722304 18<ebassi18>	pwithnall: I honestly don't remember why I wrote that. Maybe some sense of "completeness"
T 1493722314 18<pwithnall18>	♥
T 1493722343 18<ebassi18>	pwithnall: AFAIR, the idea was that you could create stuff on the main thread, but if you passed it to a GTask, you'd get automatic atomic refcounting
T 1493722355 18<ebassi18>	If you didn't, you would not pay the penalty
T 1493722381 18<ebassi18>	It's a pretty artificial use case anyway
T 1493722391 18<ebassi18>	So, as I said, I don't really care about it :-0
T 1493722393 18<ebassi18>	:-)
T 1493722403 18<pwithnall18>	and as soon as you start passing things to other threads, you need to add locking too, so you always need to do *something* to change the struct
T 1493722407 18*	pwithnall axes it
T 1493722430 18<hadess18>	mclasen: best i found is geoclue doing something similar, but it requires the app to register, and that's how it tracks the property requests
T 1493722437 18<ebassi18>	pwithnall++
T 1493722437 18<pwithnall18>	I have one other thought about the refcounting API: locking. If we have a separate atomic refcount_t type, do we want to build in a lock, so you can do g_atomic_ref_and_lock()? I think not, but it was a question raised on the bug.
T 1493722470 18<mclasen18>	hadess: I hate everything geoclue does :-/
T 1493722481 18<pwithnall18>	Reasoning for not adding locking: it ties you into a single granularity of locking, and disallows the pattern where another object returns a struct to you (transfer full), then you lock it at a later point
T 1493722492 18<mclasen18>	its all wrong, starting with the registration
T 1493722500 18<pwithnall18>	Reasing for adding locking: you don’t have to add locking yourself
T 1493722527 18<ebassi18>	pwithnall: I think locking and refcounting are a bit different
T 1493722531 18<pwithnall18>	and the lock implementation could potentially be optimised as a bit flag in the refcount, if someone wanted to write an optimised implementation
T 1493722538 18<pwithnall18>	indeed
T 1493722538 18<tpm18>	pwithnall, I would keep locking separate as well
T 1493722548 18<pwithnall18>	Excellent, I’m not going mad
T 1493722551 18*	pwithnall axes that idea too
T 1493722565 18<ebassi18>	I mean, I would love to have a g_object_lock()/unlock() pair that used a bitlock on the refcount
T 1493722596 18<ebassi18>	But then we'd still need to do a bunch of stuff around the GObject class to ensure that it's properly locked, so I guess this would need major changes anyway
T 1493722600 18<hadess18>	mclasen: it really seems that way indeed
T 1493722629 18<pwithnall18>	ebassi: Is this something which would be worth reserving the MSB in the atomic_refcount_t type for?
T 1493722680 18<ebassi18>	pwithnall: Dunno, but I'd keep some reserved bits at the top regardless, for future expansion
T 1493722704 18<ebassi18>	Maybe just the MSB, indeed
T 1493722718 18<pwithnall18>	Makes sense
T 1493722723 18<pwithnall18>	tpm: any other thoughts about this?
T 1493722754 18<pwithnall18>	tpm: if you’re not already subscribed, it’s https://bugzilla.gnome.org/show_bug.cgi?id=622721, though the branch on there atm does not reflect this discussion
T 1493722755 18<bugbot18>	Bug 622721: general, normal, gtkdev, NEW , Reference counted memory areas (and strings)
T 1493722779 18<tpm18>	95 comments!
T 1493722795 18<pwithnall18>	I wonder if I can get it resolved in fewer than 100
T 1493722798 18<pwithnall18>	hmm
T 1493722836 18<tpm18>	I doubt I have anything to add, I remember reading it once and the only thing that stood out was the atomic/non-atomic refcount thing
T 1493722877 18<pwithnall18>	OK
T 1493722887 18<pwithnall18>	tpm: so you’re happy with separate types for atomic and non-atomic refcounts?
T 1493722917 18<tpm18>	oh, hrm
T 1493722929 18<pwithnall18>	actually, the way it’s going to be implemented, there’s nothing stopping people from using non-atomic refcounting to begin with, then switching to atomic — there’s just no bit flagging that
T 1493722966 18<krnowak18>	pwithnall: Also, parsing "-1" as an unsigned number should fail too instead of being just blindly converted to an unsigned number with all bits set, right?
T 1493722979 18<pwithnall18>	krnowak: I’d say so, yes
T 1493722992 18<tpm18>	I guess, as long as the plan is to default to atomic for everything unless clear that it won't be needed
T 1493723010 18<krnowak18>	Alright.
T 1493723014 18<pwithnall18>	tpm: GLib would just provide the APIs; up to you whether you use the atomic or non-atomic ones
T 1493723028 18<tpm18>	right
T 1493724170 18<pwithnall18>	ebassi: I think I’ve got a reasonable use case for having GRef support being atomic or non-atomic: refcounted strings could be used across threads. Since they’re immutable, they don’t need a separate lock or any other complexity
T 1493724198 18<pwithnall18>	I think I might make GRef take a `gboolean is_atomic` at construction time
T 1493724215 18<pwithnall18>	since it’s pretty likely that GRef is going to be used for non-struct-shaped immutable things (like strings)
T 1493724235 18<pwithnall18>	if you’ve got your own struct, you’re going to put a `guint ref_count` in it manually, rather than using GRef
T 1493724255 18<pwithnall18>	GRef is the one which allocates its bookkeeping data before the ‘allocated’ pointer which it returns to the caller
T 1493724277 18<tpm18>	pwithnall, if you want to go one step further you could add concepts of mutability and making something writable and such, but I suspect there's no appetite for that here :)
T 1493724279 18<baedert18>	ebassi: mclasen: the new gtk blog post could use some publicity imo, didn't even know it existed :)
T 1493724296 18<pwithnall18>	tpm: mutable refcounted strings?
T 1493724305 18<ebassi[m]18>	baedert: Me neither :-)
T 1493724309 18<mclasen18>	baedert: the one about settings ?
T 1493724312 18<tpm18>	pwithnall, mutability would depend on refcount then ;)
T 1493724324 18<baedert18>	mclasen: yes
T 1493724339 18<ebassi[m]18>	pwithnall: That would not be the point for which I wrote GRef originall, to be quite honest
T 1493724347 18<pwithnall18>	tpm: not sure what you mean
T 1493724351 18<pwithnall18>	ebassi[m]: oh?
T 1493724357 18<ebassi[m]18>	pwithnall: I wanted to replace most of the hand-written refcounting code with a proper API
T 1493724365 18<ebassi[m]18>	Especially in struct-like things
T 1493724402 18<pwithnall18>	ebassi[m]: right, but that’s what g_ref_counter_*() is for, right?
T 1493724419 18<bugbot18>	New glib bug 782057 filed by tirifto@posteo.cz.
T 1493724419 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=782057 build, normal, gtkdev, NEW , Build fails
T 1493724450 18<pwithnall18>	ebassi[m]: Unless you’re wanting to eliminate the per-struct ref/unref methods by using g_ref_[acquire|release]() everywhere?
T 1493724488 18<pwithnall18>	I could always put the `gboolean is_atomic` in the constructor for GRefString
T 1493724574 18<pwithnall18>	It seems a bit odd (to me) to use GRef for structs though, since it keeps more metadata around than is necessary for a struct — it stores the alloc_size and a notify_func for the struct, both of which are things known at compile time for the struct
T 1493724638 18<pwithnall18>	We could use g_ref_counter_[acquire|release]() generically on structs if the struct author has put the `guint ref_count` as the first field, but that’s a bit icky
T 1493724821 18<lapo18>	ebassi[m]: wassup to my assets rendering script?
T 1493724824 18<baedert18>	https://paste.xinu.at/lHp5P/ Does anyone know why this in configure.ac would create a file called "=" when running make distcheck which is not cleaned up in make distclean?
T 1493724834 18<lapo18>	ebassi[m]: why did you remove that?
T 1493724841 18<ebassi[m]18>	lapo: ?
T 1493724844 18<ebassi[m]18>	Did I?
T 1493724855 18<lapo18>	https://git.gnome.org/browse/gtk+/commit/gtk/theme/Adwaita/render-assets.sh?id=f6cbd076dd5a7a76133d9b5166643b71dc68f98e
T 1493724916 18<ebassi18>	That's weird; sorry about that, completely unintended.
T 1493724966 18<lapo18>	no probs, just wondering why it wasn't there
T 1493725073 18<ebassi18>	It's back
T 1493725117 18<lapo18>	thanks
T 1493725452 18<mclasen18>	baedert: done
T 1493726179 18<Leitwert18>	Hello, is it possible to use the home directory directly at path parameter of glib functions (e.g. g_key_file_load_from_file([...], "~/.testdir/testfile", [...])), I keep getting "No such file or directory", is there a need to somehow escape the "~" character, or do i need to use "g_get_home_dir" if I want to use the homedirectory?
T 1493726545 18<garnacho18>	Leitwert: glib does no shell-style expansion in the functions accepting filepaths, you either do it yourself or get such path through g_file_new_for_commandline_arg* functions
T 1493726896 18<Leitwert18>	garnacho: Ok, Thanks a lot.
T 1493727675 18<henning18>	hi. whats the domain for the GError code member?
T 1493727707 18<henning18>	by definition it's an gint. but can i loop up which values it actually take?
T 1493727928 18<ebassi18>	henning: Not programmatically
T 1493728108 18<Subsentient18>	Is there a way to set the theme via API, not gtkrc for gtk2?
T 1493728121 18<Subsentient18>	Maybe even loading a custom gtkrc from a memory buffer?
T 1493728589 18<ebassi[m]18>	Subsentient: `g_object_set (gtk_widget_get_settings (), "gtk-theme-name", "YourThemeName", NULL);`
T 1493728604 18<Subsentient18>	ebassi[m]: Thank you!
T 1493728608 18<ebassi[m]18>	Subsentient: Assuming `YourThemeName` is installed in one of the known search paths
T 1493728629 18<Subsentient18>	ebassi[m]: I'm trying to get native decorations for a GTK app on Win32 with it statically linked.
T 1493728654 18<ebassi[m]18>	Statically linking GTK+ (whatever version) is not tested, nor recommended
T 1493728675 18<ebassi[m]18>	Also, "statically linking" does not imply "files are embedded into the binary".
T 1493728704 18<ebassi[m]18>	Also because GTK+ and its dependencies may have shared modules loaded at run time, and will look at files in various locations
T 1493728739 18<ebassi[m]18>	Personally, I think statically linking stuff is a waste of time, unless you're writing `cat`.
T 1493728787 18<ebassi[m]18>	Just ship a zip file with all the dependencies, the theme, and the image assets
T 1493728802 18<ebassi[m]18>	And install them into the same prefix
T 1493728808 18<Subsentient18>	ebassi[m]: The problem is that I'd want it to be a standalone binary.
T 1493728822 18<ebassi[m]18>	Make it a self-extracting zip file, then
T 1493728835 18<Subsentient18>	Eww lol
T 1493728849 18<ebassi[m]18>	I don't see what's the problem or the "ew" about it
T 1493728855 18<ebassi[m]18>	That's how apps on Windows work
T 1493728938 18<Subsentient18>	It's alright, but thank you. I guess I'll have to. Was hoping to avoid that lol
T 1493729688 18<krnowak18>	pwithnall: https://paste.fedoraproject.org/paste/~1vJ7FYltvc0qNRoPtNFVl5M1UNdIGYhyRLivL9gydE=
T 1493730030 18<pwithnall18>	krnowak: ack, if you also add ‘ (inclusive)’ after the big number, and add ‘Reviewed-by: Philip Withnall <philip@tecnocode.co.uk>’ to your commit message (so people know it was reviewed, since it’s not on Bugzilla)
T 1493730052 18<krnowak18>	Alright.
T 1493730857 18<csoriano18>	baedert: templates are not supported in D right?
T 1493730961 18<baedert18>	csoriano: I've never tried tbh but I don't see why they wouldn't be?
T 1493730979 18<csoriano18>	baedert: hm can we override init?
T 1493730993 18<csoriano18>	the template call has to be done thre
T 1493731093 18<baedert18>	csoriano: definitely not impossible since you can just implement the get_type yourself
T 1493731112 18<baedert18>	csoriano: but I'm not sure atm if the GObject mixin can override init
T 1493731130 18<csoriano18>	baedert: right, let me check that then
T 1493731529 18<baedert18>	csoriano: I can't find how to do that from https://github.com/gtkd-developers/GtkD/commit/09f0db4959c1220b3ed58f7b757e0bc6665de08c but worst case is the customInit from https://github.com/baedert/gtkd-utils/blob/master/src/avatarwidget.d
T 1493731914 18<mclasen18>	garnacho: how the window slaying going ?
T 1493732007 18<bugbot18>	New glib bug 782068 filed by sadiq@sadiqpk.org.
T 1493732007 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=782068 docs, normal, gtkdev, NEW , doc: Trivial typo fixes
T 1493732341 18<Zero_Dogg18>	Is there aby way
T 1493732365 18<Zero_Dogg18>	Err, I should probably finish my sentence before hitting enter
T 1493732409 18<Zero_Dogg18>	Is there any way to auto convert an api ui definition to gtkbuilder? Ie. some way to dump from gtkinspector?
T 1493732442 18<baedert18>	not yet
T 1493732479 18<Zero_Dogg18>	Okay, manual writing it is then
T 1493732696 18<lapo18>	baedert: the menu positioning issue on wayland is on the radards, right?
T 1493732707 18<lapo18>	drop-down menu
T 1493732739 18<baedert18>	lapo: I know about it but that's not really my territory
T 1493732779 18<lapo18>	baedert: who should I whine to?
T 1493732791 18<baedert18>	my  current favorite bug under wayland is (just learnt about it today!): open a popover, now resize the window on the left edge
T 1493732829 18<baedert18>	lapo: garnacho? :)
T 1493732831 18<mclasen18>	nothing bad happens here
T 1493732845 18<lapo18>	same
T 1493732866 18<garnacho18>	mclasen: GtkMenu isn't getting along as quickly as I expected, seems about the hardest of the items left by a big margin though
T 1493732876 18<baedert18>	tsk
T 1493732893 18<lapo18>	ahhh left edge, wait
T 1493732904 18<lapo18>	oh cool
T 1493732914 18<mclasen18>	ah, menus :-(
T 1493732916 18<lapo18>	that's kind of cugte
T 1493732919 18<lapo18>	cute
T 1493732925 18<baedert18>	see
T 1493732949 18*	mclasen pulls the right edge, then the left edge - all fine
T 1493732984 18<baedert18>	also disappears when not using the gl renderer
T 1493732984 18<mclasen18>	but then, I'm using gtk3, so maybe you are trying to say gtk4 is broken ?
T 1493732993 18<baedert18>	of course
T 1493733002 18<mclasen18>	in which case your wayland issue would be more of a gtk4 issue, no ?
T 1493733018 18<garnacho18>	baedert, lapo: I'll deflect it to jadahl :p
T 1493733028 18<garnacho18>	mclasen: I already fear the "garnacho touched it last" bugs that will come :)
T 1493733039 18<lapo18>	mclasen: https://www.dropbox.com/s/9wnlvzk81k1hjec/look.webm?dl=0
T 1493733040 18<baedert18>	I'm not saying the wayland protocol is fundamentally broken because the menus are off by 5 pixels.
T 1493733147 18<lapo18>	apart those 5 pixels, the comboboxentry button fronze if you just open and close w/o hovering a menu row different than the first one (which makes the menu jump in the correct place)
T 1493733210 18<baedert18>	yeah that's a stuck grab, also known
T 1493733216 18<baedert18>	fix it by resizing the window NOW!
T 1493733235 18<lapo18>	that's handy for the inspector, thanks
T 1493735864 18<andlabs18>	is JSDOMWindow.cpp supposed to take several hours to build
T 1493735900 18<baedert18>	that filename sounds like yes
T 1493735930 18<andlabs18>	I'm surprised that the build seems to have stalled then
T 1493735940 18<andlabs18>	and I thought jhbuild built everything with at least some parallelization
T 1493735980 18<andlabs18>	well ninja was still running at least
T 1493735987 18<andlabs18>	let's see how long it takes now that I woke it bakc up
T 1493736007 18<andlabs18>	or not because now jhbuild isn't showing its menu
T 1493736012 18<andlabs18>	VMs swapping™
T 1493736024 18<andlabs18>	(trying to build devhelp)
T 1493736051 18<andlabs18>	...
T 1493736058 18<andlabs18>	what was the point of building devhelp
T 1493736066 18<andlabs18>	none of the documentation got built :|
T 1493736069 18<andlabs18>	time to restart everything I guess
T 1493736076 18<andlabs18>	and figure out how to get jhbuild to include docs
T 1493736439 18<baedert18>	lapo: Did you see I CCed you in https://bugzilla.gnome.org/show_bug.cgi?id=779570 ?
T 1493736440 18<bugbot18>	Bug 779570: Widget: GtkPopover, normal, gtk-bugs, NEW , popover: Add more padding between checkbox and label
T 1493736455 18<baedert18>	lapo: I was thinking adding some margin in css to the indicator is the simplest solution
T 1493737191 18<lapo18>	baedert: there were a pair of assumptions regarding checkboxes and spacing which got fumbled there I guess
T 1493737197 18<lapo18>	there *are*
T 1493737221 18<lapo18>	baedert: as you can see the margin in that case is on the right
T 1493737234 18*	lapo looks
T 1493737257 18<baedert18>	I guess another problem with popover menus is that the indicator space is only reserved for rows that have one
T 1493737325 18<mclasen18>	that is a design choice, not a problem
T 1493737438 18<bugbot18>	New glib bug 782075 filed by bugzilla@tecnocode.co.uk.
T 1493737438 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=782075 general, normal, gtkdev, NEW , gtimer: Handle gmtime() failure in g_time_val_to_iso8601()
T 1493737440 18<lapo18>	baedert: there's a 4 px spacing normally around a non "only-child" check, which looks pretty ok to me
T 1493737448 18<lapo18>	baedert: the issue there is that the check should be right alligned
T 1493737496 18<lapo18>	baedert: hence app territory not theme, I don't think I can find a general solution in adwaita for such an issue
T 1493737707 18<ipun18>	Hi im having some trouble with removing this error: "gtk_box_gadget_distribute: assertion 'size >= 0' failed in GtkScrollbar" It seems from my code that this is happening as the scrollbar is not sized correctly. This warning pops up everytime i type a character inside a ScrolledWindow > textView if i shrink it tiny. This only seems to happen with the veritical scrollbar 
T 1493737716 18<lapo18>	baedert: commented on the bug
T 1493737750 18<lapo18>	baedert: the RightTM solution is right aligning, not increasing the margin in that particular case
T 1493737813 18<pwithnall18>	ebassi, mclasen: new API discussions, round 2: https://bugzilla.gnome.org/show_bug.cgi?id=698064
T 1493737814 18<bugbot18>	Bug 698064: general, enhancement, gtkdev, NEW , Add g_ptr_array_contains()
T 1493737832 18<pwithnall18>	The patch in the final comment is all you need to look at, really
T 1493737843 18<pwithnall18>	I’m hoping for an ‘ack, yes, go away please’ and then I’ll shove off
T 1493737874 18<pwithnall18>	(I discussed this with desrt at the GTK+ hackfest and have addressed her concerns in the latest patch, I think)
T 1493737899 18<lapo18>	baedert: no idea about how achieve that clearly though :-)
T 1493737970 18*	mclasen will stay out of this one
T 1493738008 18<mclasen18>	if desrt is ok with it, lets get it in. I'm grumpy and old, it is hard to get me to say yay to trivial convenience api
T 1493738039 18<pwithnall18>	OK, I’ll give ebassi a few minutes to voice his discontent, then push it
T 1493738048 18<pwithnall18>	I think this one’s useful
T 1493738054 18<pwithnall18>	I’m tired of writing array loops
T 1493738072 18*	pwithnall continues to work on a g_do_what_I_am_thinking() convenience API
T 1493738135 18<ebassi18>	pwithnall: Commented
T 1493738157 18<ebassi18>	+1 from me, in general
T 1493738197 18*	pwithnall pockets ebassi’s ‘general +1’ for future use
T 1493738205 18<ebassi18>	While at it, who wants to look at the wip/meson branch of gtk+?
T 1493738216 18<garnacho18>	pwithnall: add g_clear_source() before drilling skulls, please :p
T 1493738219 18<ebassi18>	It would be nice to get that in
T 1493738231 18<ebassi18>	130 commits are getting messy
T 1493738242 18<pwithnall18>	garnacho: is there a bug for this?
T 1493738262 18<garnacho18>	pwithnall: true, not that I know of
T 1493738297 18<pwithnall18>	garnacho: are you thinking of g_clear_source() as in g_clear_pointer(source, g_source_destroy)?
T 1493738336 18<garnacho18>	pwithnall: rather to remove the bunch of if (foo_id) { g_source_remove(foo_id); foo_id = 0 }
T 1493738346 18<bugbot18>	New gtk+ bug 782077 filed by gnome@genodeftest.de.
T 1493738346 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=782077 Class: GtkStyleContext, normal, gtk-bugs, NEW , CSS Parser is unable to parse font family names containing numbers
T 1493738352 18<pwithnall18>	aah
T 1493738392 18<pwithnall18>	garnacho: how about a g_clear_handle(), which you would use like g_clear_handle(&foo_id, g_source_remove)?
T 1493738400 18<pwithnall18>	The same could be done for FDs: g_clear_handle(&fd, close)
T 1493738417 18<pwithnall18>	hmm
T 1493738427 18<pwithnall18>	they would need to be reset to different values; that would have to be a third parameter
T 1493738447 18<garnacho18>	uhm, true
T 1493738457 18<pwithnall18>	I think I’d prefer that to something specific to GSource
T 1493738458 18<garnacho18>	still sounds one-liner enough, and versatile
T 1493738473 18<pwithnall18>	since the concept of integer IDs (with 0 or <0 being invalid) is pretty pervasive
T 1493738475 18<baedert18>	lapo: "check should be right aligned"? Where else is it aligned?
T 1493738485 18<ebassi18>	pwithnall: GSource ids are uints
T 1493738512 18<lapo18>	baedert: to the left?
T 1493738526 18<lapo18>	baedert: as it is in the screenshot on the bug
T 1493738527 18<ebassi18>	g_clear_handle(guint *id) ← that would not work with an fd
T 1493738554 18<smcv18>	pwithnall: as well as signedness, how long is a handle? int or long? (it matters)
T 1493738572 18<pwithnall18>	hum
T 1493738581 18<pwithnall18>	A macro would do the trick
T 1493738584 18<pwithnall18>	but ewww
T 1493738585 18<smcv18>	I don't think it can be done generically via a macro unless you use typeof, which aiui is a gccism
T 1493738592 18<ebassi18>	Other fun: GSignal handlers are gulong instead :-)
T 1493738595 18<ebassi18>	smcv: C11 generics
T 1493738596 18<baedert18>	lapo: you mean as opposed to non-popover check buttons which have the check mark on the left?
T 1493738601 18<smcv18>	or intmax_t, which is an all-standard-compilers-but-not-MSVCism
T 1493738615 18<smcv18>	like all the other nice things we can't have
T 1493738629 18<smcv18>	(that's a guess but I suspect it's right)
T 1493738630 18*	ebassi was looking at an excuse for requiring C11 in GLib :-P
T 1493738647 18<lapo18>	baedert: I mean as opposed to nothing, that check should be right aligned instead of left aligned as it is
T 1493738675 18<lapo18>	baedert: in that particular case with a popover with the check on the right the allignment should be that
T 1493738682 18<baedert18>	lapo: sorry but I see a check mark on the right side of the modelbutton in that popover screenshot here
T 1493738701 18<lapo18>	baedert: it's on the right side, but it's not right aligned
T 1493738733 18<pwithnall18>	#define g_clear_handle(handle_ptr, clear_func, invalid_value) G_STMT_BEGIN { if (*handle_ptr != invalid_value) { clear_func (*handle_ptr); *handle_ptr = invalid_value; } } G_STMT_END
T 1493738752 18<pwithnall18>	smcv, ebassi: that --^ should work, right?
T 1493738772 18<ebassi18>	Yeah, but yuck
T 1493738775 18<lapo18>	baedert: and I should reset the right margin in that case I guess
T 1493738778 18<pwithnall18>	indeed
T 1493738805 18<pwithnall18>	ebassi: the alternative I can think of is a function which takes a gint64 for all handles, and a macro wrapper around it which does the widening cast
T 1493738815 18<tpm18>	ebassi, what's left? anything specific to look at? (meson branch)
T 1493738819 18<pwithnall18>	Should work because I don’t think we have any guint64 handles, but also ewww
T 1493738834 18*	pwithnall would have to check whether gulong would mess that up
T 1493738854 18<mclasen18>	ebassi: I'll take another look at wip/meson
T 1493738855 18<smcv18>	pwithnall: oh, I was expecting the Py_CLEAR() trick
T 1493738856 18<ebassi18>	tpm: The introspection issue was fixed; the gtk-doc bug in meson is still open, I think; the last bit was the installed tests and the test suite in general
T 1493738866 18<pwithnall18>	smcv: please enlighten me
T 1493738893 18<ebassi18>	tpm: Then, of course, there's to test on Windows and macOS
T 1493738900 18<smcv18>	pwithnall: essentially destructor (g_steal_pointer (&thing)) but for the appropriate type rather than pointer
T 1493738905 18*	ebassi could try out building GTK+ on his Windows 10 machine
T 1493738923 18<tpm18>	ebassi, yeah, but I think we should merge and then improve iteratively, it's going to be a process :)
T 1493738929 18<tpm18>	it doesn't break anyone's use case
T 1493738931 18<ebassi18>	tpm: Yes, I agree
T 1493738945 18<ebassi18>	As I said, 130 commits branch gets really messy
T 1493738945 18<tpm18>	as long as it builds the main bits it should be ok, no?
T 1493738949 18<tpm18>	I don't know if the gtk-doc thing is a blocker
T 1493738957 18<baedert18>	lapo: the code looks like it can't be any more on the right
T 1493738958 18<smcv18>	pwithnall: (copy to temporary, clear *pointer, *then* call the destructor, in case the destructor has side effects that end up looking back at the thing being cleared)
T 1493738983 18<ebassi18>	tpm: Not until we figure out how to do releases from Meson
T 1493739031 18<lapo18>	baedert: look the popover in nautilus
T 1493739036 18<lapo18>	at^
T 1493739037 18<pwithnall18>	smcv: aah, yes. I guess that would strictly be necessary, although given the clear_func() in this case will typically be a GLib function like g_source_remove(), we might be able to get away without it
T 1493739038 18<smcv18>	relatedly, all these opaque integer handles are quite annoying, particularly when I can never remember how large they are
T 1493739057 18<smcv18>	C has a type for "opaque handle to a thing" and it's a pointer :-P
T 1493739065 18<lapo18>	baedert: I don't have that version of devhelp, but I guess all the parent container should sport allign_fill
T 1493739076 18<baedert18>	lapo: the popover in nautilus is as custom as it can get afaik
T 1493739093 18<pwithnall18>	smcv: well, no way to change that now
T 1493739095 18<smcv18>	(not necessarily a pointer that user code is allowed to dereference of course)
T 1493739121 18<lapo18>	baedert: no idea about the internal, but adding more spacing via a margin is like aligning things in a word processor with spaces
T 1493739126 18<lapo18>	internals
T 1493739129 18<smcv18>	this is one of the things windows gets right, HANDLE is pointer-sized
T 1493739133 18<baedert18>	lapo: https://paste.xinu.at/IJZ/ is not right aligned?
T 1493739146 18<lapo18>	baedert: that one is
T 1493739156 18<smcv18>	(and I think actually a pointer, but SOCKET is a uintptr_t or something)
T 1493739172 18<lapo18>	baedert: and there are 4 superfluos pixels on the right, which are my fault
T 1493739211 18<tpm18>	ebassi, feel free to squash any and all of my commits if it makes anything easier :)
T 1493739255 18<lapo18>	baedert: which version of devhelp is that one? I don't have that entry on 3.24
T 1493739268 18<ebassi[m]18>	I'd probably squash the whole branch, to be quite honest
T 1493739302 18<baedert18>	lapo: 3.24 :)
T 1493739307 18<lapo18>	uhmph
T 1493739374 18<baedert18>	jadahl: https://paste.xinu.at/2jmnF5/ Completely untested since it's so hard to test, but just setting the user_data to NULL without destroying it seems wrong
T 1493739380 18<lapo18>	I wonder why my version is different
T 1493739435 18<lapo18>	baedert: if that's right aligned, I can special case the popover spacing
T 1493739449 18<lapo18>	baedert: I guess I have a class on the node, right?
T 1493739478 18<lapo18>	baedert: should sport the right class, right?
T 1493739487 18<lapo18>	I mean "right" :-)
T 1493739498 18<baedert18>	looks like yes
T 1493739504 18<lapo18>	ok, lemme see
T 1493739529 18<lapo18>	assumption needed, yay!
T 1493739839 18<lapo18>	baedert: while devhelp builds can you try this one: https://da.gd/uMUqb
T 1493739848 18<lapo18>	?
T 1493739953 18<lapo18>	16px is probably a bit too much, if it is, you can try 8 and 12
T 1493740057 18<baedert18>	TIL that I have sassc installed
T 1493740196 18<baedert18>	lapo: https://paste.xinu.at/i5GSaX/
T 1493740237 18*	lapo tries 12
T 1493740647 18<bugbot18>	bugzilla@tecnocode.co.uk changed the Status on bug 698064 from NEW --- to RESOLVED FIXED.
T 1493740647 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=698064 general, enhancement, gtkdev, RESOLVED FIXED, Add g_ptr_array_contains()
T 1493740859 18<andlabs18>	  DOC   Building HTML
T 1493740859 18<andlabs18>	warning: failed to load external entity ""/home/pietro/jhbuild/checkout/gtk+/docs/reference/gtk:/home/pietro/jhbuild/checkout/gtk+/examples""
T 1493740860 18<andlabs18>	cannot parse "/home/pietro/jhbuild/checkout/gtk+/docs/reference/gtk:/home/pietro/jhbuild/checkout/gtk+/examples"
T 1493740860 18<andlabs18>	uhh
T 1493740862 18<andlabs18>	is this correct
T 1493740865 18<andlabs18>	that : seems out of place
T 1493740962 18<alex18>	How can gtklabel.c be 200k of ascii text
T 1493741031 18<andlabs18>	being really really old
T 1493741057 18<baedert18>	it's C, it's GObject and it links and shit?
T 1493741079 18<alex18>	labels are more complex than most people imagine
T 1493741085 18<alex18>	still, its pretty amazeballs
T 1493741121 18<ebassi[m]18>	It has a lot of documentation
T 1493741136 18<ebassi[m]18>	Lots of properties
T 1493741151 18<andlabs18>	the code to handle selectability is also quite big
T 1493741162 18<andlabs18>	also I think there's boilerplate to convert between GTK+ enums and Pango enums?
T 1493741173 18<andlabs18>	in the case of GTK+'s being first
T 1493741179 18<andlabs18>	I'm just skimming
T 1493741183 18<andlabs18>	still wondering what I should do about that gtkdoc failure
T 1493741335 18<andlabs18>	gtktreeview.c has 59 more lines than gtkwidget.c if that's your thing
T 1493741353 18<andlabs18>	and 100000 more characters
T 1493741389 18<baedert18>	I bet gtktreeview.c lost a few and gtkwidget.c gained a few in wip/carlosg/event-delivery
T 1493741412 18<andlabs18>	what does that branch do
T 1493741432 18<baedert18>	removes input-only gdkwindows
T 1493741450 18<andlabs18>	what were they used for within GTK+ itself
T 1493741460 18<baedert18>	...input
T 1493741462 18<baedert18>	:)
T 1493741501 18<andlabs18>	the keywords are "within GTK+ itself"
T 1493741509 18<andlabs18>	what things in GTK+ used input-only windows
T 1493741515 18<andlabs18>	GtkEventBox?
T 1493741550 18<baedert18>	everything doing input
T 1493741553 18<baedert18>	buttons, switches, etc
T 1493741583 18<andlabs18>	huh.
T 1493741597 18<andlabs18>	oh right I had my history backwards
T 1493741618 18<andlabs18>	this iswhat happens when you don't do major GTK+ work for a few months
T 1493741624 18<andlabs18>	(I have been doing a lot of pango though)
T 1493741650 18<andlabs18>	so how do I fix this gtk-doc thing
T 1493741845 18<baedert18>	--disable-gtk-doc?
T 1493741847 18<baedert18>	:/
T 1493741868 18<andlabs18>	I would like to have the docs =P
T 1493742104 18<Zero_Dogg18>	How does things like gtk_button_new_from_icon_name map to gtkbuilder?
T 1493742124 18<TingPing18>	Zero_Dogg, GtkButton object with icon-name property
T 1493742132 18<Zero_Dogg18>	TingPing: thanks
T 1493742132 18<baedert18>	nah that's gtk4
T 1493742137 18<TingPing18>	Zero_Dogg, er actually, with an GtkIcon child with icon-name
T 1493742142 18<baedert18>	*GtkImage
T 1493742147 18<TingPing18>	yea that one
T 1493742151 18<Zero_Dogg18>	oh
T 1493742239 18<Zero_Dogg18>	(gtk-builder-tool:4885): Gtk-WARNING **: Attempting to add a widget with type GtkImage to a GtkButton, but as a GtkBin subclass a GtkButton can only contain one widget at a time; it already contains a widget of type GtkLabel
T 1493742265 18<baedert18>	you set the "label" property *and* added a GtkImage child
T 1493742319 18<Zero_Dogg18>	I did, as the button needs both (and had when I built it with gtk_button_new_from_icon_name), can a GtkImage have a label child?
T 1493742330 18<TingPing18>	youll want to make a GtkBox for the child with them in it
T 1493742332 18<Zero_Dogg18>	Or will I need to wrap it in a hbox?
T 1493742334 18<Zero_Dogg18>	nod
T 1493742381 18<Zero_Dogg18>	would be nice if it could infer that the object should be constructed with gtk_button_new_from_icon_name
T 1493742567 18<bugbot18>	New glib bug 782080 filed by jbicha@ubuntu.com.
T 1493742568 18<bugbot18>	Bug https://bugzilla.gnome.org/show_bug.cgi?id=782080 general, normal, gtkdev, NEW , Port to pcre2
T 1493742577 18<TingPing18>	Zero_Dogg, it pretty directly just exposes the gobject stuff, so alternate constructors aren't really relevant
T 1493742646 18<Zero_Dogg18>	TingPing: nod, it does make these kind of things a bit fiddly though. Ie. I see that my new button with two children has different spacing from one created with gtk_button_new_from_icon_name
T 1493742714 18<TingPing18>	Zero_Dogg, thats probably jsut an oddity of the label handling
T 1493742736 18<TingPing18>	a design pattern that gtk has sort of moved past
T 1493742816 18<Zero_Dogg18>	nod, the spacing property for the constructor button has spacing=2, while my manual one defaults to spacing=0. It doubles the space between the icon and label on my screen (2px vs 4px)
