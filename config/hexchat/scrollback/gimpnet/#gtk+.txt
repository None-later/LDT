T 1502571580 18<Company18>	are there any APIs apart from GScanner I could use?
T 1502571834 18<TingPing18>	don't believe so
T 1502572279 18<Company18>	I don't like bison and flex because I don't understand what they do and they generate C code that looks like it's older than Xfree
T 1502573623 18<freemangordon18>	anyone who can help:
T 1502573626 18<freemangordon18>	(18,43,17) freemangordon: Hi there, I Think I found a bug in a piece of SW I am dealing with, but I need confirmation from a more knowledgeable one, as glib is not what I am best in. the code in question is: https://pastebin.com/kD5urRzy. both signals have signatures (V:S:S for "decode" and V:S for "error-decode") that differ to the marshallers passed to g_signal_new. Is that ok?
T 1502573641 18<freemangordon18>	if this is not the right channel, please point me to the correct one
T 1502574118 18<hergertme18>	freemangordon, the marshaler is wrong for both
T 1502574141 18<hergertme18>	freemangordon, the first one will expect 3 string params where there is only 2
T 1502574150 18<hergertme18>	and the second will expect 3 string params where there are only 1
T 1502574172 18<hergertme18>	the easiest fix is to just replace those marshalers with NULL, and let the default libffi based marshaler generate the right thing
T 1502574228 18<hergertme18>	you may also want to use G_TYPE_STRING|G_SIGNAL_TYPE_STATIC_SCOPE if the strings cannot be mutated by the callees for a bit of a speed boost (avoiding a strdup())
T 1502574409 18<freemangordon18>	hergertme: thanks, I just wanted a confirmation that in both cases marshallers are wrong, and my understanding that nsv_marshal_VOID__STRING_STRING for the first signal and g_cclosure_marshal_VOID__STRING for the second are the corect ones.
T 1502574480 18<freemangordon18>	those are correct right?
T 1502574554 18<hergertme18>	i would expect so
T 1502574568 18<freemangordon18>	ok, thanks a lot
T 1502574630 18<hergertme18>	np
T 1502576069 18<gnunn18>	I'm trying to use a SizeGroup to keep two Paned on sync, when the window is first shown the sizes match however resizing one Paned doesn't resize the other. Should it?
T 1502576467 18<hergertme18>	gnunn, sizegroup should only keep their size-requests in sync, not the actual size-allocation
T 1502576493 18<hergertme18>	(it will be based on the position child-property likely)
T 1502576519 18<gnunn18>	hergertme: OK, so I guess I have to do it manually?
T 1502576531 18<hergertme18>	in DzlMultiPaned, i made it so that it uses natural-sizes/expand/etc until the paned has been moved by the user, at which point it uses that drag position
T 1502576550 18<hergertme18>	you can try, but im pretty sure it's going to be glitchy ...
T 1502576626 18<hergertme18>	(it's also going to be re-entrant so you'll have to be careful, because changing position will queue another resize)
T 1502576627 18<gnunn18>	I'm essentially trying to replicate what gedit does with the sidebar. They use a SizeGroup but I guess they must be doing something else as well, I'll look at the code
T 1502576685 18<hergertme18>	oh i think i see what you mean now
T 1502576695 18<hergertme18>	yeah moving the paned handle won't cause the window to grow
T 1502577051 18<gnunn18>	OK thanks, I'll dig some more
T 1502578367 18<gnunn18>	OK figured it out, gedit is binding the position property of the two Paned widgets
T 1502578865 18<mclasen18>	baedert: my emoji rendering issue turned out to be unrelated to rendering 
T 1502610393 18<baedert18>	mclasen: Now that I can look at the emoji chooser, what idles were you talking about?
T 1502614603 18<cfoch18>	hi
T 1502614683 18<cfoch18>	di yiu have an example about how to register an interface without using the C macros?
T 1502618801 18<heftig18>	ebassi: https://bugzilla.gnome.org/show_bug.cgi?id=786232
T 1502618891 18<ebassi18>	heftig: I don't even have that library installed on my fedora :-/
T 1502618903 18<ebassi18>	heftig: I'm not wholly positive that we should expose the xlib_* API
T 1502618922 18<heftig18>	yeah, i didn't notice anything either until someone complained icewm and xscreensaver are broken
T 1502618934 18<heftig18>	ebassi: icewm uses it
T 1502618943 18<heftig18>	it's also documented.
T 1502618972 18<ebassi18>	heftig: Yeah, it's a public header; the namespace violation is utterly gross
T 1502619000 18<ebassi18>	heftig: We could modify the meson.build and add a map file, but using _GDK_PIXBUF_EXTERN works just as well
T 1502619033 18<baedert18>	Company: Have you thought about how to fix queue_resize inside size-allocate properly?
T 1502619126 18<heftig18>	ebassi: if you review/commit please also look at https://bugzilla.gnome.org/show_bug.cgi?id=785964
T 1502619369 18<ebassi18>	heftig: Done; thanks!
T 1502619483 18<heftig18>	thanks
T 1502619561 18<heftig18>	ebassi: ftr i don't have push rights, so i can't "add a comment before pushing to master"
T 1502619582 18<ebassi18>	Okay, I'll do that then
T 1502619608 18<ebassi18>	But consider this as a gentle nudge into getting the push bit on gnome.org ;-)
T 1502619953 18<Company18>	baedert: i think there is no "proper" fix
T 1502620083 18<Company18>	baedert: in theory nobody should be calling any APIs that queue_resize()
T 1502620238 18<nacho18>	LRN, hey
T 1502620240 18<nacho18>	LRN, anything to review?
T 1502620250 18<LRN18>	not yet
T 1502620258 18<LRN18>	i'm working on a patch for OLE2 DND
T 1502620271 18<nacho18>	ok
T 1502620396 18<nacho18>	pwithnall, hey, around?
T 1502620409 18<baedert18>	Company: So I've had this patch that kept a per-GtkWindow list of "widget marked to be resized" around and gtk_widget_queue_resize/allocate just added to the resize/allocate list; then in the idle sizer it called the old gtk_widget_queue_resize/allocate on all those widgets, then cleared the lists.
T 1502620426 18<baedert18>	Company: Yes but it's being done *everywhere*, including inside gtk+.
T 1502620428 18<ebassi18>	nacho: Yo; I assume you noticed that gdk-pixbuf has now been meson-ified
T 1502620433 18<ebassi18>	nacho: Testing is very much welcome
T 1502620449 18<nacho18>	ebassi, I saw you wrote a post about it, that is great news
T 1502620479 18<nacho18>	ebassi, I'll try to port gvsbuild to it
T 1502620486 18<ebassi18>	Cool, thanks!
T 1502620546 18<nacho18>	ebassi, so you added a with_gir option?
T 1502620556 18<EmmanueleBassi18>	Yes
T 1502620563 18<nacho18>	is that the new standard name to disable introspection?
T 1502620576 18<nacho18>	I thought other modules used with_introspection or so
T 1502620582 18<EmmanueleBassi18>	We don't have a standard; still waiting for Meson to allow defining options from modules
T 1502620599 18<EmmanueleBassi18>	But, next cycle, we're going to try and have some common behaviour among projects using Meson
T 1502620622 18<EmmanueleBassi18>	And I still hope to have gobject-introspection using Meson as well, so you don't have to disable it everywhere ;-)
T 1502620638 18<nacho18>	EmmanueleBassi, let me know to change libgxps
T 1502620652 18<nacho18>	EmmanueleBassi, btw I am having this strange issue with libgxps and meson
T 1502620662 18<nacho18>	ninja: error: remove(test): Directory not empty
T 1502620691 18<nacho18>	https://git.gnome.org/browse/libgxps/tree/test/meson.build <- do I need to specify anything to remove the directory?
T 1502620699 18<EmmanueleBassi18>	Leaving behind generated files?
T 1502620736 18<nacho18>	on the test dir I see a directory called test-gxps@exe
T 1502620743 18<nacho18>	but that dir is empty...
T 1502620755 18<nacho18>	this is when running ninja clean btw
T 1502620773 18<nacho18>	pwithnall reported that this is a problem for the continues integration he has
T 1502620781 18<ebassi18>	nacho: That meson.build file looks simple enough; may be worth asking on #mesonbuild
T 1502620789 18<nacho18>	ok
T 1502620792 18<nacho18>	thanks
T 1502622018 18<ernestask18>	I think that‚Äôs a known issue
T 1502622687 18<mclasen18>	baedert: I removed one of the idles. the one thats still in place you can see if you search in the emoji chooser for e.g. xxx - all emoji disappear, only the section heading are left
T 1502622698 18<mclasen18>	and then, if you wait long enough, the idle kicks in and hides the headings
T 1502622952 18<alex28518>	üòÜüòäü¶äüòçüòéüòÉ let me say a hell to matthias :mclasen 
T 1502623020 18<baedert18>	mclasen: I see just the heading and then the placeholder, but "just the headings" is maybe there for .5s
T 1502623033 18<mclasen18>	hmm, let me time it here
T 1502623056 18<mclasen18>	and this is on page 1 of widget factory?
T 1502623084 18<baedert18>	yes
T 1502623111 18<alex28518>	mclasen: sorry foe the emoji spam, i just recorded the GTK emoji widget :)
T 1502623117 18<alex28518>	mclasen: which is so super cool!
T 1502623136 18<alex28518>	mclasen: apart that i cant make color emojis :/
T 1502623177 18<alex28518>	mclasen: and btw i mean "hello" not "hell" sooryy!
T 1502623191 18<baedert18>	mclasen: is it only starting to search at the second character btw?
T 1502623208 18<mclasen18>	ctrl-shift-u has always been available, but not many people know the emoji codepoints by heart
T 1502623265 18<alex28518>	mclasen: i know, but im talking about the widget!
T 1502623273 18<alex28518>	mclasen: it is the best thing ever!
T 1502623283 18<mclasen18>	baedert: looks like I do. not sure why, actually. we can just start right away
T 1502623285 18<alex28518>	mclasen: btw colored emojis are supposed to work on GTK 3.22 right?
T 1502623309 18<mclasen18>	alex285: I'm glad you like it. and yes, this is in 3.22 as well
T 1502623341 18<baedert18>	Of course, most of the time when search is spent... snapshot'ing the treeview
T 1502623400 18<alex28518>	mclasen: Colored Emojis work on Flatpak Polari, but when i tried on GTK Widget Factory with JHBuild i get non-colored, even if i have a correct fontconfig and Noto installed 
T 1502623452 18<mclasen18>	you need unreleased cairo as well
T 1502623472 18<alex28518>	mclasen: oh, i see! thank you!
T 1502623504 18<alex28518>	mclasen: a last question! can such thing work in desktop level? with a Shell popup for example, so we can use an emoji widget on Chrome?
T 1502623505 18<mclasen18>	ebassi: do we have any reasons to keep autotools around longer in gtk master ? 
T 1502623562 18<baedert18>	I will be demotivated even more because the meson build takes ages linking
T 1502623579 18<nirbheek18>	baedert, it takes longer than autotools?
T 1502623584 18<mclasen18>	alex285: the chooser that I put in gtk will only work in applications
T 1502623623 18<baedert18>	nirbheek: I only build in gtk/ using autotools
T 1502623629 18<alex28518>	mclasen: i know, im just asking if it is possible to have something like Win10 emoji dialog that works everywhere
T 1502623657 18<nirbheek18>	baedert, I know a way to fix that, and I've been thinking about adding it as a feature to meson
T 1502623668 18<mclasen18>	if win10 does it, it is obviously possible...
T 1502623671 18<nirbheek18>	i.e., the ability to (re)build only a specific subdirectory
T 1502623687 18<nirbheek18>	baedert, if you bribe me, I could write a script for you that does the same thing :p
T 1502623715 18<baedert18>	nirbheek: How is that not against the whole non-srcdir build idea?
T 1502623719 18<alex28518>	mclasen:  ü§£  and thanks for the cairo info!
T 1502623742 18<nirbheek18>	baedert, because the idea is to correlate which targets are inside a specific source subdir and build those in the builddir
T 1502623767 18<nirbheek18>	baedert, which is effectively what recursive make in a subdir does
T 1502623912 18<nirbheek18>	Except that ninja is more accurate because it will rebuild specific targets concerning other source subdirs if needed, because you can easily have cross-dir dependencies
T 1502623923 18<baedert18>	mclasen: Why is update_headings called in an idle?
T 1502623965 18<mclasen18>	not sure we have a way to know when the flowbox filtering is up-to-date ?
T 1502624026 18<baedert18>	hmm?
T 1502624029 18<mclasen18>	I guess i could just rely on it being all sync right now
T 1502624065 18<baedert18>	it looks like it's just being done at the next frame here
T 1502624102 18<mclasen18>	I could imagine a future in which the filtering is done incrementally and async
T 1502624128 18<mclasen18>	so we can take out the idle, but... why is the idle not working in the first place ?
T 1502624186 18<baedert18>	it works here
T 1502624210 18<baedert18>	Not an X/wayland difference, is it?
T 1502624230 18<mclasen18>	I am currently testing with GDK_BACKEND=x11 to get a working popover
T 1502624279 18<baedert18>	Heh, right
T 1502624299 18<mclasen18>	if I look through all the flickering, wayland seems to behave the same here
T 1502624368 18<mclasen18>	I do get the update to show up the moment I focus another window
T 1502624616 18<baedert18>	Sounds more like a redraw/resize issue then
T 1502624619 18<mclasen18>	which makes it sound more like a redraw problem, but adding printf shows that the idle really doesn't run until then
T 1502624675 18<mclasen18>	i think I need dunfell
T 1502624764 18<baedert18>	The GVariant on line 515 is leaked
T 1502624815 18<mclasen18>	I've been writing too much g_auto code lately...
T 1502625970 18<cfoch18>	how do I list the name of all registered types?
T 1502626040 18<fuser18>	What are the different ways of rendering text with gtk? One way is using pango with gtk_render_layout, what else?
T 1502626069 18<baedert18>	Why do you want another one?
T 1502626359 18<fuser18>	No reason. I just suspected there were more ways and wanted to learn them.
T 1502626746 18<fuser18>	baedert: Okay it seems there's a 'toy' cairo API if I want to use that.
T 1502626752 18<fuser18>	text API
T 1502627344 18<cfoch18>	all registered GType*
T 1502627476 18<baedert18>	cfoch: https://git.gnome.org/browse/gtk+/tree/gtk/inspector/statistics.c#n129 ?
T 1502627545 18<EmmanueleBassi18>	fuser: Don't use the toy Cairo API
T 1502627553 18<EmmanueleBassi18>	fuser: Always use Pango
T 1502627563 18<EmmanueleBassi18>	There's nothing to learn, there
T 1502627604 18<EmmanueleBassi18>	fuser: If you're rendering text for GTK+, `gtk_render_layout()` is all you need to use. If you're rendering text with Cairo, use PangoCairo
T 1502627672 18<fuser18>	EmmanueleBassi: What if I just need to render a line of text, nothing to do with paragraphs? The documentation on pango layouts says: "The objects and functions in this section provide a high-level driver for formatting entire paragraphs of text at once."
T 1502627703 18<mclasen18>	a line of text is just a short paragraph
T 1502627749 18<cfoch18>	why "type += (1 << G_TYPE_FUNDAMENTAL_SHIFT)"?
T 1502627794 18<EmmanueleBassi18>	cfoch: Because all the bits before the shift are reserved
T 1502627794 18<fuser18>	okay thanks both
T 1502627828 18<EmmanueleBassi18>	cfoch: For fundamental types that GLib itself registers
T 1502629092 18<mclasen18>	baedert: one finding so far is that we are occasionally leaking timeouts in https://git.gnome.org/browse/gtk+/tree/gtk/gtkscrolledwindow.c#n3750
T 1502637815 18<jpwhiting18>	hi all, when using css in a gtk+ application on widgets etc. is there a way to get the current theme's background color and foreground color?
T 1502637830 18<jpwhiting18>	maybe with @something ? I can't see anything about that in https://developer.gnome.org/gtk3/stable/chap-css-properties.html
T 1502637976 18<baedert18>	foreground color yes, background color no
T 1502638104 18<jpwhiting18>	baedert: window color? anyway, how do I get it
T 1502638123 18<jpwhiting18>	or do I need to query the current theme and get the color's hex code?
T 1502638189 18<tpm18>	baedert, might   ninja gtk/libgtk-4.0.so  do the trick?
T 1502638191 18<jpwhiting18>	I wos hoping there was something like @warning_color etc.
T 1502638203 18<jpwhiting18>	@warning_color, @success_color @foreground_color ?
T 1502638904 18<EmmanueleBassi18>	jpwhiting: That's not how it works
T 1502638922 18<baedert18>	jpwhiting: What's a window color?
T 1502638932 18<EmmanueleBassi18>	jpwhiting: If you want to render something using the theme colors, use the `gtk_render_*` functions
T 1502638933 18<baedert18>	you can get the current foreground color from a GtkStyleContext
T 1502639146 18<baedert18>	ebassi: I do still get warnings because of missing previous prototypes for the marshallers here when building with meson btw
T 1502639267 18<EmmanueleBassi18>	baedert: Meson in Git checks if GLib is ‚â• 2.53.4 and automatically includes the marshaller header when generating files using `gnome.genmarshal()`
T 1502639315 18<EmmanueleBassi18>	baedert: So the warnings should disappear with the next Meson release
T 1502639437 18<EmmanueleBassi18>	https://github.com/mesonbuild/meson/commit/9683082c4cb4232610e088faaafe0f392484583b
T 1502639444 18<EmmanueleBassi18>	https://github.com/mesonbuild/meson/commit/de45352d9d3736da78e47896d4fa5eeb76f561f1
T 1502639567 18<baedert18>	tpm: touch gtkwidget.c && time ninja gtk/libgtk-4.0.so.0.9102.0 gives me ~30s
T 1502639655 18<EmmanueleBassi18>	We should crowdfund a decent SSD for baedert
T 1502639723 18<nirbheek18>	Or, baedert could use /tmp/gtk as his builddir ;)
T 1502639728 18<nirbheek18>	Building in tmpfs is the best
T 1502639737 18<EmmanueleBassi18>	Well, yes :-)
T 1502639767 18<nirbheek18>	30 seconds is reaaalllyyy slow for linking; gtk+ isn't that big, surely?
T 1502639819 18<baedert18>	It's huge and there are the other static libs...
T 1502639864 18<jpwhiting18>	EmmanueleBassi: I don't want to render something using the current theme, I want to use the current theme colors in reverse to highlight words in a GtkTextView
T 1502639894 18<jpwhiting18>	so I set a tag and set the background and foreground properties to black and white, now I need to make it use the opposite of the current theme colors instead (so when dark is chosen you can see the highlighting...)
T 1502639925 18<jpwhiting18>	so I just need to get these colors from a GtkStyleContext and put them in my GtkTextView tag ?
T 1502640088 18<EmmanueleBassi18>	baedert: `touch gtk/gtkwidget.c && ninja gtk/libgtk.so.blah.blah` is literally less than 1 second on my machine
T 1502640121 18<EmmanueleBassi18>	0.75s of user time
T 1502640171 18<baedert18>	let's talk in 10 minutes since I just needed to edit a meson.build file
T 1502640371 18<tpm18>	baedert, ouch!
T 1502640493 18<nirbheek18>	baedert, that really sucks
T 1502643533 18<ricotz18>	baedert, EmmanueleBassi, hi :), https://paste.debian.net/plain/981205
T 1502643578 18<dboles18>	ricotz: mclasen said about that "I don't have broadway enabled here, so there will be followup fixes to do there (as well as in win32 and quartz)"
T 1502643632 18<ricotz18>	dboles, I see, although he touched this part already
T 1502646774 18<fuser18>	What could cause my app to hang for maybe 10 seconds and then report "Failed to register: Timeout was reached"?
T 1502646830 18<fuser18>	My app is TINY, I just started to develop it (just a single widget). But there's some big gtk turd somewhere. It was acting like this for a long time, I had inserted printf statements everywhere, then I closed down some old processes and all of the second now it works.
T 1502646864 18*	baedert knows EVERYTHING
T 1502646887 18<baedert18>	https://git.gnome.org/browse/gtk+/tree/gtk/gtkapplication-dbus.c#n325
T 1502646889 18<baedert18>	This block.
T 1502647043 18<fuser18>	Look, I hate being mean, but there's something fucked up if a '1' line app is being blocked from running by some dbus logic. I don't know what to make of your link
T 1502647109 18<fuser18>	so im going to guess that dbus is badly designed, or something..
T 1502647144 18<baedert18>	No
T 1502647282 18<fuser18>	Then what? I was lead astray when trying to debug my app because there was hidden state somewhere in a file that I don't understand.
T 1502647291 18<fuser18>	orrr not file but you know what i mean
T 1502647339 18<baedert18>	Just GtkApplication doing it wrong
T 1502647362 18<fuser18>	Since forever or is this something new?
T 1502647426 18<baedert18>	looks like it's been there for a year
T 1502647451 18<fuser18>	baedert: you linked wrong. You meant line 235 :)
T 1502647480 18<fuser18>	i think
T 1502647521 18<fuser18>	wait, no 
T 1502647632 18<jmd18>	Cairo behaves absolutely bizzare, if one specifies a NAN coordinate.
T 1502647670 18<TingPing18>	maybe don't do that
T 1502647687 18<jmd18>	I try not to.
T 1502647788 18<jmd18>	... it wouldn't be too bad if it immediately aborted or crashed, rather than carrying on and doing something bizarre a few hundred operations later.
T 1502648772 18<estebon18>	Hi, I got a problem with a textview. It is inside a listboxrow. The listbox is in a scrolledwindow. The thing is, whenever the scrolledwindow grows, the textview grows and the text is rearranged accordingly in less lines
T 1502648804 18<estebon18>	however, when the scrolled window shrinks, the textview stays the same size
T 1502648822 18<estebon18>	so I have to scroll horizontally to see the whole textview
T 1502648846 18<nirbheek18>	EmmanueleBassi, do you mind if I push a minor meson fix to glib that I need to build it on master? The pthread check *always* needs _GNU_SOURCE or pthread_setname_np isn't defined and gcc assumes the prototype is int pthread_setname_np(int)
T 1502648857 18<nirbheek18>	Which isn't an error because we don't use -Wall -Werror for compiler checks
T 1502648872 18<nirbheek18>	(because compiler checks often use really hacky code on purpose)
T 1502651161 18<dboles18>	wtf, just adding G_BINDING_SYNC_CREATE to the bindings in testpopover, so that the widgets have the right initial values, causes the menubuttons to vexpand and the checkbuttons/comboboxes to become insensitive
T 1502651281 18*	dboles sees what i did there
T 1502651363 18<dboles18>	nope, still broken. bah
T 1502651919 18<estebon18>	this textview refuses to take up less space when its window shrinks
T 1502651976 18<dboles18>	do you mean that once it's grown, it won't shrink? or you just can't shrink it below some minimum that it enforces?
T 1502652020 18<estebon18>	once it's grown it won't shrink back
T 1502652085 18<estebon18>	when it grows, because of the wrap mode, the text occupies less lines and more width, but then just keeps that width
T 1502652133 18<dboles18>	Is it increasing its size-request maybe? You could check with the inspector. Then if you want to cancel that, set a request of (-1, -1)
T 1502655115 18<jmd18>	Is there any way to force a widget to redraw?
T 1502655481 18<hergertme18>	jmd, gtk_widget_queue_draw()
T 1502655585 18<jmd18>	No.  That merely requests a redraw at some indeterminate future time.
T 1502655620 18<hergertme18>	(at the next frame cycle)
T 1502655626 18<hergertme18>	so when the frame clock wakes up
T 1502655662 18<jmd18>	So how do I wake it up?
T 1502655670 18<hergertme18>	you can't force a draw to the backing buffers that go to the compositor
T 1502655677 18<hergertme18>	the compositor wakes up the frame clock
T 1502655694 18<jmd18>	I've no idea what the "compositor" is.
T 1502655695 18<hergertme18>	in wayland, that happens via a wl_callback, on Xorg, if the compositor supports it, that happens based on Xproperty notifications
T 1502655714 18<jmd18>	I'm on Xorg
T 1502655728 18<hergertme18>	if none of those support it, it falls back to simple poll() timers based on what we guessed the framerate of the display to be
T 1502655758 18<hergertme18>	but since you can't actually push the back buffers to the GPU except when the compositor does a vblank...
T 1502655780 18<hergertme18>	obviously you can, if you want tearing, but you get the idea
T 1502655798 18<hergertme18>	the client application is not in control of that, generally speaking, the compositor is
T 1502655808 18<jmd18>	The issue is, that running under Xvfb draw events seem never to happen :(
T 1502655828 18<hergertme18>	that sounds to me like there might be a problem with damage events then
T 1502655841 18<jmd18>	Not even when I send the server xrefresh.
T 1502655873 18<hergertme18>	i would try on a plain 'ol Xorg server without a compositor and see if you get the same issue
T 1502655887 18<hergertme18>	if not, then that sounds like possibly a bug in Xvfb damage code
T 1502655917 18<hergertme18>	also, everything i stated above is relative to gtk3, so if you happen to be gtk2 for some reason, everything is different :)
T 1502655931 18<jmd18>	I don't know what you mean by an "Xorg server without a compositor".
T 1502655942 18<jmd18>	Every other server I've tried works.
T 1502655952 18<jmd18>	Including Xephyr
T 1502655999 18<hergertme18>	i would suggest reading up on how modern window managers are designed then
T 1502656005 18<hergertme18>	non-composited vs composited 
T 1502656011 18<TingPing18>	jmd, what desktop are you testing this with?
T 1502656023 18<jmd18>	What does it have to do with the window manager?
T 1502656047 18<hergertme18>	you'll find out! :)
T 1502656074 18<jmd18>	The set up is quite simple: A Gtk3 app with a single window and a drawing area. And a Xorg server.
T 1502656090 18<hergertme18>	so no window manager?
T 1502656097 18<jmd18>	The window manager (assuming there is one) doesn't play a role.
T 1502656112 18*	hergertme facepalm
T 1502656153 18<jmd18>	hergertme: So yeah:  No window manager.
T 1502656174 18<hergertme18>	https://specifications.freedesktop.org/wm-spec/1.3/index.html <-- some portion of this may be required for a working system
T 1502656268 18<jmd18>	Window managers are simply sugar on the top of the cake.  They should never be required for basic functionality.
T 1502656289 18<hergertme18>	i know it feels like that should be true, but it hasn't been for 15 years
T 1502656318 18<jmd18>	Well I certainly know that 15 months ago it worked.
T 1502656337 18<hergertme18>	some things can work completely by accident
T 1502656374 18<jmd18>	So Xfvb is useless then?
T 1502656438 18<hergertme18>	trying to use gtk (or qt or any other toolkit on linux) without a window manager is a recipe for pain. sure, some stuff can be made to work, but to do that, you end up implementing a large portion of a window manager in the toolkit, which means its not configurable to the problems that people have when wanting to run a system that appears to not have a window manager (ie: kiosk)
T 1502656528 18<hergertme18>	this is going to be further fun now that we are implementing portions of a window manager on the client for wayland ... but it's not exactly a fantastic overlap of feature set yet
T 1502656611 18<jmd18>	I can understand that certain features would not be available.  But I would expect that a widget could draw itself.
T 1502656620 18<hergertme18>	personally, i would too
T 1502656664 18<hergertme18>	there is quite possibly a bug in one of those layers, but its sort of going to be a bug hunt you're unlikely to find help tracking down. but if you happen to, im sure it will get fixed.
T 1502656743 18<jmd18>	Oh well, I guess we'll have to tell the customer they can't have it.  
T 1502656751 18<jmd18>	Thanks for the chat, anyway.
T 1502658373 18<estebon18>	this growing textview is not changing its size_request, it just grows, and doesn't shrink
T 1502661937 18<jpwhiting18>	baedert: ok, so if I have a GtkStyleContext from a widget I use gtk_style_context_lookup_color to get the rgb value of the foreground and background colors?
T 1502661960 18<jpwhiting18>	is there a list somewhere of what possible names I can use to lookup? foreground, or is it foreground_color or something ?
T 1502667236 18<fuser18>	Does the init function of a custom widget call g_object_new?
T 1502667251 18<fuser18>	or how do I initialize the base class
T 1502667912 18<fuser18>	nvm
T 1502671177 18<mezen18>	jpwhiting, https://developer.gnome.org/gtk3/stable/GtkStyleContext.html#GTK-STYLE-PROPERTY-BACKGROUND-COLOR:CAPS
T 1502681528 18<benwaffle18>	Will these scroll effects be possible in GTK4? http://lab.hakim.se/scroll-effects/
T 1502683292 18<TingPing18>	benwaffle, of you are dedicated enough im sure they are today
T 1502686627 18<LRN18>	hey, i have a problem
T 1502686965 18<LRN18>	h-m-m...maybe i should investigate more
T 1502687161 18<LRN18>	a-ha
T 1502687195 18<LRN18>	so, there's a DnD going on, and it creates a popup window that moves along with the mouse cursor, that's how it usually goes with DnD
T 1502687247 18<LRN18>	problem is, that window is, technically, a toplevel, and thus it gets registered as a DnD target, like all other toplevels are (whether this is a good idea by itself is another question for another time)
T 1502687311 18<LRN18>	so the mouse pointer moves over a widget, DnD enter is emitted, the popup is moved in sync, and now, due to popup being very square, mouse is *over* the popup, and since popup is also a drop target, the DnD switches to *it*
T 1502687345 18<LRN18>	so this screws up all DnD where drag widget is highly-rectangular
T 1502687382 18<LRN18>	How is this handled on X?
T 1502687405 18<baedert18>	cool
T 1502690347 18<LRN18>	baedert, it is handed on X coolly?
T 1502690351 18<LRN18>	what does that even mean?
T 1502696607 18<baedert18>	mclasen: Looking at the workaround for entries in GtkPopover, maybe it would be better to not select text when focusing entries and selectable labels altogether? I only ever hear people complain about that behavior
T 1502698781 18<dboles18>	Could the gtk_widget_get_*_allocation() methods be added to GTK+ 3? I think get_border_allocation() is needed for https://bugzilla.gnome.org/show_bug.cgi?id=786209
T 1502706988 18<baedert18>	Since 3.20 depends on glib 2.45.8 afaics, I can rely on 2.46 if my app depends on gtk+ 3.20 anyway, right?
T 1502707035 18<ebassi18>	baedert: Yes
T 1502707063 18<ebassi18>	It's highly unlikely that somebody installed a developers snapshot system-wide
T 1502707134 18<baedert18>	ok thanks
T 1502707545 18<baedert18>	ebassi: Are the warnings about gsettings-compile-{demos,examples}/foo an upstream meson issue? It doesn't seem to come from the gtk+ meson files
T 1502707563 18<EmmanueleBassi18>	I keep forgetting to file it
T 1502707570 18<EmmanueleBassi18>	Yes, we don't do anything special
T 1502707579 18<EmmanueleBassi18>	So I think it's a Meson/gnome module issue
T 1502708461 18<baedert18>	ebassi: I guess https://paste.xinu.at/zsk0a/ should be fine
T 1502708486 18<ebassi18>	baedert: Yes
T 1502709056 18<dboles18>	baedert, is there any way to get the 'outer' allocation in GTK+ 3, without having to add new functions to gtkwidget.c?
T 1502709161 18<baedert18>	dboles: gtkwindow.c already has some shadow size fuckery in it
T 1502709304 18<dboles18>	maybe, but gtk_popover_update_position() doesn't seem to take that into account (or have any way to, that I can see)
T 1502709471 18<dboles18>	so in cases with large shadows and popovers near the edge of the window, the popover positions itself within the full allocation including shadows, so it can end up over the shadow, where no input is received
T 1502711189 18<DMJC-L18>	trying to create a popup menu and GRAVITY_SOUTH is being ignored.
T 1502711200 18<DMJC-L18>	popup keeps appearing off screen
T 1502711322 18<DMJC-L18>	Gravity North is working correctly. It's weird
T 1502711689 18<mclasen18>	ebassi: hey, I looked at that kde decoration protocol patch before last weeks release, but it wouldn't apply cleanly, so I skipped it
T 1502711910 18<dboles18>	DMJC-L: do you mean it appears off screen, not attached at the right position to the other widget? or is it attached at the right position but too large to fit on screen?
T 1502712279 18<ebassi18>	mclasen: Mmmh, I thought they updated the patch
T 1502712296 18<mclasen18>	git-bz complained, and I moved on
T 1502712332 18<ebassi18>	Fair enough; I'll have a look
T 1502712359 18<ebassi18>	btw, I've updated the no-autotools branch with the updated docs
T 1502712375 18<mclasen18>	thanks, I'll have a look
T 1502715035 18<aleb18>	When enlarging a window by dragging a margin, is it possible to configure a widget such that it expands up to an optimum size, but after that the space is allocated to the other widgets? And when the window shrinks .. it should behave symmetrical. with the enlarging performed in the current operation. (There are more cases, but..)
T 1502716420 18<dboles18>	aleb: There's not a nice way to set max sizes on widgets right now, but you could check the workarounds here https://stackoverflow.com/questions/39946206/gtkcontainer-gtkwidget-maximum-width I don't advise doing size-request within a size-allocate handler, though
T 1502716470 18<dboles18>	aleb: you can also try ScrolledWindow and the max-content-height|width properties https://developer.gnome.org/gtk3/stable/GtkScrolledWindow.html#GtkScrolledWindow--max-content-height
T 1502716586 18<aleb18>	Hm, custom container, why did I not think about that
T 1502716599 18<aleb18>	Thanks for the pointers!
T 1502716877 18*	ernestask snickers.
T 1502716880 18<ernestask18>	pointers
T 1502717195 18<dboles18>	"thanks for the pointers" said no C programmer ever :)
T 1502717783 18<aleb18>	haha
T 1502718247 18<dboles18>	Thanks to C for making an asterisk do multiple very different things, and C++ for adding references and making & and && also do completely different things
T 1502718985 18<baedert18>	garnacho: Have you thought about what's gonna happen to gtk_widget_set_cursor?
T 1502719134 18<garnacho18>	baedert: not a lot... currently leaning towards inverting the order and adding distinct api to push a global cursor for wait/progress cursors
T 1502723784 20*	Disconnected (20Connection timed out)
T 1502724058 19*	Now talking on 22#gtk+
T 1502724058 22*	Topic for 22#gtk+ is: https://wiki.gnome.org/Hackfests/GTK2017
T 1502724058 22*	Topic for 22#gtk+ set by 26Company (24Mon Dec  5 07:13:09 2016)
T 1502725024 20*	Disconnected (20Remote host closed socket)
T 1502725037 19*	Now talking on 22#gtk+
T 1502725037 22*	Topic for 22#gtk+ is: https://wiki.gnome.org/Hackfests/GTK2017
T 1502725037 22*	Topic for 22#gtk+ set by 26Company (24Mon Dec  5 07:13:09 2016)
T 1502726661 18<dboles18>	garnacho: hey, did you ever get a chance to have a look at that GtkEntry patch for shift+selection?
T 1502727514 18<baedert18>	running the testsuite in meson is a lot more comfortable though (are there tests missing? :p)
T 1502727587 18<nirbheek18>	ebassi, ok to push this meson patch to glib? http://dpaste.com/2KPEBBN.txt
T 1502727612 18<tpm18>	baedert, does the autotools one run test (binaries) in parallel?
T 1502727660 18<EmmanueleBassi18>	nirbheek: Yes; I thought I already added that, though?
T 1502727683 18<nirbheek18>	EmmanueleBassi, you added it to the linux test but not the osx test
T 1502727688 18<nirbheek18>	So the osx test passes on linux
T 1502727690 18<baedert18>	tpm: Dunno
T 1502727693 18<EmmanueleBassi18>	nirbheek: Ah, only to the second check
T 1502727696 18<baedert18>	tpm: I guess not
T 1502727719 18<EmmanueleBassi18>	tpm: Not by default
T 1502727723 18<nirbheek18>	EmmanueleBassi, I will probably have some more fixes that are needed to use glib as a subproject in gtk+ later
T 1502727729 18<EmmanueleBassi18>	`make -j6 check` is a thing
T 1502727757 18<EmmanueleBassi18>	But we make everything go through the automake TAP, and I don't know how parallelisable that it
T 1502727762 18<tpm18>	right, so it should be automatic for people who have -jN in their MAKEFLAGS I guess
T 1502727797 18<EmmanueleBassi18>	Don't ever try running a distcheck through parallel make, though :-)
T 1502727830 18<nirbheek18>	Further proof that comparing meson with autotools is too low a bar :p
T 1502727838 18<nirbheek18>	Meson should be compared with past versions of itself
T 1502727854 18<nirbheek18>	I do want to fix baedert's use-case though
T 1502727910 18<EmmanueleBassi18>	Well, yes; 30 odd years, and Autotools still gets parallelisation and dependencies wrong. Of course, when it was created, we had 1 core at most, and we had to do builds in the snow, forward and backward, uphill both ways
T 1502727958 18<nirbheek18>	EmmanueleBassi, having fewer CPU cycles and slower disks should've been incentive to NOT use autotools
T 1502727976 18<nirbheek18>	But it's only now when we have octa core CPUs and SSDs that we're moving away from autotools?
T 1502727986 18<ebassi18>	Heh
T 1502727994 18<krnowak18>	EmmanueleBassi: Not sure if somebody already pointed it out, but in your no-autotools branch in gtk, you likely want to remove mentions of libtool and autoconf in release how to.
T 1502728005 18<ebassi18>	krnowak: I did, didn't I?
T 1502728015 18<krnowak18>	Maybe I didn't refresh. Lemme see.
T 1502728021 18<krnowak18>	It was the first sentence there.
T 1502728023 18<ebassi18>	nirbheek: That ought to tell you how bad autotools are for the modern world :-)
T 1502728032 18<ebassi18>	krnowak: I pushed two new commits this morning
T 1502728049 18<krnowak18>	It's still there - "Make sure you have suitable versions of autoconf and libtool."
T 1502728051 18<ebassi18>	Ah, no, those references are still there
T 1502728113 18<tpm18>	(PS: no version is or ever will be suitable)
T 1502728167 18<tpm18>	surprised no one has asked for meson to write its own INSTALL files yet :)
T 1502728168 18<ebassi18>	krnowak: Thanks, branch updated
T 1502728189 18<ebassi18>	 126 files changed, 447 insertions(+), 17557 deletions(-)
T 1502728232 18<krnowak18>	Is there a full stop missing now? :)
T 1502728407 18<ebassi18>	This is not really user docs ;-)
T 1502728611 18*	ebassi notices the INSTALL.in file and removes it
T 1502728617 18<baedert18>	I guess the reftests aren't really working with the meson build atm
T 1502729680 18<elmsy18>	Is there anything that has to be taken into consideration when putting a derived widget in a template of another widget? Right now I get an invalid object type error...
T 1502729741 18<baedert18>	g_type_ensure your widget type before
T 1502729750 18<tpm18>	baedert, which test?
T 1502729769 18<tpm18>	oh nm, gtk presumably
T 1502729770 18<tpm18>	not glib
T 1502729776 18<baedert18>	yes
T 1502729861 18<elmsy18>	baedert: in the _init or something of the widget that goes into the template?
T 1502729900 18<TingPing18>	elmsy, anywhere before the template is loaded
T 1502729904 18<baedert18>	elmsy: No, somewehere before you create the template
T 1502729943 18<elmsy18>	ah, ok
T 1502729976 18<elmsy18>	yay, that worked. thanks
T 1502731148 18<baedert18>	pwithnall: Do you know if there's a way for us to tell clang/scan-build that MY_TYPE_GET_CLASS never returns NULL?
T 1502732347 18<pwithnall18>	baedert: hm, it should be able to figure that out for itself; do you have an example issue?
T 1502733198 18<baedert18>	pwithnall: When I use it in gtk, I get hundreds of reports like https://paste.xinu.at/MnBWg/
T 1502733654 18<pwithnall18>	baedert: you could try adding a `returns_nonnull` attribute to the `*_GET_CLASS` definition in the `G_DECLARE_DERIVABLE_TYPE` macro in `gobject/gtype.h`
T 1502733667 18<pwithnall18>	I think that‚Äôs the one which is generating `GDK_DRAW_CONTEXT_GET_CLASS`
T 1502733681 18<pwithnall18>	baedert: https://clang.llvm.org/docs/AttributeReference.html#returns-nonnull-gnu-returns-nonnull
T 1502733688 18<steelcowboy18>	Hi, what might cause an address to get changed in a callback?
T 1502733712 18<dboles18>	you'd need to be more specific as to which address and callback
T 1502733757 18<steelcowboy18>	Ok, so basically in a function I have a struct, app_objects *globals. I then connect the delete event for my window to a callback I wrote, and the connect looks like this:
T 1502733769 18<steelcowboy18>	g_signal_connect(window, "delete-event", G_CALLBACK(quit_app), globals);
T 1502733819 18<steelcowboy18>	In quit_app, I case the gpointer udata to app_objects like app_objects *globals = udata
T 1502733841 18<steelcowboy18>	The value of globals in the main function and callback function is different
T 1502733892 18<dboles18>	just to check, how are you printing the value?
T 1502733957 18<steelcowboy18>	printf("%p\n", globals)
T 1502734666 18<dboles18>	Why is gtk_popover_update_position getting spammed when the popover is hidden?
T 1502734821 18<baedert18>	because gtkwindow.c:popover_size_allocate
T 1502734908 18<dboles18>	ah ok, thanks
T 1502734926 18<dboles18>	anyway, the numbers with and without csd shadow confirm this fix is correct \o/
T 1502734930 18<dboles18>	(overshoots)
T 1502735632 18<jpwhiting18>	do I use g_object_set_property to set properties on a GtkTextTag object (and all objects I guess)
T 1502735653 18<jpwhiting18>	is there a way to set multiple properties in one call like with _new where you pass in NULL to indicate no more properties?
T 1502735655 18<jpwhiting18>	just curious
T 1502735677 18<baedert18>	g_object_set
T 1502735785 18<jpwhiting18>	erm, right, ok thx
T 1502736435 18<jpwhiting18>	baedert: ok, I grabbed the style conetxt from my widget and tried gtk_style_context_lookup_color to look up the GTK_STYLE_PROPERTY_BACKGROUND_COLOR
T 1502736442 18<jpwhiting18>	it's returning false though
T 1502736472 18<jpwhiting18>	are those names not in the style context somehow?
T 1502736493 18<jpwhiting18>	are they only there if I set them individually rather than just setting the gtk-theme on the gnome gsettings object ?
T 1502736501 18<baedert18>	that's not the same thing
T 1502736508 18<dboles18>	jpwhiting: don't you actually want https://developer.gnome.org/gtk3/stable/GtkStyleContext.html#gtk-style-context-get-background-color ?
T 1502736509 18<baedert18>	there is generally not a background color, period
T 1502736513 18<mclasen18>	a css style may not have a background color
T 1502736513 18<baedert18>	that API is for getting named colors
T 1502736527 18<mclasen18>	it may just have a background image
T 1502736533 18<jpwhiting18>	baedert: no background color?
T 1502736548 18<jpwhiting18>	if I use adwaita-dark theme, the background is black, is that an image instead of a solid color?
T 1502736550 18*	dboles realises that's deprecated
T 1502736555 18<baedert18>	it can be.
T 1502736564 18<baedert18>	*generally*
T 1502736600 18<dboles18>	jpwhiting: i think this from the link sums it up nicely: "This function is far less useful than it seems, and it should not be used in newly written code. CSS has no concept of "background color", as a background can be an image, or a gradient, or any other pattern including solid colors."
T 1502736601 18<jpwhiting18>	I'm trying to "highlight" some words in a GtkTextView by inverting the background and foreground with a GtkTextTag
T 1502736616 18<jpwhiting18>	works fine if I hard code the colors, but I need to get the theme colors so it will work for users that switch their theme
T 1502736633 18<dboles18>	jpwhiting: lookup theme_bg_color, theme_fg_color, theme_selected_blah, etc.
T 1502736671 18<dboles18>	these are used to apply or derive colours throught the standard themes. of course, relying on these assumes third-party themes also define those; you might want to check that at least the popular ones do this (i assume they do)
T 1502736677 18<jpwhiting18>	I don't see those anywhere here... https://developer.gnome.org/gtk3/stable/GtkStyleContext.html
T 1502736681 18<jpwhiting18>	theme_bg_color etc.
T 1502736698 18<dboles18>	i didn't say they were there
T 1502736708 18<baedert18>	They are defined by the theme and also not guaranteed to exist...
T 1502736712 18<jpwhiting18>	dboles: yep, so those names are from the theme? interesting
T 1502736731 18<jpwhiting18>	yeah, is there no way to get the color that will be used when rendering widgets with the current theme ?
T 1502736742 18<jpwhiting18>	at least for foreground since that's usually a solid color, no?
T 1502736753 18<jpwhiting18>	or does gtk+ support rendering text with a gradient and image etc. ?
T 1502736761 18<dboles18>	just look 1 block up at the link i have you: https://developer.gnome.org/gtk3/stable/GtkStyleContext.html#gtk-style-context-get-color
T 1502736766 18<dboles18>	s/have/gave
T 1502736789 18<jpwhiting18>	yep, perfect, /me tries that
T 1502736791 18<dboles18>	no trickery for fg color as far as i'm aware; you'd need cairo for that
T 1502736813 18<dboles18>	so as you said, fg color as a concept *is* useful, unlike bg color
T 1502736968 18<jpwhiting18>	gotcha, ok
T 1502736981 18<jpwhiting18>	is there a way in gtk+ to get an inverse of a color possibly?
T 1502736984 18<baedert18>	pwithnall: hmm looks like I'd have to annotate the ->g_class in _G_TYPE_GET_IGC as nonnull
T 1502736986 18*	jpwhiting looks
T 1502737032 18<dboles18>	jpwhiting: not that i know of, but then it's such a simple operation that it doesn't seem particularly worth including in GTK+/GDK
T 1502737046 18<jpwhiting18>	dboles: gotcha
T 1502737287 18<dboles18>	ebassi: seems the .doap file also needs a refresh where maintainers are concerned
T 1502737363 18<dboles18>	(and maybe the website too?)
T 1502738362 18<jpwhiting18>	ok, next question, in order to get changed::gtk-theme signal from gnome gsettings I need to get the value once after I connect to that signal
T 1502738379 18<jpwhiting18>	so I'm getting the value with g_settings_get_string, but I don't need that string for anything
T 1502738399 18<jpwhiting18>	so when building with warnings enabled I get this: " error: variable ‚Äòstring_to_ensure_we_get_notifications‚Äô set but not used [-Werror=unused-but-set-variable]"
T 1502738414 18<jpwhiting18>	what sorts of things can I do with this string I don't need to avoid that compile error...
T 1502738417 18<dboles18>	do you really need to do that?
T 1502738425 18<jpwhiting18>	need to get the value?
T 1502738427 18<jpwhiting18>	yes
T 1502738428 18<dboles18>	but, to make the compiler ignore an unused variable, just put in a (void)var
T 1502738437 18<dboles18>	e.g. (void) string;
T 1502738437 18<jpwhiting18>	read the last line of https://developer.gnome.org/gio/stable/GSettings.html#GSettings-changed
T 1502738445 18<jpwhiting18>	added when I hit this problem 2 years ago :)
T 1502738450 18<jpwhiting18>	ah, ok thx
T 1502738462 18<dboles18>	huh, don't remember that one. thanks!
T 1502738483 18<dboles18>	there are probably compiler attributes you can use, but none are standard, whereas a throwaway cast to void is
T 1502738495 18<jpwhiting18>	yep, if you connect to a changed signal on gsettings then never query the key you get no notifications when it changes...
T 1502738512 18<jpwhiting18>	yep, that worked, thanks a ton, saved me time searching for the c equivalent of Q_UNUSED
T 1502738533 18<dboles18>	cool. hm, thinking about it, i don't think i ever connected to ::changed, so that'll be why i didn't remember that :)
T 1502738546 18<jpwhiting18>	gotcha
T 1502738551 18*	dboles digs up my main project from the depths of a month ago
T 1502738557 18<jmd18>	so many widgets have a "changed" signal.
T 1502738561 18<DMJC-L18>	dboles: thanks for trying to help, sorry I was asleep. I fixed the issue, I had to run show() before I set the gravity. It was an order of execution issue.
T 1502738590 18<jpwhiting18>	jmd: yeah, this is just gsettings though
T 1502738591 18<baedert18>	pwithnall: and that doesn't work of course, neither can you annotate struct members like that, so a wrapping function with returns_nonnull could work...
T 1502738601 18<jpwhiting18>	most changed signals don't have this optimization I guess
T 1502738696 18<dboles18>	DMJC-L: cool, thanks for the update!
T 1502738862 18<dboles18>	jpwhiting: hm, i have one setting with ::changed connected, but it seems to work either way for me :S
T 1502738885 18<jpwhiting18>	dboles: you're not getting the value of the setting after connecting to the ::Changed signal ?
T 1502738892 18<jpwhiting18>	maybe they fixed it to always send, dunno
T 1502738906 18<jpwhiting18>	I hit that with gtk 3.16 a couple of years ago
T 1502738921 18<dboles18>	i use the same callback to apply the initial value and as the changed handler
T 1502738921 18<jpwhiting18>	hmm, gtk_widget_get_style_context is segfaulting here...
T 1502738940 18<jpwhiting18>	dboles: yep, same here, that queries the value in the handler, right?
T 1502738983 18<dboles18>	yeah but i've swapped it so the initial check is done before connecting, and it still seems to work
T 1502738991 18*	dboles rebuilds to be sure
T 1502738993 18<jpwhiting18>	they figured everyone would do it that way (I was even newer to gtk+ when I wrote this stuff, so I did it in reverse, queried the value then connected to ::changed) and I never got 
T 1502738995 18<jpwhiting18>	hmm, interesting
T 1502739006 18<jpwhiting18>	maybe they keep track of if you've ever queried it or something now
T 1502739025 18<jpwhiting18>	anyway, why would gtk_widget_get_style_context segfault for a valid GtkTextView object ?
T 1502739072 18<jpwhiting18>	do you have to set a gtk_style_context on the widget before trying to get it ?
T 1502739082 18<jpwhiting18>	i.e. is it not something automatic that all widgets get during creation
T 1502739123 18<jpwhiting18>	dboles: ah, are you watching changed or changed::x ?
T 1502739148 18<jpwhiting18>	I think only  the latter has that optimization
T 1502739154 18<baedert18>	style contexts are created on demand
T 1502739168 18<dboles18>	jpwhiting: gtkmm so not sure tbh, but the documentation doesn't imply that warning is conditional
T 1502739191 18<jpwhiting18>	baedert: hmm, what am I doing wrong then?
T 1502739197 18<jpwhiting18>	guess I need to take a look at the sources
T 1502739203 18<baedert18>	Use a debugger
T 1502739217 18<jpwhiting18>	yep, I am
T 1502739231 18<dboles18>	jpwhiting: i guess this comment from your report clarifies why it might work anyway: https://bugzilla.gnome.org/show_bug.cgi?id=750257#c4
T 1502739239 18*	jpwhiting installs debug symbols for gtk+
T 1502739318 18<jpwhiting18>	heh
T 1502739384 18*	dboles adds comment 	// Read after connect, or signal MAY not fire (does though)
T 1502739509 18<jpwhiting18>	hmm, I have libgtk2.0-0-dbg but no libgtk-dbg in debian stretch, I wonder where the gtk 3.x debug symbols are...
T 1502739539 18<dboles18>	I had a bunch of other settings but removed them as I decided it was easier and more maintainable just to enforce my preferences users O:-)
T 1502739566 18<jpwhiting18>	heh, interesting
T 1502739587 18<dboles18>	in reality, a lot of them were 'prompt before doing Destructive Thing?' and i added various levels of undo to make them redundant
T 1502739607 18<dboles18>	which is far less disruptive to those who DO mean what they click
T 1502739618 18<dboles18>	so it seems like a better pattern to me
T 1502739650 18<dboles18>	I wonder when I'lll get rid of that 'Force Adwaita:dark theme and icons' choice :P
T 1502739661 18<jpwhiting18>	dboles: heh, nice
T 1502739667 18<dboles18>	really oughta test my app with the big 3rd-party themes and see if it's worth leaving the option open
T 1502739675 18*	baedert got rid of it and received the expected reaction
T 1502739680 18<baedert18>	(nobody gives a fuck)
T 1502739694 18<dboles18>	haha
T 1502739757 18*	dboles notices baedert is in gtkpopover.c and coughs in an exaggerated way
T 1502739819 18<jpwhiting18>	ok, that function is pretty straightforward, check it's a widget, return the style context create it from the screen if needed
T 1502739822 18<baedert18>	I AM EVERYWHERE
T 1502739832 18<jpwhiting18>	maybe the widget I chose is not really a GtkWidget somehow...
T 1502739847 18<baedert18>	It's not getting called before the gtk_init call, right?
T 1502739881 18<jpwhiting18>	GtkTextView is a GtkWidget... hmm
T 1502739896 18<jpwhiting18>	no, it's segfaulting when I change the theme in the ui (I connected the changed::gtk-theme to my handler
T 1502739897 18<Black_Prince18>	ah, the joys of being C coder, PURE INSANITY intensifies
T 1502739902 18<jpwhiting18>	Black_Prince: indeed
T 1502739921 18<dboles18>	just use gtkmm, then you have twice as many calls in the backtrace
T 1502739927 18<jpwhiting18>	yet I get a segfault in here every time somehow... maybe my callback needs to be different somehow
T 1502739938 18<dboles18>	can you pastebin it?
T 1502739983 18<Black_Prince18>	and a backtrace that's unreadable due to name manging
T 1502739984 18<Black_Prince18>	mangling
T 1502740024 18*	jpwhiting changes it to match the signature of other functions I have connected to changed:: signals instead
T 1502740030 18<jpwhiting18>	that was probably part of the problem
T 1502740057 18<dboles18>	lol
T 1502740080 18<jpwhiting18>	yep, all better
T 1502740081 18<jpwhiting18>	doh
T 1502740099 18<jpwhiting18>	thanks G_CALLBACK for not being able to check my function signature was correct
T 1502740101 18<dboles18>	the miracle of casting to void!
T 1502740137 18<jpwhiting18>	ok, now my text tag is not getting the new colors, /me checks why
T 1502740157 18<jpwhiting18>	if I change the properties of a GtkTextTag do I need to "apply" those changes back to the GtkTextView somehow maybe?
T 1502740176 18<mclasen18>	ebassi: wip/ebassi/no-autotools has my blessing
T 1502740244 18<jpwhiting18>	anything with no-autotools in the name is probably an improvement... :)
T 1502740268 18<jpwhiting18>	hmm, nothing obvious in GtkTextBuffer docs
T 1502740271 18*	jpwhiting reads
T 1502740394 18<jpwhiting18>	ok, so the GtkTextTag is owned by the GtkTextTagTable that the buffer already has
T 1502740436 18<jpwhiting18>	so, do I need to change the properties with something besides g_object_set so gtk_text_tag_changed will get sent (so the buffer will use the new tag colors instead of the old ones when I add tags to the text)
T 1502740463 18<jpwhiting18>	or do I need to completely remove the tag and create a new one with the new colors with the same "highlight" name
T 1502740505 18*	jpwhiting checks my code to change the colors is getting ran first
T 1502740579 18<jpwhiting18>	nope, that's probably the problem here then :)
T 1502740845 18<jpwhiting18>	ah, no it is getting called, I'm just always getting the color 0, 0, 0, for foreground no matter which theme I have... hmm
T 1502740885 18<jpwhiting18>	does the GtkStyleContext not get new colors when the gtk-theme gsetting changes ?
T 1502740887 18<jpwhiting18>	:/
T 1502740951 18<dboles18>	it does
T 1502740973 18<dboles18>	without a minimal test case there's not much we can say; as you've seen, the cause could be something totally different you haven't noticed yet
T 1502741026 18<dboles18>	some widgets are odd with CSS though; iirc CellView didn't get updated with changes to currentColor, and Entry doesn't properly support animated border color or selection bgcolor, etc. (hey, i was being ridiculous on purpose)
T 1502741080 18<jpwhiting18>	hmm, yeah, I'm currently trying gtk_style_context_get_color to get just the foreground color then am inverting to get a background color
T 1502741100 18<jpwhiting18>	no matter if my theme is adwaita or adwaita-dark I'm getting black foreground always
T 1502741118 18<jpwhiting18>	no, I take that back
T 1502741133 18<jpwhiting18>	if the theme is adwaita-dark when I start my application it's getting white foreground
T 1502741135 18<dboles18>	the injustice of accepted vs actual answers: https://stackoverflow.com/questions/18994609/how-to-git-pull-into-a-branch-that-is-not-the-current-one
T 1502741160 18<jpwhiting18>	so maybe I just am getting the color before the style context has been updated in my handler for gtk-theme changed signal
T 1502741192 18<dboles18>	maybe; you can try deferring getting the color to an idle handler
T 1502741202 18<jpwhiting18>	yep
T 1502741212 18<jpwhiting18>	what's an idle handler ?
T 1502741230 18<dboles18>	https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop.html#g-idle-add
T 1502741238 18<jpwhiting18>	I thought I was decent at c years ago, now I'm finding slowly that I hate it so badly :)
T 1502741245 18<jpwhiting18>	ah, cool, thx
T 1502741254 18<dboles18>	you may also need to tweak the priority
T 1502741314 18<jpwhiting18>	hmm, or maybe I should be connecting to the style context's signal instead of the gnome gsettings changed::gtk-theme ?
T 1502741315 18*	jpwhiting looks
T 1502741344 18<dboles18>	jpwhiting: well that's the proper way to catch all changes to the color, yes
T 1502741358 18<jpwhiting18>	style-updated on the widget maybe
T 1502741363 18<jpwhiting18>	yep
T 1502741414 18<dboles18>	as an example of idles: I have a function that shows/hides a bunch of widgets in a window then tries to scroll to a given position in it, but it needs to be PRIORITY_LOW so that it scrolls after the widgets and size have settled 
T 1502741438 18<dboles18>	this kind of thing is pretty trial-and-error IME
T 1502741542 18<jpwhiting18>	hmm, connecting to style-updated I'm always getting the same color after changing the theme as before changing it
T 1502741543 18<jpwhiting18>	:/
T 1502741619 18<dboles18>	which widget's style are you monitoring?
T 1502741619 18<jpwhiting18>	I am getting the GtkStyleContext each time in my callback
T 1502741628 18<jpwhiting18>	it's a GtkTextView
T 1502742073 18<jpwhiting18>	https://developer.gnome.org/gtk3/stable/GtkWidget.html#GtkWidget-style-updated I connect to this signal like this, no? : 
T 1502742075 18<jpwhiting18>	g_signal_connect (self->textview, "style-updated",
T 1502742076 18<jpwhiting18>	                    G_CALLBACK(tnt_speaking_window_update_highlight_tag), self);
T 1502742120 18<dboles18>	of course, it's impossible to say if that's right without seeing the signature of the handler
T 1502742141 18<dboles18>	and what you do with the args
T 1502742153 18<jpwhiting18>	tnt_speaking_window_update_highlight_tag(GtkWidget *widget,
T 1502742154 18<jpwhiting18>	    gpointer   user_data)
T 1502742156 18<jpwhiting18>	static void
T 1502742165 18<jpwhiting18>	and TntSpeakingWindow *self = user_data; etc.
T 1502742353 18<dboles18>	seems ok ofc
T 1502742416 18<jpwhiting18>	k, fun another style mystery
T 1502742452 18<jpwhiting18>	the other one being why does gtk+ rendering render checked GtkRadioButton and GtkCheckButtons as red squares if I set the gtk-theme gsetting...
T 1502742454 18<jpwhiting18>	:)
T 1502742479 18<steelcowboy18>	So I'm trying to make a user wait for some subprocesses to be done before they can close a dialog. So at the end of my subprocess callback, I connect my dialog widget's response field to its callback so it can be destroyed
T 1502742494 18<steelcowboy18>	However, I'm trying to pass a data parameter and it's getting mangled
T 1502742494 18<jpwhiting18>	meh, /me tries setting a timer for a few seconds after I get style-updated to see what colors it gets then
T 1502742511 18<steelcowboy18>	So at the end of my subprocess callback I have
T 1502742528 18<steelcowboy18>	g_signal_connect(diag, "response", G_CALLBACK(target_setup_done), globals);
T 1502742550 18<steelcowboy18>	Where diag is actually a member of the globals struct. So I know in this callback my globals struct works
T 1502742571 18<steelcowboy18>	However, when it calls target_setup_done I have it print the gpointer user_data and I get
T 1502742589 18<steelcowboy18>	User data is 0xfffffffd
T 1502742601 18<steelcowboy18>	Whereas right before I connected the signal it said
T 1502742610 18<steelcowboy18>	User data is 0x10034db80
T 1502742625 18<dboles18>	note the signature of the ::response handler: https://developer.gnome.org/gtk3/stable/GtkDialog.html#GtkDialog-response
T 1502742628 18<dboles18>	how many args does your handler have?
T 1502742641 18<dboles18>	sounds to me like you're interpreting a negative gint response_id as the gpointer user_data
T 1502742654 18<steelcowboy18>	Ahhhh, thank you!
T 1502742703 18<dboles18>	no prob - it's thanks to the fact that you told us what the before/after values were, as many people would just not and expect us to know what was going on :P
T 1502742804 18<steelcowboy18>	Haha, well glad I could be a good inquirer :) 
T 1502742817 18<jpwhiting18>	dboles: yep, if I set a timer to query the colors 3 seconds after the signal it gets the right colors
T 1502742820 18<jpwhiting18>	fun
T 1502742825 18*	jpwhiting tries shorter durations
T 1502742849 18<dboles18>	jpwhiting: did you try doing that an idle handler yet, including with lower priorities than default
T 1502742854 18<dboles18>	*that in an idle
T 1502743453 18<jpwhiting18>	no, just a g_timer_add timer
T 1502743463 18<jpwhiting18>	g_timeout_add_seconds rather
T 1502743467 18<jpwhiting18>	trying 1 second now
T 1502743501 18<dboles18>	you should use an idle wherever possible rather than guessing at arbitrary timeouts and hoping for the best
T 1502743518 18<jpwhiting18>	1 second works
T 1502743533 18<jpwhiting18>	idle sounds like a shot in the dark also, no?
T 1502743549 18<jpwhiting18>	how do I know if the idle timeout will happen after the style has got the new colors etc. ?
T 1502743611 18<dboles18>	my point is you should try it, under the assumption that stuff like that has a higher priority than the one you set, and therefore the idle will only run once all other queued tasks with a higher priortiy have completed
T 1502743650 18<dboles18>	i.e. try the elegant code that says what it means first, and only hack around with arbitrary timeouts if somehow the good code can be proven never to work
T 1502743662 18<jpwhiting18>	gotcha
