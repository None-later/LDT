T 1533051621 18<Company18>	mod-a is q, mod-s is w, ...
T 1533051624 18<mclasen18>	two buttons should suffice
T 1533051646 18<Company18>	people tend to wrap text
T 1533051670 18<Company18>	i've even heard about people who want to wrap the only single-line text we have remaining in GTK
T 1533051692 18<mclasen18>	anyway, its seems legit to want your toolkit to not expect non-existing keys
T 1533051703 18<pwithnall18>	mclasen: do you currently build GLib using autotools or Meson?
T 1533051705 18<mclasen18>	regardless whether the absence of those keys is a good design or not
T 1533051734 18<Company18>	mclasen: you don't have to unset those keys though if they don't exist
T 1533051741 18<mclasen18>	pwithnall: depends on my mood
T 1533051745 18<mclasen18>	Company: that is true
T 1533051790 18<Company18>	the problem with maemo is that it also had no <tab> key
T 1533051801 18<pwithnall18>	mclasen: OK. Could you do `ninja dist`, and then try `make distcheck` on the resulting tarball?
T 1533051803 18<Company18>	so instead of <tab>/shift-<tab>
T 1533051815 18<Company18>	they wanted you to use fn-left/right which was mapped to up/down
T 1533051819 18<pwithnall18>	mclasen: Alternatively, if you’ve built with autotools most recently, just try `make distcheck` on your GLib build
T 1533051840 18<Company18>	and now we're slowly descending into madness territory
T 1533051854 18<pwithnall18>	I’m wondering if you’re going to hit the same error as me:make[3]: Entering directory '/home/philip/Downloads/glib-2.57.2/_build/glib-2.57.2/_build/sub/glib'
T 1533051857 18<pwithnall18>	Makefile:1650: .deps/libglib_2_0_la-gwin32.Plo: No such file or directory
T 1533051858 18<pwithnall18>	make[3]: *** No rule to make target '.deps/libglib_2_0_la-gwin32.Plo'.  Stop.
T 1533051894 18<mclasen18>	did I mention recently that maintaining 2 parallel build systems is madness ?
T 1533051907 18<Company18>	the problem is that the correct fix is "don't add a stupid keyboard to your device and instead let developers do useful things"
T 1533051910 18<mclasen18>	we should really stop doing that
T 1533051944 18<fmtq18>	mm the only thing in my way with gtk-rs atm is being able to subclass things 
T 1533051947 18<Company18>	but back to my question:
T 1533051953 18<Company18>	do we need a way to unset shortcuts?
T 1533051973 18<Company18>	ahhhhh
T 1533051988 18<Company18>	gtk-rs is why slomo didn't like ListModel - that makes sense :)
T 1533051989 18<mclasen18>	how is unset different from remove or disable ?
T 1533052026 18<slomo18>	Company: i actually wrote an gtk-rs example with GtkListBox / GListStore, so no
T 1533052075 18<Company18>	mclasen: i meant remove/disable - but unset would be different in that it explicitly adds a shortcut that says "this keybinding must not be handled
T 1533052091 18<mclasen18>	that seems very different
T 1533052101 18<mclasen18>	like a no-op action
T 1533052116 18<mclasen18>	why does that need any special support ?
T 1533052136 18<Company18>	mclasen: ie there's 2 booleans here: 1. shortcut for keybinding exists/doesn't exist - 2. shortcut controller has handled the keybinding
T 1533052144 18<Company18>	mclasen: and you want 1. TRUE, 2. FALSE
T 1533052166 18<mclasen18>	hmm ? not sure I follow
T 1533052178 18<Company18>	ie a shortcut exists, but the controller reports it didn't handle the binding
T 1533052193 18<mclasen18>	if you say: "must not be handled" do you mean "let the next shortcut handle this" or "I handle this key by doing nothing" 
T 1533052199 18<pwithnall18>	mclasen: we are literally at the most painful release in the plan for dropping autotools
T 1533052203 18<Company18>	or even: multiple shortcuts exist, some of which do handle the binding, but the controller still reports it didn't handle it
T 1533052221 18<mclasen18>	oh, that seems weird
T 1533052225 18<pwithnall18>	though given that I can reproduce this problem without using meson at all, it’s looking squarely like autotools’ fault
T 1533052232 18<Company18>	mclasen: the next shortcut must not get it, but the controller should return it didn't handle it
T 1533052240 18<mclasen18>	Company: I don't think we want that ? why ?
T 1533052264 18<Company18>	mclasen: the bug has a case for why that was necessary in GtkBindings
T 1533052280 18<mclasen18>	oh, wait. this controller saying "I didn't handle it" means the next widget gets a crack at it ?
T 1533052290 18<Company18>	right
T 1533052310 18<mclasen18>	seems a bit arbitrary to skip other handlers in the same widget, but not the next ?
T 1533052342 18<Company18>	well, the use case was to skip the up/down handling in combobox, so that the event bubbled to the window
T 1533052351 18<Company18>	which did a <tab>-like focus change
T 1533052389 18<Company18>	for that you installed an "up" binding that said "don't invoke the real shortcut and keep propagating the event"
T 1533052410 18<mclasen18>	Company: not very convincing, imo
T 1533052414 18<Company18>	and that's because bindings in GTK are merged together, so you can't remove an existing one
T 1533052434 18<mclasen18>	if you have the power to add shortcuts to the combo, why don't you have the power to disable existing ones ? this seems basically a contrived way to do that ?
T 1533052444 18<Company18>	as in: if hergertme wants emacs mode, and emacs mode has c-x or c-c, you must remove the cut/copy shortcuts
T 1533052474 18<Company18>	mclasen: because you can only add shortcuts with bindings, not remove existing ones
T 1533052504 18<mclasen18>	but bindings were designed 20 years ago. how about the thing you designed yesterday ?
T 1533052515 18<Company18>	that's why i was wondering
T 1533052539 18<Company18>	I mean, if we have shortcuts per widget-class, we still don't let people remove them
T 1533052545 18<Company18>	at least I don't think we do
T 1533052574 18<Company18>	at least not on a per-widget or per-shortcut level
T 1533052580 18<Company18>	how would we even identify them?
T 1533052585 18<mclasen18>	depends on where we go with key themes, I guess ?
T 1533052596 18<mclasen18>	key themes would replace the whole set, no ?
T 1533052614 18<Company18>	no idea
T 1533052621 18<Company18>	they could
T 1533052654 18<Company18>	there's also this use case of a subclass that wants to get rid of certain keybindings
T 1533052681 18<Company18>	ie a GtkPasswordEntry could want to disallow "copy" and "cut"
T 1533052693 18<Company18>	or a "please repeat your password" entry could want to disallow "paste" ;)
T 1533052701 18<mclasen18>	but thats a case for a no-op override ?
T 1533052708 18<mclasen18>	not a propagate-up-override ?
T 1533052718 18<Company18>	true
T 1533052743 18<Company18>	the propagate-up-override would be emacs mode I gues
T 1533052760 18<Company18>	but screw emacs mode
T 1533052768 18<mclasen18>	can we define an enum for the return values instead of booleans ?
T 1533052791 18<Company18>	i wondered about that
T 1533052800 18<Company18>	in general, not just for shortcuts
T 1533052802 18<Company18>	also for event controllers
T 1533052802 18<mclasen18>	then we can leave ourselves wiggle room to add a skip-to-next-widget later if it turns out to be ncescessary
T 1533052831 18<Company18>	ie EventController->handle_event
T 1533052952 18<Company18>	mclasen: EventController->handle_event already has a use case even with https://gitlab.gnome.org/GNOME/gtk/blob/master/gtk/gtkwidget.c#L5139-5144
T 1533052971 18<krnowak18>	What about the use case where a subclass wants to disable all the keybindings from base class but a selected ones? So if base class adds another keybinding, it will be still disabled in the subclass without doing any changes.
T 1533053027 18<krnowak18>	That disabling of keybindings sounds a bit like choosing whitelist vs blacklist method of filtering keybindings.
T 1533053063 18<Company18>	filtering keybindings sounds like a terrible idea in any case
T 1533053071 18<Company18>	but apprently you need it on maemo
T 1533053088 18<Company18>	which in today's world probably translates to IoT and RPi
T 1533053150 18<Company18>	krnowak: if you want to avoid keybindings in the parent class, the best way is to not subclass but to use a bin containing the widget you care about and making your bin handle focus
T 1533053168 18<mclasen18>	I agree
T 1533053168 18<Company18>	most likely
T 1533053177 18<mclasen18>	why subclass if you don't want anything the base class has to offer ?
T 1533053199 18<krnowak18>	Dunno, probably keybindings is not everything the base class has to offer.
T 1533053209 18<Company18>	yeah, the "is-a" idea of OOP seems violated in those cases
T 1533053230 18<Company18>	i dunno though
T 1533053259 18<Company18>	it's like somebody going "i want vim mode, so I'm gonna subclass TextView to do text handling the vim way"
T 1533053304 18<Company18>	and at that point, tons of arguments can be made that whatever route you pick is the wrong one
T 1533054518 18<tbernard18>	Company: question: is there a way to do something like `filter: drop-shadow(0 1px 1px rgba(0,0,0,0.4)) drop-shadow(0 1px 10px rgba(0,0,0,0.1));` in gtk?
T 1533054526 18<tbernard18>	for the new, generated icon shadows we kinda need double shadows
T 1533054612 18<Company18>	tbernard: there's icon-shadow and that supports multiple shadows, just like text-shadow
T 1533054627 18<Company18>	or -gtk-icon-shadow
T 1533054635 18<Company18>	or something
T 1533054662 18<Company18>	Adwaita says it's -gtk-icon-shadow
T 1533054684 18<Company18>	and I know it's using the same code paths as text-shadow
T 1533054746 18<Company18>	and I know that supports multiple shadows because baedert always raves about it
T 1533055600 18<baedert18>	I do?
T 1533055803 18<Company18>	baedert: because GskRenderNodeShadow
T 1533055807 18<Company18>	or GskShadowNode
T 1533055811 18<Company18>	or whatever it's called
T 1533057274 18<tbernard18>	Company: do you have an example of how that is done?
T 1533057588 18<tbernard18>	also, is this gtk4 or gtk3 we're talking about?
T 1533057745 18<Company18>	tbernard: gtk3
T 1533057829 18<Company18>	tbernard: run gtk3-demo --run=fishbowl, open the inspector, paste "image { -gtk-icon-shadow: 4px 4px tomato, -4px -4px chartreuse; }" into the css view
T 1533057920 18<tbernard18>	awesome!
T 1533057955 18<mclasen18>	pwithnall: sorry it took me a while, but my distcheck just failed with:
T 1533057958 18<Company18>	(gtk4 of course works, too)
T 1533057958 18<mclasen18>	ERROR: files left in build directory after distclean:
T 1533057960 18<mclasen18>	./glib/.deps/giounix.Plo
T 1533057962 18<mclasen18>	./glib/.deps/gspawn.Plo
T 1533058097 18*	zbrown[m] excitedly tries it out
T 1533058244 18<Company18>	Indefinite types have been added by introducing the characters "*", "?" and "r" to type strings.
T 1533058263 18<Company18>	another place where emojis would have been the obvious solution
T 1533058285 18<Company18>	char (rand(128))
T 1533058421 18<pwithnall18>	mclasen: interesting, mine just succeeded, but I do have a patch which affects the generation of those .Plo files
T 1533058443 18<aruiz18>	pwithnall, hey, do you still maintain libgdata?
T 1533058451 18*	tbernard uploaded an image: image.png (414KB) < https://matrix.org/_matrix/media/v1/download/matrix.org/AUhBbEmmaIGvdIWvkofiVsje >
T 1533058452 18<tbernard18>	double shadows totally work now \o/
T 1533058454 18<tbernard18>	maybe i just had a typo or something
T 1533058455 18<pwithnall18>	aruiz: ‘maintain’, yes
T 1533058470 18<pwithnall18>	within the bounds of my free time: |<--->|
T 1533058535 18<aruiz18>	pwithnall, I sent a patch that I kind of need to fix a bug for the google drive backend in gvfs
T 1533058579 18<Company18>	what's the difference between "arguments" and "parameters" ?
T 1533058588 18<Company18>	or is that a synonym?
T 1533058617 18<pwithnall18>	aruiz: I’ll see it when it pops up in my e-mail then, and will take a look
T 1533058617 18<aruiz18>	pwithnall, basically libgdata doesn't implement server-side 'move', just a copy, and therefore the gvfs backend doesn't support move operations, so when people try to move stuff in nautilus it shows a hiddeous error
T 1533058627 18<pwithnall18>	right
T 1533058629 18<aruiz18>	pwithnall, I sent it as a pull request in gitlab.gnome.org
T 1533058677 18<pwithnall18>	apparently I don’t have the right notification settings there
T 1533058688 18<aruiz18>	pwithnall, not pushing, just making sure you were the right person to expect a review from :-)
T 1533058726 18<ernestask18>	Company, what I’ve been taught is that arguments are what you pass in a function call
T 1533058731 18<ernestask18>	and formal parameters are things a function takes
T 1533058731 18<aruiz18>	pwithnall, I also sent another PR to fix the lack of use of g_list_free_full
T 1533058748 18<pwithnall18>	aruiz: I see them now. I’ll take a look soon. Thanks for pinging me about it :)
T 1533058750 18<ernestask18>	unless you’re talking about something else entirely
T 1533058756 18<aruiz18>	pwithnall, the codebase was abusing function casting for g_object_unref
T 1533058760 18<aruiz18>	np
T 1533058765 18<aruiz18>	pwithnall, thanks!
T 1533058767 18<rishi18>	Next item on aruiz 's list, finish the test suite!
T 1533058770 18*	rishi hides
T 1533058780 18<aruiz18>	ah, that's right
T 1533058798 18<Company18>	ernestask: so arguments are what you actually pass as the parameters
T 1533058803 18<aruiz18>	pwithnall, I'd appreciate some help to understand how does one goes about recording a uhttpmock session
T 1533058813 18<pwithnall18>	I saw your issue about that too
T 1533058824 18<pwithnall18>	I have even less time for uhttpmock than I do for libgdata though :(
T 1533058827 18<aruiz18>	for the sake of writing a test
T 1533058830 18<aruiz18>	hah
T 1533058832 18<ernestask18>	Company, yeah, I suppose
T 1533058834 18<pwithnall18>	I know!
T 1533058839 18<pwithnall18>	aruiz: I’ll try and remind myself of how it works
T 1533058858 18<aruiz18>	I mean, I could wireshark and write the session by hand
T 1533058865 18<Company18>	ernestask: so GVariantType is to GVariant what parameters are to arguments
T 1533058902 18<rishi18>	aruiz: I don't how you'd set up the whole harness for a completely new project. I have wanted to figure that out for the last 6 years. :P
T 1533058913 18<rishi18>	But I do know how to work with the tests in libgdata.
T 1533058939 18<rishi18>	I "know"..
T 1533058941 18<Company18>	so the 2nd argument to https://developer.gnome.org/gio/stable/GAction.html#g-action-activate should be called "argument", not "parameter"
T 1533058950 18<Company18>	or the 2nd parameter?
T 1533058956 18<rishi18>	Basically a bit of grepping around reminds me.
T 1533058959 18<Company18>	help!
T 1533058960 18<Company18>	:)
T 1533058973 18*	ernestask blinks.
T 1533058990 18<aruiz18>	pwithnall, if you'd accept the patch without a test case I'd gladly skip that step X-)
T 1533059007 18<aruiz18>	but I don't want to be THAT guy
T 1533059010 18<pwithnall18>	I don’t negotiate with terrorists^W^W^Waccept patches without tests
T 1533059016 18<aruiz18>	hehehe
T 1533059033 18<aruiz18>	rishi, it looks straightforward enough by the looks of it
T 1533059043 18<ernestask18>	Company, yeah, the second parameter should be called “argument”
T 1533059080 18<ernestask18>	this is making me short-circuit tbh
T 1533059110 18<aruiz18>	and now for something completely different
T 1533059125 18<rishi18>	aruiz: Ok.
T 1533059127 18<rishi18>	For me, nothing is straightforward when it involves tests and build systems.
T 1533059127 18<aruiz18>	directhex, I might have some time this friday to spend on the MD stuff
T 1533059137 18<directhex18>	:D
T 1533059144 18<aruiz18>	directhex, would you be around?
T 1533059157 18<aruiz18>	I'm still stuck on that crash I told you last time
T 1533059164 18<aruiz18>	at 'make run'
T 1533059171 18<aruiz18>	I mean the main window shows up and error dialogs and all
T 1533059190 18<aruiz18>	but then the app closes up once I close the dialogs
T 1533059220 18<pwithnall18>	aruiz: IIRC, writing the traces out should be a matter of writing the test case you care about, ensuring it has appropriate gdata_test_mock_server_start_trace() and uhm_server_end_trace() calls, and then running the test binary with --write-traces
T 1533059244 18<aruiz18>	pwithnall, ah!
T 1533059251 18<aruiz18>	pwithnall, handy!
T 1533059255 18<aruiz18>	will give it a shot
T 1533059272 18<pwithnall18>	depending on how you’ve structured the test, you may be able to run just the case you care about with -p /path/to/test
T 1533059288 18*	aruiz gets down to it
T 1533059310 18<pwithnall18>	but some of the test suites (unfortunately) depend on the authentication test being run first — if so, you won’t be able to use -p, and will have to run the entire test suite, and then discard the changes to all the trace files for the existing tests
T 1533059332 18<pwithnall18>	You may also need to tweak the new trace file manually afterwards to get (for example) common IDs to match the ones generated by the test harnesses
T 1533059382 18<pwithnall18>	as in, the test setup function will often create a load of standard entries to test against, and this will result in some network traces; but then the setup function will be run again for each test and will generate different IDs and overwrite the trace files each time
T 1533059412 18<aruiz18>	git can prolly help with getting rid of the traces I don't want, right?
T 1533059419 18<pwithnall18>	every test which uses the same setup function needs to be manually modified afterwards to use a consistent set of IDs from the trace file produced by the final run of the setup function
T 1533059422 18<pwithnall18>	yes
T 1533059424 18<aruiz18>	as long as I don't commit any replacement to old stuff that should do it
T 1533059429 18<aruiz18>	and then tweak the new one until it works
T 1533059433 18<pwithnall18>	That’s what patch review it for :)
T 1533059437 18<pwithnall18>	*is for
T 1533059438 18<pwithnall18>	but yes
T 1533059444 18<pwithnall18>	bingo
T 1533059459 18<pwithnall18>	The whole process is far from streamlined, but that’s just libgdata for you
T 1533059467 18<aruiz18>	that's okay
T 1533059472 18<pwithnall18>	a teetering pile of technical debt from back when all of the decisions I made were bad, rather than just most of them
T 1533059476 18<aruiz18>	I might spend sometime adding a README or something to the tests dir
T 1533059498 18<aruiz18>	pwithnall, I was rather surprised at the lack of use of g_list_free_full
T 1533059517 18<pwithnall18>	a README would be appreciated if `git grep` doesn’t show up any likely results already
T 1533059529 18<pwithnall18>	(which it doesn’t)
T 1533059535 18<aruiz18>	g_list_foreach and then bastard-cast g_object_unref
T 1533059542 18<aruiz18>	bad pwithnall !
T 1533059542 18<pwithnall18>	aruiz: I think libgdata predates g_list_free_full()
T 1533059546 18<aruiz18>	oh!
T 1533059555 18<aruiz18>	that old?!
T 1533059564 18<pwithnall18>	;)
T 1533059567 18<aruiz18>	that might explain it then
T 1533059581 18<aruiz18>	anyhow, thanks a lot for the tips
T 1533059901 18<pwithnall18>	mclasen: with this MR, I should be able to do the release: https://gitlab.gnome.org/GNOME/glib/merge_requests/211
T 1533059904 18<gitlab-bot18>	GNOME issue (Merge request) 211 in glib "Fix the stupid .Plo file errors" (comments: 0) [Autotools, Opened]
T 1533060475 18<pwithnall18>	ebassi: you may also want to take a look at https://gitlab.gnome.org/GNOME/glib/merge_requests/211. It’s definitely not getting merged without review
T 1533060478 18<gitlab-bot18>	GNOME issue (Merge request) 211 in glib "Fix the stupid .Plo file errors" (comments: 0) [Autotools, Opened]
T 1533060523 18<mclasen18>	I've clicked on merge. not sure what else to do. its all black magic
T 1533060541 18<pwithnall18>	er
T 1533060572 18<pwithnall18>	I guess you could try and remember whether the EXTRA_*_SOURCES stuff was in there for some reason, or whether it dated from a time where automake didn’t support extracting dependencies out of conditionals automatically
T 1533060587 18<mclasen18>	how would anybody remember that ?
T 1533060602 18<pwithnall18>	¯\_(ツ)_/¯
T 1533060622 18<pwithnall18>	I’m moderately confident it’s a correct change, because libgio has been doing something similar for as long as it’s existed
T 1533060625 18<pwithnall18>	and nobody has complained
T 1533060640 18<pwithnall18>	*similar as what libglib does with the MR applied
T 1533060852 18<Company18>	that is very convenient
T 1533060867 18<Company18>	we don't have any bindings that use G_TYPE_DOUBLE or G_TYPE_STRING
T 1533060870 18<Company18>	it's all enums and ints
T 1533060942 18<Company18>	I should add a keybinding to GtkEntry for "set-text" or "insert-text" and bind ctrl-? to insert-text, "¯\_(ツ)_/¯"
T 1533060956 18<Company18>	just for pwithnall and me
T 1533060971 18<pwithnall18>	♥
T 1533061018 18<Company18>	pwithnall: that reminds me: we have signal marshallers for invoking functions from a GValue argument array
T 1533061044 18<Company18>	pwithnall: do you know if anyone ever asked for getting marshallers for invoking functions from a GVariant?
T 1533061094 18<Company18>	to add things like g_signal_emit_variant (object, signal_name, variant);
T 1533061212 18<Company18>	which obviously sounds real fishy already, but wait until I give you g_marshalled_action_new ("(ii)", some_func_taking_2_ints);
T 1533061241 18<pwithnall18>	*screams*
T 1533061251 18<pwithnall18>	Nobody has asked for such a thing, as far as I know
T 1533061267 18<pwithnall18>	It would be pretty limited, since it wouldn’t be able to pass objects/pointers around, which happens pretty regularly
T 1533061279 18<Company18>	yeah
T 1533061287 18<Company18>	reason I'm asking is action signals for keybindings
T 1533061299 18<Company18>	which I want to replace with GActionGroup
T 1533061340 18<Company18>	but if I pass a GVariant as the argument, the callback needs to unpack it
T 1533061348 18<Company18>	and that's not very type-safe and error-prone
T 1533061363 18<Company18>	same as every time you use GAction
T 1533061393 18<Company18>	or GSimpleAction
T 1533061420 18<mclasen18>	i've never found this to be a big problem, tbh
T 1533061439 18<mclasen18>	g_variant_get works just fine when I do dbus calls
T 1533061478 18<Company18>	i've had g_variant_get() fail in exciting ways in render nodes a few times already
T 1533061503 18<Company18>	and that code isn't even used often, let alone released
T 1533061517 18<aruiz18>	pwithnall, interesting..... you're not running the tests at all as of now
T 1533061560 18<baedert18>	The assertions the GVariant API fails now and then are completely useless of course
T 1533061574 18<aruiz18>	pwcjr, https://gitlab.gnome.org/GNOME/libgdata/blob/master/gdata/tests/Makefile.am#L63
T 1533061578 18<aruiz18>	oops
T 1533061580 18<aruiz18>	pwithnall, ^
T 1533061679 18<pwithnall18>	Company: I’m going to ignore ‘fail in exciting ways’ unless there’s an accompanying bug report
T 1533061718 18<pwithnall18>	aruiz: indeed, still waiting for the work which rishi started to be finished
T 1533061773 18*	aruiz looks at rishi 
T 1533061965 18<rishi18>	aruiz: See https://bugzilla.gnome.org/show_bug.cgi?id=684920 and libgdata:wip/rishi/drive
T 1533061966 18<bugbot18>	Bug 684920: Google Documents service, critical, libgdata-maint, NEW , Port to Google Drive API v2
T 1533062008 18<rishi18>	Or git log gdata/tests/documents.c
T 1533062060 18<Company18>	pwithnall: that was about my code
T 1533062080 18<Company18>	pwithnall: which failed because I demarshaled things wrong and then I got error messages that took me a while to understand
T 1533062100 18<pwithnall18>	Company: if you have suggestions for improving the error messages, please file a bug
T 1533062103 18<aruiz18>	rishi, so we're in an intermediate state where we're moving things to the drive API right?
T 1533062104 18<Company18>	because I had changed the expected variant type and packed the right variant
T 1533062113 18<Company18>	but called g_variant_get() with the wrong type still
T 1533062124 18<Company18>	and I want the compiler to tell me
T 1533062151 18<Company18>	actually, not even wrong type, but correct new type, but old args
T 1533062164 18<pwithnall18>	for that you want a compiler extension like Tartan, but it’s not ready for production use (and won’t be, given that I don’t have time to work on it)
T 1533062179 18<Company18>	yeah, or automatic marshalling
T 1533062194 18<Company18>	i guess that needs codegen or a compiler extension, too
T 1533062296 18<rishi18>	Company: Signal marshallers for invoking functions from a GValue argument array is probably used by gdbus-codegen:ed code.
T 1533062321 18<Company18>	fun question: if i start gtk4-widget-factory, where's the focus?
T 1533062322 18<rishi18>	The way that code emits signals is certainly unique. The function name might make you think it's not, but it is.
T 1533062327 18<Company18>	how do I even figure that one out?
T 1533062345 18<mclasen18>	the inspector tells you
T 1533062354 18<Company18>	mclasen: where?
T 1533062358 18<mclasen18>	in the misc tab
T 1533062363 18<mclasen18>	for the window
T 1533062365 18<mclasen18>	it should show you the focus widget
T 1533062379 18<rishi18>	pwithnall: Sorry about those libgdata tests. :(
T 1533062379 18<Company18>	ohhhh right]
T 1533062396 18<rishi18>	pwithnall: It's still on my TODO. Just struggling to bubble to the surface.
T 1533062406 18<pwithnall18>	rishi: I know how it goes :)
T 1533062443 18<Company18>	the togglebutton
T 1533062445 18<Company18>	the togglebutton?
T 1533062458 18<Company18>	why of all widgets does the tooglebutton get focus?
T 1533062531 18<Company18>	where's my focus overlay?!
T 1533062603 18<pwithnall18>	mclasen: release tagged and tarball uploaded; is there anything else which needs to be done for a GLib release?
T 1533062631 18<mclasen18>	push the tag, and run ftpadmin install on the tarball
T 1533062641 18<pwithnall18>	done
T 1533062671 18<Company18>	huh?
T 1533062864 18<Company18>	what even happens when I press tab?
T 1533062870 18<Company18>	there's too many focus vfuncs
T 1533063199 18<Company18>	i'm a genius
T 1533063204 18<Company18>	apparently
T 1533063321 18<Company18>	3db4f805ee0 says other people are as bad at copy/paste as I am
T 1533063386 18<Company18>	due to that our tab order was y position, width instead of y position, x position
T 1533063397 18<Company18>	which explains why in hboxes the smallest child got focus first
T 1533063417 18<Company18>	which very much explains the erratic focus behavior I saw
T 1533063425 18<Company18>	and why the togglebutton in widget-factory got focused
T 1533063584 18<Company18>	I still want a gtk_widget_get_next_focus_widget() function
T 1533063615 18<Company18>	ie "pretend you have focus and somebody presses tab/shift-tab/left/..., who gets focus next?"
T 1533063649 18<Company18>	that would be enough to build a full focus chain, right?
T 1533063738 18<Company18>	take the focused widget, loop through the chain until you're back at the focus'd widget (or any other previous widget in the case of focus not perfectly looping)
T 1533063823 18<Company18>	and then you can draw arrows between the widgets
T 1533063837 18<Company18>	for added fun, you do that inside a fishbowl with focusable widgets
T 1533063917 18<zbrown[m]18>	Something like tabindex? (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
T 1533064215 18<Company18>	"Note: The maximum value for tabindex is 32767. If not specified, it takes the default value 0."
T 1533064222 18<Company18>	says something about how old that property is
T 1533064272 18<Company18>	but I was more interested in visually representing actual tab order for *all* widgets
T 1533064283 18<Company18>	so you can see at a glance what
T 1533064288 18<Company18>	's going on
T 1533064452 18<HarishFulara0718>	Hi all, I want to know when the user clicks on the corner of a window to resize it. Is there some signal I can connect to?
T 1533064454 18<zbrown[m]18>	Definetly pretty cool. Possibly better as a 'focus-next' property? But would it's type be Widget, int (ala tabindex) or string (widget name)
T 1533064477 18<zbrown[m]18>	I would argue for widget name
T 1533064506 18<Company18>	zbrown[m]: i'm not interested in setting things, i'm interested in inspecting things
T 1533064532 18<Company18>	zbrown[m]: take a random app - if you pressed tab 1489 times, which widget would be focused?
T 1533064589 18<Company18>	so I'm imagining something like https://www.dummies.com/wp-content/uploads/497588.image1.jpg - just that those icons display the number of tab presses to reach them
T 1533064634 18<Company18>	(screenie is supposed to show the visual idea, it's actually not focus related)
T 1533064676 18<Company18>	(and I want consecutive numbers, so the widgets are numbered 1, 2, 3, 4, 5, ...)
T 1533064690 18<zbrown[m]18>	Something fun for inspector sure, but this could be useful to be able to set as well
T 1533064712 18<Company18>	depends
T 1533064723 18<Company18>	for a start, widgets have no names, so setting widget names won't work
T 1533064741 18<zbrown[m]18>	+1 on consecutive numbers when displaying, anything else is stupid (but do they start at 0....)
T 1533064747 18<Company18>	if you allow setting widgets, you need to make sure the widget is even in the same window
T 1533064760 18<Company18>	and visible
T 1533064761 18<Company18>	and focusable
T 1533064787 18<Company18>	and you need to make sure it stays that way
T 1533064795 18<zbrown[m]18>	gtk_widget_set_name
T 1533064834 18<Company18>	and now you're in the business of making up names
T 1533064843 18<baedert18>	and making sure they are unique
T 1533064847 18<Company18>	that are opfeully unique
T 1533064857 18<baedert18>	we already have focus chains
T 1533064864 18<baedert18>	they suck but they exist
T 1533064866 18<Company18>	and ensuring that if 2 widgets want to refer to a 3rd widget they don't override the names they use
T 1533064927 18<Company18>	and yeah, we have focus chains
T 1533064939 18<Company18>	and lots of vfuncs to move focus
T 1533064981 18<mclasen18>	baedert: focus chains are only an optional override though
T 1533065003 18<mclasen18>	the real thing is gtk_widget_child_focus
T 1533065010 18<Company18>	focus chains also should probably die
T 1533065014 18<mclasen18>	which is unfortunately 'immediate mode'
T 1533065023 18<mclasen18>	no way to ask ahead of time
T 1533065030 18<Company18>	mclasen: we can change that though?
T 1533065080 18<mclasen18>	probably, with some refactoring
T 1533065113 18<Company18>	can we remove focus chains?
T 1533065132 18<Company18>	in favor of "write your own container if you need it" >
T 1533065136 18<Company18>	?
T 1533065166 18<Company18>	only user of focus chains in the GTK tree is testgtk.c
T 1533065214 18<mclasen18>	if you don't find any significant users, sure
T 1533065287 18<Company18>	because I have gimp checked out, i grepped it
T 1533065292 18<Company18>	and it's used twice
T 1533065299 18<Company18>	both times with GimpSizeEntry
T 1533065331 18<Company18>	and mitch can just have a custom setter there
T 1533065343 18<mclasen18>	if there's a working alternative for controlling focus in custom containers, I'm fine with removing it
T 1533065353 18<Company18>	it's a GtkTable subclass, so it needs refactoring anyway ;)
T 1533065378 18<Company18>	of course there is: the child_focus vfunc/signal
T 1533065458 18<baedert18>	mclasen: It's also only for containers
T 1533065788 18<Company18>	oh wow
T 1533065794 18<Company18>	you can put a focus chain into ui files
T 1533065901 18<Company18>	which is used once in the whole world
T 1533065912 18<Company18>	i guess
T 1533065914 18<Company18>	in testsuite/gtk/ui
T 1533066422 18<Company18>	 :q
T 1533066428 18<Company18>	yay!
T 1533068069 18<HarishFulara0718>	Anyone?
T 1533068069 18<HarishFulara0718>	I want to know when the user clicks on the corner of a window to resize it. Is there some signal I can connect to?
T 1533068294 18<Company18>	fun question about magic:
T 1533068309 18<Company18>	is it valid to call g_variant_builder_clear() after g_variant_builder_end()?
T 1533068314 18<Company18>	Or is it either/or?
T 1533068565 18<halfline18>	presumably g_variant_builder_end() calls g_variant_builder_clear() internally, so really the question is probably can you call g_variant_builder_clear more than once safely.
T 1533068570 18<halfline18>	presumably yes 
T 1533068605 18<halfline18>	oh docs say
T 1533068606 18<halfline18>	This function leaves the GVariantBuilder structure set to all-zeros. It is valid to call this function on either an initialised GVariantBuilder or one that is set to all-zeros but it is not valid to call this function on uninitialised memory.
T 1533068640 18<halfline18>	so it's okay to call g_variant_builder_clear more than once, so it probably okay to call g_variant_builder_clear after g_variant_builder_end
T 1533068659 18<halfline18>	my answer: pointless, but valid
T 1533068985 18<Company18>	halfline: for (some_loop) { /* ... */ if (done_parsing_successfully) add_result (g_variant_builder_end()); } g_variant_builder_clear (); return;
T 1533069011 18<Company18>	missing a break; after the add_result() and I should use multiple lines
T 1533069018 18<Company18>	for (some loop)
T 1533069018 18<Company18>	  {
T 1533069024 18<Company18>	    /* ... */
T 1533069036 18<Company18>	    if (done_parsing_successfully)
T 1533069037 18<Company18>	       {
T 1533069050 18<Company18>	        add_result (g_variant_builder_end());
T 1533069054 18<Company18>	        break;
T 1533069056 18<Company18>	      }
T 1533069057 18<Company18>	  }
T 1533069063 18<Company18>	g_variant_builder_clear();
T 1533069065 18<Company18>	return;
T 1533069102 18<Company18>	so you can exit for cleanup at any point and just clean up the builder - evn on success
T 1533069145 18<halfline18>	sounds good
T 1533073913 18<mitch18>	mclasen: what are you guys talking about?
T 1533073930 18<mitch18>	GimpSizeEntry? The monster?
T 1533073943 18<mclasen18>	mitch: recently, this channel was dominated by input: shortcuts and focus
T 1533073956 18<mitch18>	please by all means ignore that shit for all api decisions
T 1533073978 18<mitch18>	heh ok that's a nasty one
T 1533073982 18<mclasen18>	GimpSizeEntry came up because it uses a focus-chain
T 1533073984 18<mitch18>	ognore
T 1533073991 18<mclasen18>	but we already decided to ignore that
T 1533073994 18<mitch18>	some places in gimp use focus chain
T 1533074016 18<mitch18>	good :)
T 1533074168 18<mitch18>	mclasen: also, GtkTable is entirely gone from gimp master, i hope you weren't looking at branches :)
T 1533074179 18<mclasen18>	it was Company
T 1533074469 18<mitch18>	mclasen: which is a true statement in most cases :P
T 1533074518 18<mitch18>	heh
T 1533074638 18<feaneron18>	howdy mitch, how's gimp port to gtk3 going?
T 1533074671 18<mitch18>	i'd call it done except GtkUIManager
T 1533074675 18<mitch18>	which is nasty
T 1533074728 18*	Company is trying to deprecate APIs faster than mitch can port away from them
T 1533074736 18<feaneron18>	fantastic. is there a flatpak nightly to test?
T 1533074775 18<mitch18>	yea
T 1533074781 18<mitch18>	i think
T 1533074786 18<mitch18>	hmm
T 1533074826 18<mitch18>	Company: i know, evil man
T 1533126306 20*	Disconnected (20Connection timed out)
T 1533126319 19*	Now talking on 22#gtk+
T 1533126319 22*	Topic for 22#gtk+ is: GTK now officially migrated to https://gitlab.gnome.org/GNOME/gtk
T 1533126319 22*	Topic for 22#gtk+ set by 26ebassi_ (24Thu May  3 04:39:59 2018)
T 1533126328 18<Company18>	leio: I don't think anybody set out to make librsvg secure
T 1533126347 18<Company18>	leio: it's just that Rust is advertised as secure, so a Rust rewrite can leech off of that
T 1533126349 18<leio18>	hoping it will be thanks to rust promises then?
T 1533126364 18<leio18>	(have to handle all cases explicitly, compiler will error, etc)
T 1533126365 18<Company18>	no
T 1533126398 18<Company18>	projects that are made secure by the maintainer learning to program in a new programming language
T 1533126402 18<Company18>	instead of caring about security
T 1533126411 18<Company18>	has never made any software secure I think
T 1533126469 18<ebassi18>	https://people.gnome.org/~federico/news-2016-10.html#25 — It's a combination of the two: learning Rust, and porting tons of insecure C mini parsers to a safer language
T 1533126484 18<ZachBacon18>	I actually recently had to make my own project secure. had a vulnerability in my elf parser that could lift information from the host computer. It was harder due to the hardened flags my project uses, but not impossible.
T 1533126521 18<Company18>	the first thing you do if you care about security is spend a few months at throwing a fuzzer at your project
T 1533126532 18<Company18>	ususally, then you weep and stop caring about security
T 1533126550 18<ebassi18>	"Recently someone did fuzz-testing with some really pathological SVGs, and found interesting explosions in the library."
T 1533126632 18<Company18>	as in: i did not pursue it further, i just noted "insecurity" as an argument for any change I'm gonna do
T 1533126704 18<ZachBacon18>	I actually considered switching to rust for my project. but once you realize nothing is ever truly secure, I just stuck with c++ and just fixed the issue
T 1533126736 18<Company18>	fwiw, it's not hard to make librsvg code more secure by rewriting it
T 1533126803 18<Company18>	but that doesn't mean anybody used that as a reason for changes, it only means you can apply that reason retroactively if you need one
T 1533126930 18<Company18>	if you care about security, run a vm somewhere that people submit svg files to that then cgi-execs rsvg-convert with it and gives you back the image
T 1533126942 18<mclasen18>	my assumption is that rustification was done because federico wanted to learn rust
T 1533126976 18<Company18>	and give everybody $5000 who can email the rsvg-convert binary running on the server to you
T 1533127082 18<Company18>	mclasen: yeah, that's my assumption, too. But that can result in all sorts of good and bad changes to librsvg itself.
T 1533127100 18<mclasen18>	sure
T 1533127123 18<Company18>	and initially the changes are all bad, because it's now using 2 programming languages, marshalling everything through bindings and the new code is written by somebody without a clue about the language he's using
T 1533127144 18<Company18>	it's like me deciding to rewrite Harry Potter in Chinese because I want to learn the language
T 1533127152 18<Company18>	it's probably not gonna make the book better
T 1533127166 18<Company18>	wrong example
T 1533127182 18<Company18>	it's like me deciding to rewrite 50 Shades of Grey in Chinese because I want to learn the language
T 1533127212 18<Company18>	it's probably still not gonna make the book better
T 1533127243 18<Company18>	at least not until my Chinese is good enough to actually know what I'm talking about
T 1533127432 18<ebassi18>	"marshalling everything through bindings" — You mean literally exposing a C ABI from Rust, and consuming it from C?
T 1533128410 18<feaneron18>	garnacho: is it possible to make a GtkGestureMultiTouch stop event propagation?
T 1533128472 18<ernestask18>	claiming the event sequence should do it
T 1533128724 18<feaneron18>	ernestask: and... how does that work? can't find relevant docs in https://developer.gnome.org/gtk4/3.94/
T 1533128753 18<ernestask18>	feaneron, one way is to call gtk_gesture_set_state()
T 1533128787 18<baedert18>	argh the widget gallery is such a shit show
T 1533128793 18<ernestask18>	with GTK_EVENT_SEQUENCE_CLAIMED if you handled the press and want to stop propagation
T 1533128842 18<ernestask18>	https://developer.gnome.org/gtk4/3.94/GtkGesture.html
T 1533128892 18<feaneron18>	thanks
T 1533128906 18<feaneron18>	for some reason, i skipped GtkGesture when inspecting the docs
T 1533129409 18<mclasen18>	baedert: how so ?
T 1533129439 18<baedert18>	mclasen: They all look outdated
T 1533129443 18<baedert18>	and the drop shadow is meh
T 1533129466 18<baedert18>	Some of them don't tell you what you're looking at either like the GLArea one
T 1533129497 18<ernestask18>	or the action bar
T 1533129540 18<baedert18>	at least the GtkWindow one is always correct
T 1533130483 18<feaneron18>	if I claim a GtkGestureMultiPress when 'pressed' is emitted, will it still bubble up 'released'?
T 1533130641 18<mclasen18>	baedert: don't think they get regenerated automatically
T 1533130652 18<mclasen18>	that could use some love
T 1533130697 18<baedert18>	I thought the widgetshooter or something tool does that
T 1533130703 18<pwithnall18>	🔥🔥🔥🔥
T 1533130788 18<mclasen18>	yes, but it does not get run automatically
T 1533130796 18<mclasen18>	and that tool should probably be redone for gtk4
T 1533131128 18<garnacho18>	feaneron: not unless reset. the idea with sequence states is that once you claim, events don't go any farther. i.e. widgets beyond will get no release without press or other inconsistent state.
T 1533131412 18<feaneron18>	garnacho: i'm investigating something here... looks like the textview is having problems with the multipress gesture
T 1533131464 18<feaneron18>	garnacho: GtkTextView does claim the sequence when 'pressed' is emitted, but it still propagates and GtkListBox emits 'row-activated'
T 1533131861 18<garnacho18>	feaneron: unexpected...
T 1533131915 18<feaneron18>	i see what's going on
T 1533131941 18<feaneron18>	GtkListBox emits the 'row-activated' on 'released', which is not captured by GtkTextView
T 1533132307 18<exalm[m]18>	Is GskRoundedRect missing from https://developer.gnome.org/gsk4/unstable/?
T 1533132327 18<baedert18>	yes
T 1533132433 18<mclasen18>	your chance to write an easy patch!
T 1533132957 18<exalm[m]18>	wait, there are comments though
T 1533133154 18<exalm[m]18>	oh, I see what's missing
T 1533133510 18<HarishFulara0718>	Does GTK peovide any signal to know when I am done resizing a window?
T 1533133541 18<baedert18>	Nope
T 1533133639 18<HarishFulara0718>	Whats the best way to achieve this? Something like this - https://stackoverflow.com/a/19078442
T 1533133758 18<solid_black18>	HarishFulara07: why would you want to do that?
T 1533134442 18<HarishFulara0718>	solid_black: When you resize gnome-shell window, it shows the current size of the shell in a Gtk.Overlay. I want to implement something like that. For that, I want to know when the resizing starts and when it finishes...
T 1533134817 18<solid_black18>	HarishFulara07: the thing is, GTK itself cannot know if its window is being resized, and what kind of interactive resizing the compositor in use even implements (e.g. the compositor could pop up a dialog asking the user to input the desired size). When you mouse-down on a window edge, GTK invokes xdg_toplevel::resize(), and it just gets a bunch of ::configure() events after that. there's no 
T 1533134820 18<solid_black18>	indication of the resize being finished
T 1533134885 18<solid_black18>	HarishFulara07: though one could hope you'll get a wl_pointer::enter() event immediately after the resize is finished
T 1533134942 18<solid_black18>	harishfulara07: of course that's not always true, e.g. dragging a maximized window between monitor in GNOME Shell overview resizes it, but does not emit wl_pointer::enter (I hope)
T 1533135010 18<mclasen18>	that sort of popup is really the compositors responsibility
T 1533135023 18<mclasen18>	trying to implement it client-side is an only going to lead to frustration
T 1533135073 18<solid_black18>	mclasen: yes (and I mean it, yes), but the compositor can't know where in the UI to place it
T 1533135085 18<solid_black18>	guess that doesn't matter because it's small enough not to cover much
T 1533604944 19*	Now talking on 22#gtk+
T 1533604944 22*	Topic for 22#gtk+ is: GTK now officially migrated to https://gitlab.gnome.org/GNOME/gtk
T 1533604944 22*	Topic for 22#gtk+ set by 26ebassi_ (24Thu May  3 04:39:59 2018)
T 1533604947 18<Company18>	lots of amazing stuff happening behind your back and no API that makes it obvious what's going on
T 1533604971 18<hergertme18>	i wish we did a lot more stuff with static data though
T 1533604983 18<hergertme18>	we allocate so much stuff
T 1533605011 18<Company18>	a problem is that we haven't established methods on how to deal with static data
T 1533605025 18<Company18>	so people alwys allocate everything, because they know how to do that
