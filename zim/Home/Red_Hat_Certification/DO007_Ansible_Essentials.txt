Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-04-11T16:21:42-04:00

====== DO007 Ansible Essentials ======
Created Wednesday 11 April 2018

====== DO 007 Stuff ======

===== Overview: =====
Ansible
	- Automation platform.
	- Yaml (playbook).
	- Simple, human readable automation.
	- No special coding skills.
	- Agent less. (works for windows/net devices)
	- Works with existing toolkits.
	- Batteries included. 450 modules included. 
		 Cloud, System, Network, Packaging, Web Init, Utils, Source Control.
	- Whole package:
		- Config management	
	* Packages, files, services, users.
		- Provisioning
		- Multi-tier orchestration.
		- App deployment
	* Continious Integration.

	- Installation:
		 pip install ansible
		 sudo yum install ansible 
		 sudo apt-get install ansible

How it works:
	- Playbook
	* Written in Yaml
	* Tasks (executed sequentially)
	* Modules (accept paramaters, run code)
	* Inventory
		* Hosts (ip/dns)
		* Src: Cloud or network source. (OpenStack, VMware)
	* Plugins
		* extend functionality.

Modules: Commonly used:
- apt/yum
- ping
- uri
- copy
- file
- git
- ... (see docs -> module index).

	Special modules:
		command   (redirects don't work)
		shell
	   script
		raw  (raw ssh command without python. Useful for machines w/o python or to install python, or for windows).


===== Ad-Hoc Commands =====
# Check all my inventory hosts are ready to be managed by ansible
$ ansible all -m ping    #returns pong.

# Run uptime command in my 'web' group:
$ ansible web -m command -a "uptime"

# collect and display the discovered for the localhost.
$ ansible localhost -m setup
  <settings, e.g ipv4 ...>

**Inventory:**
	- Hosts, static or dynamic, group sources, 
	- e.g basic static
		10.42...
		20.12..
	- e.g 2 groups:
		[control]
		control ansible_host=10.42.0.2
		
		[web]
		node-1 ansible_host=10.442.0.6
		
		[haproxy]
		haprxy ansible_host=10.54...
		
		[all:vars]
		ansible_user=vagrant
		ansible_ssh_private_key_file=~/.vagrant.d/insecure_key

# Test that all your machines are accessible:
$ ansible all -i hosts -u vagrant -m **ping**                    # -i = inventory. -u = user -m ping

# Gather facts: (more info than 
$ ansible all -i hosts -u vagrant -m **setup**

# Install packages:
$ ansible webservers -i hosts -u vagrant -m yum -a "name=httpd state=**present**" -b         # -a = argument  -b = escalate to root.

note: "changed" can be false if nothing was changed.

# Remove package:
$ ansible webservers -i hosts -u vagrant -m yum -a "name=httpd state=**absent**" -b


===== Playbooks =====
Variables:
	- take into account differences among servers.
	- kept in hosts/groups files.
	- for paths, package versions,
	- Precedence:
	  (Important to know where to define vars)
	1. Extra vars
	2. Task vars (only for the task)
	3. Block vars (only for tasks in the block)
	4. Role and include vars
	5. Play vars_file
	6. Play vars_prompt
	7. Play vars
	8. set_facts
	9. Registered varsHost facts
	10. Host facts
	11. Playbook host_vars
	12. Playboook group_vars
	13. Inventory host_vars
	14. Inventory group_vars
	15. Inventory vars
	16. Role defaults

	-e.g:
		file : a directory should exist
		yum : a package should be installed
		service : a service should be running.
		template : render a cnofig file from template
		get_url : Fetch an Archive file from a URL
		git : Clone a source code repository.
		
**Example task in a play:**
tasks:
	- name: add cache dir		# good practice to name tasks.
	  file:				# file module
		path: /opt/cache	     # arguments.
		state: directory	     # create it.
	
	- name: install nginx
	  yum:
		name: nginx
		state: latest
	
	- name: restart nginx
		service:
			name: nginx
			state: restarted

**Handler Tasks (special tasks) (in a play).**
	- runs on notifications.
	- triggered when there is a change in state.
	- run only once at the end of the task, even if triggered multiple times.
	
example:
tasks:
...
- name: install nginx
  yum:
	name: nginx
	state: latest
  **notify: restart nginx  # We add notify here.  If this returns 'changed' triggered handler. #> at the end, restart gnix.**

handlers:
	- name restart nginx
	  service:
		  name: nginx
		  state: restarted




**PLAYS: **Ordered set of tasks.
**Playbook**: Contains one or more plays.

**Example playbook:**
---
- name: install and start apache    #name of play.
  hosts: web
  vars:
	http_port: 80
	max_clients: 200
  remote_user: root

  tasks:
  - name: install httpd
	yum: pkg=httpd state=latest			#pkg or name are interchangable.
  - name: write the apache config file
	template: src=/srv/httpd.j2 dest=/etc/httpd.conf
  - name: start httpd
	service: name=httpd state=started


**More example: site.yml**
---      # optional. 
- name: install and start apache
  hosts: webservers			#groups as per 'hosts' definition.
  remote_user: vagrant
  become: yes		# escalate.

  tasks:
  - name: install epel repo
	yum: name=epel-release state=present

  - name: install python bindings for SELinux
	yum: name={{item }} state=present    #item is a variable as part of the loop. No spaces.
	with_items:					
	- libselinux-python
	- libsemanage-python

  - name: test to see if SeLinux is running.
	command: getenforce
	register: sestatus
	changed_when: false    #change variable always false.

  - name: install apache
	yum: name=httpd state=present

  - name: start apache
	service: name=httpd state=started enabled=yes
        

ansible-playbook -i hosts site.yml


===== Roles (intro) =====
Break down a playbook, to allow bits to be re-used.

site.yml
roles/
	common/    #ran on all machines.
		files/
		templates/
		tasks/
		handlers/
		vars/
		defaults/
		meta/
	webservers/
		files/
		templates/
		tasks/
		handlers/
		vars/
		defaults/
		meta/

# how to call:
# site.yml
---
- hosts: web
  roles:
	- common
	- webservers
	
See: http://galaxy.ansible.com   -> discover roles.

===== Create roles with galaxy command =====
# how to create role structure.

mkidir roles
cd roles
ansible-galaxy init --help
ansible-galaxy init common
ansible-galaxy init apache    # genera
ls apache/
  README.md   handles  templates  defaults  meta  tests  files  tasks  vars
ls common/tasks/
  main.yml

===== Breaking an Existing Playbook into a Role =====
cd roles/common/tasks
touch selinux.yml
touch ntp.yml
vim selinux.yml

---       # note, no 'tasks' tag.
  - name: install python bindings for SELinux
	yum: name={{item }} state=present    #item is a variable as part of the loop. no spaces.
	with_items:					
	- libselinux-python
	- libsemanage-python

  - name: test to see if SeLinux is running.
	command: getenforce
	register: sestatus
	changed_when: false    #change variable always false.


vim ntp.yml
---
- name: install ntp
  yum: name=ntp state=present

- name: configure ntp file
  template: src=ntp.conf.j2 dest=/etc/ntp.conf
  notify: restart ntp

- name: start ntp
  service: name=ntpd state=started

cd roles/common/handlers
vim main.yml
---
- name: restart ntp   #should be same as notify arg.
  service: name=htpd state=restarted

cd /roles/common/templates
vim ntp.conf.j2
  ...
  server { { variable }}    # Variables can be inside text files.
  ...

cd /group_vars/
vim all
---
# variables here are applicable to all host groups

httpd_port: 80
ntpserver: 192.168.1.2

cd /roles/common/tasks
vim main.yml
---
- name: install epl repo
  yum: name=epel-release state=present

- include: selinux.yml     # include the files we created earlier.
- include: ntp.yml

cd /roles/apache/tasks
vim main.yml
---
- name: install apache
  yum: name=httpd state=present

- name: create sites directories
  file: path={ {item } } state directory
  with_items: "{ { apache_dirs } }"

- name: start apache
  service: name=httpd state=rtarted enabled=yes

- name: copy an index.html
  template: src=index.html.j2 dest={ { apache_docroot } }/index.html

- name: copy httpd conf
  template: src=httpd.conf-{ { ansible_os_family } }.j2 dest={ { apache_config } }     #target mixed inventory. (RHEL/Debian).
  notify: restart apache

- name: start apache
  service: name=httpd state=started enabled=yes


cd /roles/apache/templates
vim index.html
 { { apache_test_message } } { { ansible_distribution } } { { ansible_...} } <br>
  current host: { { ansible_hostname } } <br>
Server list: <br>
{% for host in groups.webservers %}
{ { host } } <br>
{% endfor %}

vim httpd.conf
#...
<Directory />
 ... 

vim /roles/apache/handlers/main.yml
â€”
- name: restart apache
  service: name=httpd state=restarted 



===== Adding roles =====
ansible-galaxy init web
cd /roles/web/tasks
vim main.yml
---
- name: install git
  yum: name=git state=present

- name: checkout lameapp
  git: repo=https://github.com/jsmartin/lameapp.git version="{ {lameapp_version|string } }"  #|string = cast.

- name: set permissions on the app
  file: name=/var/www/lameapp/lame.py mode=0755

- name: add apache config file
  copy: src=lameapp.conf dest={ { sites_available } }
  notify: restart apache

- name: link app config
  file: src="{ {sites_available } } /lameapp.conf" dest={ { sites_enabled} }/lameapp.conf state=link

- meta: flush_handlers   #run the handler now.

- name: check for proper response 
  uri:
	url: http://localhost/lame
	return_content: yes
  register: result    #result is variable holding return value.
  until: '"Hello Moon" in result.content'

vim /roles/web/files/lameapp.conf
  <directory ...


.... 

===== Utilizing Roles in your Main Playbooks =====

site.yml
---
- name: apply the common configuration to all hosts
  hosts: all
  remote_user: vagrant
  become: yes

  roles:
  - common

- name: apply the database configuration
  hosts: dbservers
  ...

  roles:
  - mariadb

- name: apply the apache and the web roles
  hosts: webservers
  ...

  roles:
  - apache
  - web

- name: apply the lb configuration
  hosts: lbservers
  remote_user: vagrant
  become: yes
 
  roles:
  - haproxy
 
ansible-playboook -i hosts site.yml
....

===== Overview of Ansible Tower =====
- Projects
	manual: /var/lib/awx/projects   Playbook_directory=myProject

- Job template:
	pre-configured template playbook.

- Teams:
  * permission structure. Jobs/inventory.



