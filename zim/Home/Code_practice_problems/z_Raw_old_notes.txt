Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-04-17T20:07:18-04:00

====== z Raw old notes ======
Created Tuesday 17 April 2018

Created Tuesday 17 April 2018

//-------------  Theory
- 4 principles of OOP
  - Encapsulation
  - Abstraction
  - Inheritance
  - Polymorphism    (multiple methods with same name)

- Sorting Algorithm Theory
  - Simple:
	- Selection Sort  O(n^2) (best/worse)
	  * pick smallest each time.
	  * very ineffective.
	- Insertion Sort Best: O(n)  Worst: O(n^2)
	  * puts element into the right place.
	  * most effective on sorted lists O(n)

  - Effective
	- Merge Sort    O(n log n)
	  * divide and conquer. Base case 2 elements.
	  * merge() doMerge(ar, from, to), merge(..)
	  * merge(..) uses array for copy.
	- Quick Sort    Wrst: O(n^2)  Avrg: O(n log n)
	  * can be faster than merge/other sorts on average.
	  * Functionality:
	* base cases = length of array = 1 or 0;
	* select a pivot (at random is best)
	* copy into left/right array
	* recurse on left/right
	* combine left+pivot+right & ret.
	  * good choice of Pivot is important.
		% left = bad for sorted lists.
		% random is usually best> 1.368 n log n
	- Heap Sort     Wrst: O(n log n)   Bst:O(n)
	  + in-place sort. no stack issues due to deep recursion.
	  - complex / slower than quick sort in general.
	  * Functions:
		parent = floor { (i-1) / 2 }         0
		leftChild = parent*2 + 1           1   2
		rightChild = parent*2 + 2        3  4  5 6
		  mnemonic: write '0,1,2,3,4,5,6' as heap, work backwards.
	  * Properties:                                      10
		% Max-Heap = biggest value at the top   >:    5     8
													 3  1   7 4
	  * Method:
		1) Make Heap
			- traverse from middle (in reverse) to root, call max-Heapify() on i
			  (middle = parent of last child)
			  - FUNC: max-Heapify(array, i, last)
				- at each node, swap with biggest child (if child bigger)
				  % determine which child is bigger. set 'child' to biggest.
				- parentIndex = formerBiggest childIndex
				  childIndex = child of new parentIndex
				- while loop till childIndex is <= last element.
		2) Extract Max for array, place at end
		 // idea is that we move first to end. As first is biggest, now
		 // biggest will be at the end.
		  - for array.len-1 itterations,
		  - swap first and last element #biggest will be at the end now.
		  - increment last (so that we don''t heapify to sorted number)
		  - max-Heapify() on first number, with last limited.
			  //max-heap property is broken. Need to call max-heapify to fix it.

  - Distribution Sorts
	- Radix Sort O(wn)
		Sort by digits (10_ , 1_0).  w = word length.
		Works well so long as word is constant & big n.
		e.g sorting large amount of Persons by Age. Age is small.

- Trees:
  - Tree Traversal Orders:
	* In Order   (left, data, right)
	* Pre Order  (data, left, right)
	* Post Order (left, right, data)
  - Binary Search
	* Useful for binary search or during tree construction etc..
	* In general, you constrain upper and lower bounds.
	  i.e, you do not divide by 2, this leads to loops.
	  usually: middle = (lower+upper)/2;
	* then to recurse deeper, you go with:
	  left = lower, middle-1
	  right = middle+1, upper
	* instead of recusing, you could while loop  lower <= upper.

  - Tree types:
	- Tries:
	  * each node stores a letter
	  * many children
	  * following a path forms a word

- Graph Theory:
  - Definitions:
	V_i = Verticies (node)
	E_i,j = Edge
	P(v1,v2...vi) = path.
  - Representations
	* Adjacency list
		a -> b,c      b ->c      c->a,b
		++ Sparse graphs use little space.
	* Adjacency matrix
	   ( 0 1 )  a <-> b   Represent links in a 2d array.
	   ( 1 0 )            ++ fast lookup. -- lots of space wasted for lrg graphs
	* Incidence matrix
	  maps verticies to edges. Useful to see if a vertex is connected to a
	  certain edge.
		rows = verticies
		columns = edges.

  - Dijkstras     O(|E|+|V|log|V|)
	* single source, single destination shortest path
	(-) does not handle negatives
	(+) faster than Bellman Ford
	- algo: (see wiki for illustration)
	  - start at source, all neighbouring nodes have a distance of INF to them.
	  - inspect distance to every neighbouring node. label them as such.
	  - mark start node as 'out'
	  - find neighbouring node with smallest distance, use it as new start
	  - repeat till destination is found.

  - Bellman Ford  O(|V||E|)
	* single source, all destination shortest path
	(+) handles negatives, more versitile
	(+) shortest path to all nodes, not just a single like Dijkstra
	(-) slower than dijkstras
	* negative loops cause 'no cheapest path', bellman reports these.
	- algorithm
	  - table with source=0,    B=∞, C=∞,...D=∞
	  - V verticies = V-1 iterations.
		- during every iteration,inspect each node in order,
		  see shortest path to neighbour, update if shorter
		- if during an iteration, no nodes are updated, we are done.
		  https://www.youtube.com/watch?v=obWXjtg0L64

  - Spanning Trees
	- Minimum Spanning Tree
	  - Prims Algoritm
	* Greedy, start at a node, pick the shortest edge.
	* From all possible edges, pick the next shortest edge.
		(*) run time varies depending on structure used. In general: O(|V|2)

- Mathy Theroy bits:
	* log n:    2^x = n <=> x = lg n
	* Probability
	  - P (A and B) = P(B given A) P(A)
		P (A and B) = P(A)P(B)      if A & B are independent.ie P(a givn b)=P(b)
	  - P (A or B) = P(A) + P(B) - P(A and B)
	  ~P(A) = 1 - A







//-------------- CODE
- Numbers
  int i = 0xFA ; hex
  int i = 0xFA_CA_DE_0A;  undescores allowed.
  int i = 0b001 ; binary
  long l = 123.....56L;
  double d = 12.3;
  double d = 1.23e2; scientific notation.
  float f = 12.3f;

- Math Code bits:
  *   Math.pow(2,n) //power
  *   Math.min(a,b)

- Basic constructs
  * For loops
	  for (init; end-condition; post)  {..}
	  // continue while end-condition is true
	  // end cond is checked at start of every iteration.
  * Tenary if :   extr ? true : false
  * Varargs
	  // Treated as an array. e.g int nums []
	  foo(1,2,3,4)
	  public void foo(int... nums) {
		for (int i : nums) {...


- Arrays
	int Ar [] = {1,2,3};      int Ar [] = new int [10];
	Ar[0] = 1;                Ar.length
	for (int i : Ar ) {..}
	  //Static functions:
	  Arrays.binarySearch(Ar, val);  Array.equals(Ar, Ar);
	  Arrays.sort(Ar)    //Quick sort with dual pivot.
	  Arrays.toString(Ar);  //for printing.
	  Arrays.equals(Ar1, Ar2)
	  System.arraycopy(src, srcPos, dest, destPos, count);

- Lists
  - Doubly Linked List:
	List <Ob> ll = new LinkedList (); //Fast add/remove.Slow Getting. get()=O(n)
	  - Queue mehAl:
	  - Queue Backed by LinkedList:
		 Queue<Ob> myQ = new LinkedList<Ob>();
		 myQ.add(i)   myQ.peek() //peak at next person in line
		 myQ.remove() == myQ.poll()  //remove & return back of line.
		 while (myQ.size())  //Note, size shrinks as we remove elments
			print(myQ.poll());

  - Dynamically resizing Array:
	List <Ob> ll = new ArrayList ();  // Fast getting. Slow add/removal.

	//One line filler:
	List<Integer> numsL = new ArrayList<Integer>(Arrays.asList(3,2,5,4,1,0,8,9))

	//Methods:
	LinkedList <Object> ll = new Linkedlist<>();
	ll.add(Ob); ll.add(i, Ob), ll.addFirst(Ob), ll.addLast(Ob)
	ll.addAll(Collection); ll.addAll(i, Collection);
	ll.set(i, Ob);
	ll.get(i);  ll.getFirst(), ll.getLast();
	ll.remove(Ob), ll.remove(i), ll.removeFirst(), ll.removeLast(); //ret & rm
	ll.contains(Ob);
	ll.indexOf(Ob), ll.lastIndexOf(),
	ll.size()
	Object [] stuff = ll.toArray();

  - Nested Arrays or Lists:
	// When initializing a nested structure:
	ArrayList<ArrayList<Ob>> outer = new ArrayList<ArrayList<Ob>>();
	// You need to initializethe inner guys also.
	ArrayList<Ob> inner = new ArrayList<Ob> ();
	outer.add(inner);

  - Arrays to ArrayList
	  * Meth1: use Integer array. intList 'writes through' to intArray
		Integer[] intArray = {1, 2, 3, 42}; // cannot use int[] here
		List<Integer> intList = Arrays.asList(intArray);
	  * Meth2: for-loop for int [] array. (no other way)
		List<Integer> intList = new ArrayList<Integer>(intArray.length);
		for (int i=0; i<intArray.length; i++)
		  intList.add(intArray[i]);

- Collection methods
	* Collection.sort ()   //merge sort stuff.

- Sets  (Value)     * no duplicates
	//Shared methods:
	Set<Integer> mySet = ..
	set.add(Ob)
	set.remove(Ob)   set.clear()
	set.isEmpty(Ob)  set.contains(Ob)
	set.size()

	//Tree Set   //Sorted ascending order.
	tr = new TreeSet<Integer> ();
	tr.first()   tr.last();
	tr.iterator()  tr.subset(Ob from, Ob to)

	//Hash Set   //Unsorted
	Set<Integer> mySet = new HashSet<Integer> ();

- Maps  (Key, Value)   *unique keys
	Map<Ob,Ob> map =
	map.put("key", value)  //overrides previous
	map.get("key")  //element. null if no value found.
	map.remove("key")
	map.contains("key");
	map.keySet().iterator(); // Key iterator
	map.values().iterator(); // Values iterator
	map.size()

   - HashMap  O(1)        // Not Sorted        // Buckets.
	 = new HashMap<Ob,Ob>();

   - TreeMap  O(log (n))  //Sorted.            // Red-Black Tree.
	 = new TreeMap <Ob,Ob>();
	 tm.containsKey("Key")
	 tm.containsValue("Value")
	 tm.firstKey()   tm.lastKey()
	 tm.firstEntry()  tm.lastEntry() //Returns an entry.
	 tm.subMap(Ob From key, Ob to Key)
	 tm.tailMap(Ob from key)

	 //Loop over treemap in order<:
	 for(Map.Entry<String,Integer> entry : treeMap.entrySet()) {
		String key = entry.getKey();
		Integer value = entry.getValue(); ...

- Custom objects with Hash functions
  If you make a a custom object, and want to use it in a hashSet or Hashmap,
  you must override 'int hashCode()' and 'boolean equals(Object obj)';

  static class Pos {
	int x;
	int y;
	public Pos (int x, int y) {
		this.x = x;
		this.y = y;
	}

	@Override
	public boolean equals(Object obj) {
	  if (obj == null) return false;
	  if (this == obj) return true;
	  Pos pos = (Pos) obj;
	  if (x == pos.x && y == pos.y)  return true;
	  return false;
	}

	@Override
	public int hashCode() {
	  final int prime = 31;
	  int result = 1;
	  result = prime * result + x;
	  result = prime * result + y;
	  return result;
	}
  }

- Iterators:
	Iterator<Integer> itr = mytree.iterator();
	   while (itr.hasNext()) {
		   Print(myit.next());
	   }
	   //Array lists have iterators for reverse Traversal:
	   ListIterator<Integer> listIt = mylist.listIterator(mylist.size()); //Note, not size()-1
	   while (listIt.hasPrevious()) {
		 Print(listIt.previous());
	   }

- Dynamic Programming
  * General Heuristics
	- Base case + recursion. Often easy to 'reject' base case if it fails,
	  (e.g tank path out of bound)
	- Figure out what you can cache for scalability.
	- for 'all sets', you can enumirate them like binary:
	  000, 001, 010 ... then return an array of arrays.

- Hacks
  - Computing 2^n  :  1 << n;
  - Multiply by 2: 8 << 2  //=16
  - Divide by 2:   8 >> 1  //=4

- Bit operations
  >> shift right (considers sign)    >>> unisgned shift right. (shifts zero)
  << shift left.
  | ^ & = or xor and
  ~NUM  //negate (not to be confused with !)
  check bit: check shifted anded:  (val & (1 << i) != 0)
  setting bit: or it with '000010000'  (val | (1 <<< i))
  clearing bit: and it with '11110111' (val & ~(1 << i))

- java access modifier
  (nothing)  = only Class and package
  protected  = ++ sublcass

- BigInteger
  special Object to handle really large values.
  BigInteger bint = new BigInt(<String>)
  bint.add(<BigInteger>);
  ...

- Power of 2
  2^–2	1/4
  2^–1	1/2
  2^0 	1
  2^1 	2
  2^2 	4
  2^3 	8
  2^4 	16
  2^5 	32
  2^6 	64
  2^7 	128
  2^8 	256
  2^9 	512
  2^10	1024 = 1k
  2^11	2048
  2^12	4096
  2^13	8192
  2^14	16384
  2^15	32768
  2^16	65536
  2^20  = 1 mb   Million
  2^30  = 1 Gb   Billion  (1 000 000 000)
  2^31  ..2 GB - Java`s int max value = 2^31 -1
  2^32  = 4 Gb
  2^40  = 1 Tb   Trillion
  2^64	18 446 744 073 709 551 616    = Java`s long limit.

- Primes (up to 200) for use in hashCode()
  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
  73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,
  157, 163, 167, 173, 179, 181, 191, 193, 197, 199,

- Behavioural Questions
  Project:
  Most challenging:
  What you learned:
  Most interesting:
  Hardest bug:
  Enjoyed the most:
  Conflicts with teammates:

  Project: Eclipse Gtk3 Migration.
  Most challenging: Wayland migration.
	- 2 months, succedded with pair programming.
	- plow through C code that initializes JVM with paramaters
	- trace bug through several layers of eclipse
	- figure out how to launch wayland, how to tell what backend an app is using
	  (X11Wayland or Wayland native)
	- narrow down to infinite recursion
  What you learned:
	- Java Java
	- Clean code
	- Linux command line, bash scripting (wrote a small parser for notes)
	- Eclipse IDE in depth, Emacs
	- Learned that you need a development plan.
	- Learned to supervise new inern.
	  % Assign work, read understand and review other people's logic.
	- Communication ();
	  % how to tell someone their code is problematic in a soft way ();
	  % difference between opinion and fact
  Most interesting:
	- fixing memory leak, involved writing a blog article.
	- found a O(n^2) issue in a plugin.
	   % was reading git history for each file.
	   % learned about git internals. blobs etc.. Figured out a O(n lg n) algo.
  Hardest bug:
	Fixing Drag and Drop.
	  * spent 3 months hunting down a series of bugs.
	  * had to understand high level architecture of many widgets
	  * figure out how to cross-debug from Java to C
	  * trace code through internals of GTK framework, to our library
  Enjoyed the most:
	- pair programming on Wayland issue
	  % felt like guys in Pacific Rim. When minds are in sync.
  Conflicts with teammates:
	- Vim vs Emacs :-|,
	  % realised I was too attached to it.
	  % realised I should not force tools onto people.
	- Used a different to-do/wiki system than the rest of the team.
		became isolated from the team.
	- In the past:
	  - (acroins)Submitted work without understanding the format QA wanted it in
	  - Caught a team mate plagarising, broke up team. Didn''t tell him why,
		but in hind-sight should have spoken to him about it.


	  Project:           OS Programming assignments
	  Most challenging:
		- Read linux kernal
		- debug a vm via gdb,
	  What you learned:
		- Linux internals, C debugging
	  Most interesting:
	  Hardest bug:
	  Enjoyed the most:
	  Conflicts with teammates:
		- Worked on an assignment where teammate expected to work on it together
		- team of 3, 2 girls and me. Them two were tight friends, left me out,
		  they would support each others arguments, but not mine.

- Appendix (Code implementations)
  //------ Algorithm implementations
  - Binary Search:
	static int binarySearch(int nums[], int val) {
	  int upperi = nums.length-1;
	  int loweri = 0;
	  while (loweri <= upperi) {
		int midi = (loweri+upperi)/2;
		if (nums[midi] == val)     return midi;
		else if (nums[midi] < val) loweri = midi+1;
		else if (nums[midi] > val) upperi = midi-1;
	  }
	  return -1;
	}

  - Selection Sort:
	  public static void main(String[] args) {
		  int nums [] = {3,5,4,1,8,10};
		  for (int i = 0; i < nums.length; i++) {
			for (int j = i+1; j < nums.length; j++) {
			  if (nums[j] < nums[i]) {
				swap(nums, i, j);
			  }
			}
		  }
		  System.out.println(Arrays.toString(nums));
		}
		static void swap(int nums[], int i, int j) {
		  int tmpi = nums[i];
		  nums[i] = nums[j];
		  nums[j] = tmpi;
		}

  - Quick Sort
	  // Random generator:
	  Random randGen = new Random();
	  randGen.nextInt(10);  //generate int between 0-10

	  static List<Integer> leosQuickSort(List<Integer> list) {
		 //base cases
		 if (list.size() == 0 || list.size() == 1) {
		   return list;
		 }

		 //Split arrays, recurse.
		 int pivotIndex = randNum(list.size() - 1);
		 List<Integer> leftList = new ArrayList<Integer>(); //left list
		 List<Integer> rightList = new ArrayList<Integer>(); //right list.
		 for (int i = 0; i < list.size(); i++) {
		   if (i == pivotIndex) {
			 continue;
		   }
		   if (list.get(i) < list.get(pivotIndex)) {
			 leftList.add(list.get(i));
		   } else {
			 rightList.add(list.get(i));
		   }
		 }
		 List <Integer> ra = new ArrayList<Integer> ();
		 ra.addAll(leosQuickSort(leftList));
		 ra.add(list.get(pivotIndex));
		 ra.addAll(leosQuickSort(rightList));
		 return ra;
	   }

	   static int randNum(int upper) {
		  Random rand = new Random();
		  return rand.nextInt(upper);
	   }

  - Heap Sort
	  https://www.youtube.com/watch?v=JhCe8nhndPA
	  public static void main(String[] args) {

		int nums [] = {3,5,8,7,1,13,11,15,6};
		heapSort(nums);

		//Test validity of sort.
		int expectedNums [] = {1, 3, 5, 6, 7, 8, 11, 13, 15};
		assert Arrays.equals(nums, expectedNums);

		System.out.println("All is well");
	  }

	  private static void heapSort(int[] nums) {
		heapify(nums);

		//Test that heapify worked well.
		int expectedNumsAfterHeapify [] = {15, 7, 13, 6, 1, 8, 11, 5, 3};
		assert Arrays.equals(nums, expectedNumsAfterHeapify);

		for (int last = nums.length-1; last >= 0; last--) {
		  swap(nums, last, 0);
		  int lastItemOfHeap = last -1;  //not corrupt end of array
		  maxHeapify(nums, 0, lastItemOfHeap);
		}
		System.out.println(Arrays.toString(nums));
	  }

	  static void heapify(int nums[]) {

		// For every node with children (I.e starting in the middle)
		// in reverse order,  max-heapify things up.
		int lastElement = nums.length - 1;
		int middle = (lastElement-1) /2;    // Floor applied by integer devision
		for (int i = middle; i >= 0; i--) {
			 maxHeapify(nums, i, lastElement);
		}

	  }

	  static void maxHeapify(int nums[], int parentIndex, int lastItem) {
		//Child is at first left, but can change to right child if right is bigr
		int childIndex = leftChildIndex(parentIndex); //left child as default.

		//continue while not at the end of list without recursion:
		while (childIndex <= lastItem) {

		  //Identify biggest child. (right or left child)
		  // (ensuring right child exists).
		  if (rightChildIndex(parentIndex) <= lastItem &&
			 leftChild(nums, parentIndex) < rightChild(nums, parentIndex)) {
			childIndex = childIndex+1;
		  }

		  //See if child is bigger than parent.
		  if (nums[childIndex] > nums[parentIndex]) {
			//Swap parent and child.
			swap(nums, parentIndex, childIndex);
		  }

		  //Go deeper
		  parentIndex = childIndex;
		  childIndex = leftChildIndex(parentIndex);
		}
	  }

	  static int leftChild (int nums[], int parentIndex) {
		return nums[leftChildIndex(parentIndex)];
	  }

	  static int rightChild (int nums[], int parentIndex) {
		return nums[rightChildIndex(parentIndex)];
	  }

	  static int leftChildIndex(int parent) {
		return parent*2 + 1;
	  }

	  static int rightChildIndex(int parent) {
		return parent*2 + 2;
	  }

	  static void swap(int nums[], int a, int b) {
		int tmp = nums[a];
		nums[a] = nums[b];
		nums[b] = tmp;
	  }

  - Merge Sort
	  static void mergeSort(int nums []) {
		int helper [] = new int[nums.length];
		mergeSortHelper(nums, helper, 0, nums.length -1);
	  }

	  static void mergeSortHelper(int nums [], int helper[], int low, int high){
		if (high == low) {
		  return;
		}
		if (high - low == 1) {
		  if (nums[low] > nums[high]) {
			int tmplow = nums[low];
			nums[low] = nums[high];
			nums[high] = tmplow;
		  }
		  return;
		}

		int middle = (low+high) / 2;
		int rightIndex = middle+1;
		mergeSortHelper(nums, helper, low, middle);
		mergeSortHelper(nums, helper, rightIndex, high);
		merge(nums, helper, low, rightIndex, high);
	  }

	  static void merge (int nums [], int helper [], int aStart, int bStart,
		int high) {
		for (int i = aStart; i <= high; i++) {   // copy range into helper.
		  helper[i] = nums[i];
		}
		int a = aStart;
		int b = bStart;
		// Iterate over left & right side, copy smallest number into original.
		for (int i = aStart; i <= high; i++) {
		  // b++ high+1 should be first, otherwise uncaught exception can occur.
		  if (a < bStart && (b == high+1 || helper[a] < helper[b])) {
			nums[i] = helper[a];
			a++;
		  } else {
			nums[i] = helper[b];
			b++;
		  }
		}
	  }

  - Prime number checker
	public static boolean isPrime(int x)
	for (int i = 2; i < x; i++)
	  if (x % i == 0)  return false;
	return true;
	..
	better method is to generate array from 1 - MAX.
	then start at first prime number (2), remove all its multipliers (2,4,6)
	then find next non-checked number and remove all its multipliers (3,6,9) etc

		static boolean reachable(int i, int j, int n) {
			boolean grid[][] = new boolean[n][n];
			reachableHelper(0, 0, grid, i, j, n - 1);
			for (int x = 0; x < n; x++) {
			  for (int y = 0; y < n; y++) {
				if (!grid[x][y]) {
				  return false;
				}
			  }
			}
			return true;
		  }

		  static void reachableHelper(int x, int y, boolean[][] grid, int i, int j, int max) {
			if (x > max || y > max || x < 0 || y < 0 || grid[x][y]) {
			  return;
			}
			grid[x][y] = true;
			int i2 = i;
			int j2 = j;
			for (int a = 0; a < 2; a++) {
			  for (int b = 0; b < 2; b++) {
				reachableHelper(x + i2, y + j2, grid, i, j, max);
				reachableHelper(x + j2, y + i2, grid, i, j, max);
				i2 = -i2;
			  }
			  j2 = -j2;
			}
		  }

//--------- NOT FOR PRINT, BUT USEFUL

// WISDOM.
- Var Names
  - Dont use 1,2 char var names like ll, ra, rl.
	Its easy to mess them up, even in small functions. (e.g LeoQuickSort ra<>rl)

- Methods & Method Names
  - Careful about element & elementIndex naming(e.g leftChild vs leftChildIndex)

- Be attentive to & and &&
  & is bit operation
  && is logical operation.

- Put everything into brackets
  (val & (1 << index ) != 0)  << this has a mistake:
  ((val & (1 << index )) != 0), bracket everything.

//Collection diagram:
http://3.bp.blogspot.com/-LUCDWSG5qXE/Uy_ee5bIR5I/AAAAAAAAAZA/oY1hR_1fcwk/s1600/Java+collection+cheat+sheet.PNG

// Assertions
jvm arg++: -ea
assert expr
assert expr : error_val
