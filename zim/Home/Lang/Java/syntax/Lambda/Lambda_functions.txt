Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-01-17T11:28:59-05:00

====== Lambda functions ======
Created Tuesday 17 January 2017

===== Function intreface (Param in, return value out) =====
JDK 8:

**Single line:**
Function<String, String> func = arg -> do_something_with_arg;

**Multi line:**
Function<RETURN_TYPE,ARG_TYPE> methName = arg -> {
	statement;
	statment;
	return RETURN_TYPE;
	}
 

===== Function (Take arg, produce result) =====
Function<RETURN_TYPE,ARG_TYPE> Adder = arg -> statement;
Object obj = func.apply(OBJ);

===== Runnable (no param, no return) =====
Runnable task = () -> { statement; };
task.run();

Note:
- Runnable is an interface. It doesn't create threads.
	(You can create threads and pass runnable into it.)
- It doesn't look like there is a built-in function interface other than runnable
  that doesn't take arguments and doesn't return anything.:
  http://stackoverflow.com/questions/23958814/functional-interface-that-takes-nothing-and-returns-nothing

===== Supplier (no param, produces result) =====
Doesn't accept argument, just produces output.
Useful if supplier reads local variables.

Supplier pass = () -> myCond;
pass.get();

https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html


===== See Other interfaces =====
https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html 
