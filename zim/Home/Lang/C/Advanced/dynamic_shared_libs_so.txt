Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4

====== dynamic shared libs so ======
Created Thursday 03 August 2017

===== Summary =====
gcc -shared -fpic dynlib.c -o libdynlib.so    # create position independent, shared library
gcc -L. main.c -o main -ldynlib	              # statically compile main.c against our lib. Tell it to add current dir '.' to LIST(-L) of libs to be searched, 
											# and try to read 'dynlib' library (-l) for symbols. 'lib' and '.so' are auto-added.

export LD_LIBRARY_PATH+=:$(pwd)		      # to run, if not in [[/usr/lib,]] LD_LIBRARY_PATH must be specified.
./main

===== gcc Params to note =====
-lname
-l name
	search library name. "lib" is prefixed and '.so' is post fixed.
	ex: -ldynlib will look for 'libdynlib.so' 
	
-L List for used by -l 
	-L.  current dir


===== Files used for example =====
main.c
	#include <stdio.h>
	#include "dynlib.h"
	
	int main (int argc, char **argv) {
		libPrintHello();
	}
	
dynlib.h
	void libPrintHello();

dynlib.c
	#include <stdio.h>
	#include "dynlib.h"
	
	void libPrintHello() {
		printf("Hello from lib!\n");
	}
	

===== Compiling =====

**Compiling shared lib:**
	gcc -c -fpic dynlib.c    
			# compile to object file, with 'position independent code' flag. Output: dynlib.o
			# -I <includes> for headers can be added here.
	gcc -shared dynlib.o -o libdynlib.so   # compile for shared use. On linux, pre-append 'lib' and post '.so'.
			# -l link for libs can be added here.
	
**Compiling code to use shared lib:**
You need to specify the list of libs that gcc will look in manually, to tell it where your dyn lib is located.
Use the '-L' option to add lib location to lib list, and '-l' option to specify which library to load.
Not, for the '-l' option, 'lib' and '.so' are added automatically.

gcc -L/home/lufimtse/git/LeoGtk3/snip_SharedLib -ldynlib main.c -o main
 //(or use '$(pwd))//
gcc -L. -ldynlib main.c -o main

===== Running =====
Need to specify where to find 'libdynlib.so' if not in [[/usr/lib.]]

	export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH
	[[./main]]


===== Misc =====
It's possible to hard-code the libpath into executable via 'rpath'. See *1.
libMy.so is prefered over libMy.a.  Changed via '-Wl,static').

====== Loading dynamic libs at run time ======
#include <dlfcn.h>

Open a library:
  void * **dlopen**(const char *filename, int flag);
	- Return is pointer to library.
	- same handle returned if you try to open it twoce. 

Then use **dlsym**:
	void * dlsym(void *handle, char *symbol);

See example:
http://tldp.org/HOWTO/Program-Library-HOWTO/dl-libraries.html

Also on how to create your own dl:
http://www.ibm.com/developerworks/library/l-shobj/

Debugging dlls:
http://www.ibm.com/developerworks/library/l-shlibs/

Also friendly tutorial:
http://c.learncodethehardway.org/book/ex29.html



====== Sources ======
[1] http://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html

See also:
(unread:) http://docencia.ac.upc.edu/FIB/USO/Bibliografia/unix-c-libraries.html
