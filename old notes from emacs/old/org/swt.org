#+STARTUP: indent
* About 
** Tutorial 
[[http://zetcode.com/gui/javaswt/][ZetCode]] Quick Intro/Layout/Widget/Menu/Dialog/Painting 
* Widget Hierarchy
- Widget
  - Control
    - Button
    - Label
    - Progressbar
    - Scrollable
      - Composite
        - [[id:bc2894da-2090-40c1-a281-0740a7b70b0d][Tree]]
  - [[id:778b7b1b-fe0b-4609-82ba-041022ea4191][Menu]]
  - Item
    - [[id:778b7b1b-fe0b-4609-82ba-041022ea4191][MenuItem]]
- Dialog
  - Directory Dialogue
  - ColorDialog
  - FileDialog
  - [[id:8a299d8a-4496-4a5f-a5ad-08403fc9d8fd][MessageBox]]
- 

* Tree 
:PROPERTIES:
:ID:       bc2894da-2090-40c1-a281-0740a7b70b0d
:END:
** Links
[[http://help.eclipse.org/juno/index.jsp?topic%3D%252Forg.eclipse.platform.doc.isv%252Freference%252Fapi%252Forg%252Feclipse%252Fswt%252Fwidgets%252FTree.html][Eclipse jDocumentation]]
** Tree Theory
- Hierarchy:
  - TreeItem
  - TreeColumn 
- Creation:
  - new Tree (Composite)
    - new TreeItem(Tree ...)      first child nested under parent
      - new TreeItem(TreeItem ...) //subsequent children nested under other children.

** Tree Properties
- Header Visibility
  tree.setHeaderVisible(true);

- Checkboxes for tasks
  create with SWT.CHECK style.

** Tree with columns
Tree
  TreeColumn(Tree)
  TreeItem(Tree) -> setText(String [] {"c1 txt", "c2 txt", "c3 txt"}) //set text as array.

// --------------- Trees with Column Properties
Tree.setHeaderVisible(true)

// --------------- Column Properties 
// ----- Construction Styles 
SWT (LEFT | CENTER | RIGHT)

// ----- Column Ops 
TreeColumn.setText(String);
TreeColumn.setWidth(int)


// ----- Examples
//Example:
//SWT snippet:
http://git.eclipse.org/c/platform/eclipse.platform.swt.git/tree/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet170.java

//meh
http://www.java2s.com/Code/Java/SWT-JFace-Eclipse/SWTTreeWithMulticolumns.htm

** Tree Item Removal
To remove an item, dispose it.
** Tree Item indexing
(Tree|Treeitem).indexOf(TreeItem)
All items are indexed according to their parent.

* Menu and MenuItems 
:PROPERTIES:
:ID:       778b7b1b-fe0b-4609-82ba-041022ea4191
:END:
** Links
http://zetcode.com/gui/javaswt/menustoolbars/
** Theory 
- Menu vs MenuItem ::
  - Menu's hold one or more MenuItems
  - MenuItems call 'setMenu' to generate sub-menu's. 
  - Menu's don't have names. Only menu-items have names.
  - Menu have 'shell' as parent and then MenuItems call 'this.setMenu(<Menu>)'
  - MenuItems have Menu's as parent.

- Structure ::
  Shell
   - Append a MenuBar to a shell 
   - Append one or more cascade menus with DROP_DOWN style (these go sideways >> File|Edit etc..)
     - Append menus to cascade menus,   (fileMenu that will hold all the file menu items)
     - Append menu-items to these menues. (New/Exit..)

- Styles ::
  - Menu 
    SWT.BAR - Menu (shell's style)
    SWT.DROP_DOWN  - Sub-Menu's have this style
  
  - MenuItems
    SWT.CASCADE   - used for sub-menu that have additional menus under them. (File -> import) 
    SWT.PUSH   - terminal menuItems (e.g undo)
    SWT.CHECK - a menu that has a check-box.
    SWT.RADIO - one of several
    SWT.SEPARATOR - a line that splits menu items.

** Example: File menu : A Visual example
[[./img/img_2015_02_23__13_30_59.png]]
[[shell:kolourpaint ./img/img_2015_02_23__13_30_59.png][edit img]]
#+BEGIN_SRC java
		//Menu like:
		//File
		  //Exit

		//Minimal menu Bar functionality:
        Menu menuBar = new Menu(shell, SWT.BAR);
        shell.setMenuBar(menuBar);

        //Create a menu bar.
        MenuItem cascadeFileMenu = new MenuItem(menuBar, SWT.CASCADE);
        cascadeFileMenu.setText("&File");

        //Top level menu items are cascade menu items.
        Menu fileMenu = new Menu(shell, SWT.DROP_DOWN);
        cascadeFileMenu.setMenu(fileMenu);
          //Add item.
          MenuItem exitItem = new MenuItem(fileMenu, SWT.PUSH);
          exitItem.setText("&Exit");

          MenuItem newItem = new MenuItem(fileMenu, SWT.PUSH);
          newItem.setText("&New");

        //Create 'Edit'
        MenuItem cascadeEditMenu = new MenuItem(menuBar, SWT.CASCADE);
        cascadeEditMenu.setText("&Edit");
        Menu editMenu = new Menu (shell, SWT.DROP_DOWN);
        cascadeEditMenu.setMenu (editMenu);

           //Add items
           MenuItem undoItem = new MenuItem(editMenu, SWT.PUSH);
           undoItem.setText("&Undo");

           MenuItem redoItem = new MenuItem(editMenu, SWT.PUSH);
           redoItem.setText("&Redo");


        //Listener
        exitItem.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                shell.getDisplay().dispose();
                System.exit(0);
            }
        });
#+END_SRC

                          .

** Example: Sub menu
#+BEGIN_SRC java
		//Menu Structure like:
		//File
		  //Import
		    //Import news feed
		    //Import bookmarks
		    //Import Mail
		  //Exit

		Menu menuBar = new Menu (shell, SWT.BAR);
		shell.setMenuBar (menuBar);

		MenuItem cascadeFileMenu = new MenuItem (menuBar, SWT.CASCADE);
		cascadeFileMenu.setText ("&File");

		Menu fileMenu = new Menu (shell, SWT.DROP_DOWN);
		cascadeFileMenu.setMenu (fileMenu);

		MenuItem importMenuItem = new MenuItem (fileMenu, SWT.CASCADE);
		importMenuItem.setText ("Import");

		Menu importSubMenu = new Menu (shell, SWT.DROP_DOWN);
		importMenuItem.setMenu (importSubMenu);

		MenuItem feedItem = new MenuItem (importSubMenu, SWT.PUSH);
		feedItem.setText ("&Import news feed...");

		MenuItem bmarks = new MenuItem (importSubMenu, SWT.PUSH);
		bmarks.setText ("&Import bookmarks...");

		MenuItem mailItem = new MenuItem (importSubMenu, SWT.PUSH);
		mailItem.setText ("&Import mail...");

		MenuItem exitItem = new MenuItem (fileMenu, SWT.PUSH);
		exitItem.setText ("&Exit");


		exitItem.addSelectionListener (new SelectionAdapter () {
			@Override
			public void widgetSelected (SelectionEvent e) {
				shell.getDisplay ().dispose ();
				System.exit (0);
			}
		});
#+END_SRC

* Dialogs
** MessageBox (yes/no prompt)
:PROPERTIES:
:ID:       8a299d8a-4496-4a5f-a5ad-08403fc9d8fd
:END:
swt native dialogue.
*** Example
#+BEGIN_SRC java
package standaloneTests;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Shell;

public class MessageBoxTest {
	  static Display display = new Display();
	  static Shell shell = new Shell(display);
	  static Image image;

	public static void main (String [] args) {
		shell.setLayout (new RowLayout ());

		// create dialog with ok and cancel button and info icon
		MessageBox dialog =  new MessageBox(shell, SWT.ICON_QUESTION | SWT.OK| SWT.CANCEL);
		dialog.setText("My info");
		dialog.setMessage("Do you really want to do this?");

		int returnCode = dialog.open();
		System.out.println ("return code.");

		shell.pack ();
		shell.open ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ())
				display.sleep ();
		}
		display.dispose ();
	}
}
#+END_SRC

** DirectoryDialog
#+BEGIN_SRC java
        //Prompt user for folder to store tasks.
        Shell shell = new Shell ();
        DirectoryDialog dialog = new DirectoryDialog (shell);
        String platform = SWT.getPlatform ();
        dialog.setFilterPath (platform.equals ("win32") || platform.equals ("wpf") ? "c:\\" : "/");
        System.out.println ("RESULT=" + dialog.open ());
        shell.dispose ();
#+END_SRC

[[https://www.eclipse.org/swt/snippets/][snippets]]

