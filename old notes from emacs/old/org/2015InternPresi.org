#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css" />
*  make Intern presentation 
** [#B] What is Eclipse develeopment
*** Eclipse core and plugins.
*** CDT is a plugin. 
*** SWT is what it's build on.
*** C/Java side.
** [#B] Things I've done
*** Releng tools 
**** About
2000 lines of code
Plug in
**** Stabilize
**** Improve performance
*** CDT Development
**** Added a checkbox
- different thing depending on Autotools/Makefile/Managed Make
*** SWT Deveolpment
**** Rewrote/patched up SWT DateTime.
**** DnD, breadcrums throughout the whole SWT code base.
**** Styple fixes, (e.g background color)
*** Documentation
**** SWT-dev guide
**** Blog
** Bragging rights 
*** Wrote blog got a sweater.
*** Wrote entry on finding memory leaks in java, 12,000+ k views (150 views yesterday, top of the list -> Got Wind breaker.
** [#B] What you will learn
*** Java 
Like back of your hand
*** Debugging skills
*** Reverse engineering (More code reading than writing)
*** Graphics library, SWT. Eclipse framework PlatformUI, 
*** C / Gtk/Gdk
Like back of your calf
*** bash (for your own)
*** IDE - Eclipse in depth.
Industry standard. - E.g Air miles.
** Why join eclipse
*** Learn a lot.
- Not repetative. 
- 
*** Learn incrementally.
*** Understanding of large libraries, constructs.
*** Not stressfull, you get time to think and ponder.
*** Report on weekly meeting.
*** No scrum, just thought.
*** Team members are (mostly) local, very helpful.
*** Involved with community, twitter, bugzilla triage, 
*** Red Hat is intreseted in Eclipse development, bright future.
- Red hat now strategic member of Eclipse foundation (250,000$ anually).
  https://www.eclipse.org/org/press-release/20150505_redhat.php?utm_source=twitterfeed&utm_medium=twitter&utm_campaign=Feed%3A+eclipse%2Ffnews+%28Eclipse+Foundation+News%29
- Really good for C development. Industry standard.
- C + something on top development.
- Eclipse is old, (but so is Vim & Emacs). I'd say Eclipse is mature.
- Underlying framework is updated and re-worked on. New features added. (e.g split view, dark theme improvements).
- Other editors are more like Mac/Windows. You get what that company wants. Eclipse is what community wants.
- Active Docker development.
- Bright future ahead.
** Insights 
*** Ask for help if you're not making progress.
- after 1 hour, 1 day, 1 week. When you feel stuck.
- When something doesn't work as you'd expect

E.g was trying to figure out C-debugging, was stuck for 3 days. 
Roland helped me fix it in like 30 minutes.
*** Learn an editor. (Emacs obviously). 
- Emacs is like lego. You build what you want. Tailor to your needs.
*** Be proffesional 
I used to add ascii art to my reports. Not any more.
*** Things to learn:
- Spend 1-3 days learning git. 
   Command line version is your friend. Then the IDE version is your loyal servant.
- 30 mins/day, learn something new. 
- Book: Clean Code.
  Changes the way you think about code. About how you take notes.
- Book: on Java (whole, not just article).
  e.g you come back later to things you read in the book. E.g threading, annotations.
- Book on C if you do C development.
*** Subscribe to RSS feeds (e.g via feedy), relevant topics.
   E.g I subsribe to Gtk, learned about GtkInspector, fixed DnD problem that I was stuck on for 3 weeks.
*** Use twitter, tweetdeck. Folow few but relevant people in your project.
*** Contact
Leo Ufimtsev

lufimtse@redhat.com

LeoUfimtsev (irc)

