<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title></title>
<!-- 2015-04-20 Mon 15:43 -->
<meta  http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta  name="generator" content="Org-mode" />
<meta  name="author" content="Leo Ufimtsev" />
<meta  name="viewport" content="width=device-width, initial-scale=1" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  pre.src-sh:before    { content: 'sh'; }
  pre.src-bash:before  { content: 'sh'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-R:before     { content: 'R'; }
  pre.src-perl:before  { content: 'Perl'; }
  pre.src-java:before  { content: 'Java'; }
  pre.src-sql:before   { content: 'SQL'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.right  { text-align: center;  }
  th.left   { text-align: center;   }
  th.center { text-align: center; }
  td.right  { text-align: right;  }
  td.left   { text-align: left;   }
  td.center { text-align: center; }
  dt { font-weight: bold; }
  .footpara:nth-child(2) { display: inline; }
  .footpara { display: block; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  /*]]>*/-->
</style>
<link rel="stylesheet" type="text/css" href="org.css" />
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. About SWT</a></li>
<li><a href="#sec-2">2. About this document</a></li>
<li><a href="#sec-3">3. Pre-requisites</a></li>
<li><a href="#sec-4">4. SWT Developer setup</a>
<ul>
<li><a href="#sec-4-1">4.1. Checking out SWT repos for development</a></li>
<li><a href="#sec-4-2">4.2. Configure git for review</a></li>
<li><a href="#sec-4-3">4.3. Enable 32/64 bit checking by swt-tools</a>
<ul>
<li><a href="#sec-4-3-1">4.3.1. About 32/64 bit</a></li>
<li><a href="#sec-4-3-2">4.3.2. Enable checks of for 32/64 bit with swt tools.</a></li>
</ul>
</li>
<li><a href="#sec-4-4">4.4. References</a></li>
</ul>
</li>
<li><a href="#sec-5">5. SWT Development, navigating code base.</a>
<ul>
<li><a href="#sec-5-1">5.1. Learning SWT</a></li>
<li><a href="#sec-5-2">5.2. General Widget Hierarchy</a>
<ul>
<li><a href="#sec-5-2-1">5.2.1. Illustration:</a></li>
</ul>
</li>
<li><a href="#sec-5-3">5.3. About GtkHandles</a></li>
<li><a href="#sec-5-4">5.4. SWT Fixed</a></li>
<li><a href="#sec-5-5">5.5. OS.java introduction.</a>
<ul>
<li><a href="#sec-5-5-1">5.5.1. About OS.java</a></li>
<li><a href="#sec-5-5-2">5.5.2. OS.java compilation to os.h os.c etc..</a></li>
<li><a href="#sec-5-5-3">5.5.3. Submission of os.h os.c to gerrit</a></li>
</ul>
</li>
<li><a href="#sec-5-6">5.6. SWT Code style notes</a>
<ul>
<li><a href="#sec-5-6-1">5.6.1. Java doc notes</a></li>
<li><a href="#sec-5-6-2">5.6.2. Method naming</a></li>
<li><a href="#sec-5-6-3">5.6.3. Method access modifiers</a></li>
</ul>
</li>
<li><a href="#sec-5-7">5.7. gerrit Submission, what to include&#xa0;&#xa0;&#xa0;<span class="tag"><span class="GTK">GTK</span></span></a></li>
</ul>
</li>
<li><a href="#sec-6">6. SWT and Gtk Versions</a>
<ul>
<li><a href="#sec-6-1">6.1. About Gtk Versions</a></li>
<li><a href="#sec-6-2">6.2. SWT's Gtk Version Support</a></li>
<li><a href="#sec-6-3">6.3. Switching Snippets to run on either GTK2 or GTK3.</a></li>
<li><a href="#sec-6-4">6.4. Gtk version on your system</a></li>
<li><a href="#sec-6-5">6.5. Getting gtk version programtically in java/SWT</a></li>
<li><a href="#sec-6-6">6.6. Getting gtk version versions Eclipse is running on</a></li>
<li><a href="#sec-6-7">6.7. Gtk Versions on Fedora/Red Hat</a></li>
</ul>
</li>
<li><a href="#sec-7">7. Native Gtk Applications</a>
<ul>
<li><a href="#sec-7-1">7.1. About</a></li>
<li><a href="#sec-7-2">7.2. Brief overview of Gtk</a></li>
<li><a href="#sec-7-3">7.3. Learning Gtk</a></li>
<li><a href="#sec-7-4">7.4. Gtk Api documentation</a></li>
<li><a href="#sec-7-5">7.5. Getting help</a></li>
<li><a href="#sec-7-6">7.6. Gtk Source code</a></li>
<li><a href="#sec-7-7">7.7. Gtk native code environment</a></li>
<li><a href="#sec-7-8">7.8. Debugging Gtk Apps</a>
<ul>
<li><a href="#sec-7-8-1">7.8.1. GtkInspector</a>
<ul>
<li><a href="#sec-7-8-1-1">7.8.1.1. About</a></li>
<li><a href="#sec-7-8-1-2">7.8.1.2. Opening GtkInspector</a></li>
<li><a href="#sec-7-8-1-3">7.8.1.3. GtkInspector and reparenting</a></li>
<li><a href="#sec-7-8-1-4">7.8.1.4. Further</a></li>
<li><a href="#sec-7-8-1-5">7.8.1.5. References</a></li>
</ul>
</li>
<li><a href="#sec-7-8-2">7.8.2. gtk Debug flags for apps&#xa0;&#xa0;&#xa0;<span class="tag"><span class="GTK">GTK</span></span></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-8">8. GTK SO files Building&#xa0;&#xa0;&#xa0;<span class="tag"><span class="GTK">GTK</span></span></a>
<ul>
<li><a href="#sec-8-1">8.1. About</a></li>
<li><a href="#sec-8-2">8.2. Rebuilding SO file</a>
<ul>
<li><a href="#sec-8-2-1">8.2.1. Pre-requisites</a></li>
<li><a href="#sec-8-2-2">8.2.2. Step-by-step</a></li>
<li><a href="#sec-8-2-3">8.2.3. Automating the build-proccess</a></li>
</ul>
</li>
<li><a href="#sec-8-3">8.3. References</a></li>
</ul>
</li>
<li><a href="#sec-9">9. Adding custom functions to OS.java</a>
<ul>
<li><a href="#sec-9-1">9.1. Introduction</a></li>
<li><a href="#sec-9-2">9.2. Dynamic methods and <code>os_custom.h</code></a></li>
<li><a href="#sec-9-3">9.3. Adding custom Functions to OS.Java</a></li>
<li><a href="#sec-9-4">9.4. What does SWT tools do</a></li>
<li><a href="#sec-9-5">9.5. Adding custom C enums to OS.java</a></li>
<li><a href="#sec-9-6">9.6. Special custom bindings</a></li>
<li><a href="#sec-9-7">9.7. References</a></li>
</ul>
</li>
<li><a href="#sec-10">10. Testing on several different Gtk Versions</a>
<ul>
<li><a href="#sec-10-1">10.1. About</a></li>
<li><a href="#sec-10-2">10.2. Versions to test on</a></li>
<li><a href="#sec-10-3">10.3. Set up for Multiple GtkVersions</a></li>
<li><a href="#sec-10-4">10.4. Gtk from sources</a>
<ul>
<li><a href="#sec-10-4-1">10.4.1. Compiling Gtk+</a></li>
<li><a href="#sec-10-4-2">10.4.2. Copy compiled gtk for re-use</a></li>
<li><a href="#sec-10-4-3">10.4.3. Tie newly built gtk into SWT</a></li>
</ul>
</li>
<li><a href="#sec-10-5">10.5. References</a></li>
</ul>
</li>
<li><a href="#sec-11">11. Appendix</a>
<ul>
<li><a href="#sec-11-1">11.1. Eclipse CSS</a></li>
<li><a href="#sec-11-2">11.2. jhbuild Compiling/Building really new gtk versions on your own system</a></li>
<li><a href="#sec-11-3">11.3. About Author</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> About SWT</h2>
<div class="outline-text-2" id="text-1">
<p>
SWT is the layer between PlatformUI and the underlying Gtk2 or Gtk3 of the system.
</p>

<p>
SWT can be launched to use Gtk2 or Gtk3, but cannot use them both at the same time.
</p>

<p>
Communication from java to Gtk occurs through native calls defined in OS.java.
</p>

<div class="figure">
<p><img src="./img/img_2015_04_20__11_15_12.png" alt="img_2015_04_20__11_15_12.png" />
</p>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> About this document</h2>
<div class="outline-text-2" id="text-2">
<dl class="org-dl">
<dt>You will learn</dt><dd><ul class="org-ul">
<li>How to configure your machine (Eclipse/Git) to contribute SWT patches.</li>
<li>Info on building SO images to run snippets with newest SWT Master.</li>
<li>Info on Gtk Versions, compiling various Gtk Versions.</li>
<li>How to add your own gtk_ methods to OS.java</li>
<li>Tips on SWT Development, how to navigate the code base.</li>
<li>SWT-fu (as in kung-fu).</li>
</ul></dd>

<dt>How to use this docu</dt><dd><p>
  I recommend you first read a section<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> completley before following the step-by-step instructions.
</p>

<p>
This is because at the end I sometimes provide scripts that automate the step-by-step process
or at the end I may explain some stuff about the things in the beggining of a section.
</p>

<p>
Also, you should read the document in order, because each section builds on the next one.
</p></dd>

<dt>Source of this document</dt><dd>I wrote the document in org-mode and exported to html. If you use emacs and prefer to read this in org-mode, then just simply chnage the extention from swt-dev.html to swt-dev-.org in your browser.</dd>

<dt>Copying this document</dt><dd><p>
  By all means, feel free to copy this document and make use of it in your own tutorials.
</p>

<p>
For example, a good chunk of what I've learned comes from <a href="http://www.vogella.com/tutorials/eclipseide.html">http://www.vogella.com/tutorials/eclipseide.html</a> tutorials
and lots of blog posts from across the web.
</p></dd>

<dt>Comments, Questions &amp; Feedback</dt><dd><p>
  As this is a static page, if you have comments, questions / feedback, 
please feel free to post them on the blog-post about this document:
</p>

<p>
<a href="https://coffeeorientedprogramming.wordpress.com/2015/04/20/how-to-be-an-swt-developer-a-comprehensive-guide/">https://coffeeorientedprogramming.wordpress.com/2015/04/20/how-to-be-an-swt-developer-a-comprehensive-guide/</a>
</p></dd>
</dl>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Pre-requisites</h2>
<div class="outline-text-2" id="text-3">
<dl class="org-dl">
<dt>Solid Java knowledge</dt><dd>From class inheritence to multi-threading.</dd>

<dt>Some C experience</dt><dd><p>
  Know thy pointers and make files. 
</p>

<p>
Gtk background highly recommended but can be learned.
</p>

<p>
You will write small C-Gtk snippets of code, but probably no longer than something like this:
<a href="https://github.com/LeoUfimtsev/LeoGtk3/blob/4_DnD_Overlapping_widgets_457476/main.c">https://github.com/LeoUfimtsev/LeoGtk3/blob/4_DnD_Overlapping_widgets_457476/main.c</a>
</p></dd>

<dt>Eclipse</dt><dd>Knowing how to use Eclipse is quite essential. 
But you don't have to know about JFace/PlatformUI/RCP development internals 
and be acquainted with their source code. (it's useful to know how to use JFace thou).</dd>

<dt>Git</dt><dd>For example you should know the difference between merge and rebase.</dd>
</dl>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> SWT Developer setup</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> Checking out SWT repos for development</h3>
<div class="outline-text-3" id="text-4-1">
<dl class="org-dl">
<dt>Install SWT Developer tools</dt><dd>SWT developer tools automatically build things like os.c, which is used by custom code.
Install the latest from the Eclipse udate site:
<a href="https://www.eclipse.org/swt/updatesite.php">https://www.eclipse.org/swt/updatesite.php</a></dd>

<dt>Eclipse git</dt><dd><p>
  Eclipse git is used to compare swt files against older versions.
Not strictly necessary, but highly recommended.
</p>
<pre class="example">
sudo yum install eclipse-git
</pre></dd>

<dt>Check out SWT repos</dt><dd><p>
  Check out the repositories holding the SWT sources and binaries.
</p>

<p>
I use the <b>git</b> protocol.
</p>

<p>
When choosing branches, I select just the 'master' branch.
</p>
<div class="org-src-container">

<pre class="src src-sh">git://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git
git://git.eclipse.org/gitroot/platform/eclipse.platform.swt.binaries.git
</pre>
</div></dd>
</dl>

<p>
<i>E.g my gerrit username: lufimtse@redhat.com</i>
</p>

<dl class="org-dl">
<dt>Set the class path to be the GTK one </dt><dd><p>
 General (Win32/Cocoa/Gtk) setup is described in detail: <a href="https://www.eclipse.org/swt/git.php">SWT set up guide</a>.
</p>

<p>
Specifically for Gtk, you do as following:
</p>
<ul class="org-ul">
<li>Open 'navigator' view (<b>not package explorer</b>)(View may need to be enabled first)</li>
<li>under 'org.eclipse.swt' look for the .classfile files</li>
<li>rename .classpath<sub>gtk</sub> to .classpath</li>
<li>clean up projects</li>
<li>now run a test snippet or ControlExample.java, it should work.</li>
</ul></dd>
</dl>
</div>
</div>
<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> Configure git for review</h3>
<div class="outline-text-3" id="text-4-2">
<p>
To contribue back to swt, you need to configure your Repo to be able to push to 'review'.:
</p>

<ol class="org-ol">
<li><p>
Open:
</p>
<pre class="example">
~/git/eclipse.platform.swt/.git/config
</pre></li>

<li>Add review branch: <i>(adjust for your own user name instead of 'lufimtsev')</i></li>
</ol>
<div class="org-src-container">

<pre class="src src-sh">[remote <span style="color: #8b2252;">"review"</span>]
  url = ssh://lufimtsev@git.eclipse.org:29418/platform/eclipse.platform.swt.git
  push = HEAD:refs/for/master
</pre>
</div>

<p>
This is how my <code>.git/config</code> looks like:
</p>
<div class="org-src-container">

<pre class="src src-sh">[core]
        repositoryformatversion = 0
        filemode = true
        logallrefupdates = true
        excludesfile = /home/lufimtse/git/eclipse.platform.swt/tests/org.eclipse.swt.tests/.gitignore
[remote <span style="color: #8b2252;">"origin"</span>]
        url = git://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[remote <span style="color: #8b2252;">"review"</span>]
        url = ssh://lufimtsev@git.eclipse.org:29418/platform/eclipse.platform.swt.git
        push = HEAD:refs/for/master
[branch <span style="color: #8b2252;">"master"</span>]
        remote = origin
        merge = refs/heads/master
        rebase = true
</pre>
</div>
<ol class="org-ol">
<li>Under existing master,add 'rebase = true' ::</li>
</ol>
<pre class="example">
[branch "master"]
  rebase = true
</pre>

<ol class="org-ol">
<li>Open Eclipse, under git add your user info ::</li>
</ol>
<pre class="example">
[user]
  name = Lev Ufimtsev
  email = lufimtse@redhat.com
</pre>

<ol class="org-ol">
<li><p>
Usage ::
</p>

<p>
You can push your changes into a review branch via:
</p>
<pre class="example">
git push review
</pre></li>
</ol>
</div>
</div>
<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><a id="ID-01fa505c-559f-4601-959d-3426c1607b2d"></a><span class="section-number-3">4.3</span> Enable 32/64 bit checking by swt-tools</h3>
<div class="outline-text-3" id="text-4-3">
</div>
<div id="outline-container-sec-4-3-1" class="outline-4">
<h4 id="sec-4-3-1"><span class="section-number-4">4.3.1</span> About 32/64 bit</h4>
<div class="outline-text-4" id="text-4-3-1">
<p>
The java source code has to work on both 32 and 64 bit machines.
</p>

<p>
On 32 bit machines, calls to gtk that use <code>long</code> in the paramater will not compile.
</p>

<p>
All such <code>longs</code> should have an <code>/*int*/</code> annotation after it.
For example:
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #b22222;">//</span><span style="color: #b22222;">This will cause a 32 bit build to fail:</span>
<span style="color: #228b22;">void</span> <span style="color: #0000ff;">gtk_css_provider_load_from_css</span> (<span style="color: #228b22;">long</span> <span style="color: #a0522d;">context</span>, <span style="color: #228b22;">String</span> <span style="color: #a0522d;">css</span>)  { .. }
 <span style="color: #b22222;">//                                      </span><span style="color: #b22222;">^ missing /*int*/</span>

<span style="color: #b22222;">//</span><span style="color: #b22222;">Every 'long' should followed by a '/*int*/' like so:</span>
<span style="color: #228b22;">void</span> <span style="color: #0000ff;">gtk_css_provider_load_from_css</span> (<span style="color: #228b22;">long</span> <span style="color: #b22222;">/*</span><span style="color: #b22222;">int*/</span> <span style="color: #a0522d;">context</span>, <span style="color: #228b22;">String</span> <span style="color: #a0522d;">css</span>)
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-4-3-2" class="outline-4">
<h4 id="sec-4-3-2"><span class="section-number-4">4.3.2</span> Enable checks of for 32/64 bit with swt tools.</h4>
<div class="outline-text-4" id="text-4-3-2">
<p>
To avoid missing these things by accident, SWT Tools can autmatically check these things and mark them as errors.
</p>

<p>
This functionality must first be enabled thou.
</p>

<p>
By now you should have SWT Developer tools  already installed.
</p>

<ol class="org-ol">
<li>Right click on the 'org.eclipse.swt' project.</li>
</ol>

<div class="figure">
<p><img src="./img/img_2015_03_31__11_34_52.png" alt="img_2015_03_31__11_34_52.png" />
</p>
</div>

<ol class="org-ol">
<li>From the drop down menu, enable 'SWT Tools -&gt; Report 32/64 bit problems'</li>

<li>Now if you don't include the <code>/*int*/</code> a warning will be thrown in your the problem view:</li>
</ol>

<div class="figure">
<p><img src="./img/img_2015_03_31__11_36_36.png" alt="img_2015_03_31__11_36_36.png" />
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> References</h3>
<div class="outline-text-3" id="text-4-4">
<p>
<a href="https://www.eclipse.org/swt/fixbugs.php">https://www.eclipse.org/swt/fixbugs.php</a>
</p>
</div>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> SWT Development, navigating code base.</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> Learning SWT</h3>
<div class="outline-text-3" id="text-5-1">
<p>
To learn about SWT, try out a bunch of these snippets: 
<a href="https://www.eclipse.org/swt/snippets/">https://www.eclipse.org/swt/snippets/</a>
</p>

<p>
Note, these are available in the SWT repo, search for "Snippet1.java"
</p>
</div>
</div>
<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> General Widget Hierarchy</h3>
<div class="outline-text-3" id="text-5-2">
<p>
Widget is the main <b>Widget</b>. Everything else extends Widget. 
</p>

<p>
The most interesting classes are Widget,Control and Composite.
Most widgets fork off of these.
</p>
</div>

<div id="outline-container-sec-5-2-1" class="outline-4">
<h4 id="sec-5-2-1"><span class="section-number-4">5.2.1</span> Illustration:</h4>
<div class="outline-text-4" id="text-5-2-1">

<div class="figure">
<p><img src="http://eclipse.or.kr/images/8/88/Swt-hiearchy.gif" alt="Swt-hiearchy.gif" />
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3"><span class="section-number-3">5.3</span> About GtkHandles</h3>
<div class="outline-text-3" id="text-5-3">
<p>
Gtk Handles are basically gtk pointers to the widgets.
</p>

<p>
When you first look at a widget, you generally first look at the handles that are defined in the widget.
I.e, each SWT Widget is often made up out of several GtkWidgets or has pointers to GtkWidgets.
In general <code>createHandle()</code> is a good place to start. Also inspect <code>*Handle*()</code> methods of the current widget
and the widgets above in the hierarchy.
</p>

<p>
Handles declarations are inherited. But they are allocated and assigned at a specific widget level. 
</p>

<p>
For example Widget declares <b>handle</b>, Control declares <b>fixedHandle</b> but they never allocate them.
Instead for example somewhere down at Combo you might see something like:
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #0000ff;">createHandle</span> () {
 ..
 fixedHandle = swt_fixed_new();
 handle = Gtk_combo_box_text_new();
 ..
}
</pre>
</div>

<p>
For example, here is an <b>incomplete</b> diagram of some widgets and their handles:
</p>

<div class="figure">
<p><img src="./img/img_2015_03_11__17_33_30.png" alt="img_2015_03_11__17_33_30.png" />
</p>
</div>
</div>
</div>
<div id="outline-container-sec-5-4" class="outline-3">
<h3 id="sec-5-4"><span class="section-number-3">5.4</span> SWT Fixed</h3>
<div class="outline-text-3" id="text-5-4">
<p>
SWTFixed is custom C code that we include in SWT. It is a container that allows us to place SWT Widgets with absolute positioning.
</p>

<p>
It was introduced in SWT during the Gtk2 to Gtk3 migration, because the old GtkFixed container was removed in Gtk3.
</p>

<p>
NOTE: Gtk3 has 'a' fixed container: <a href="https://developer.gnome.org/gtk3/stable/GtkFixed.html">GtkFixed</a> but that behaves differently than SWTFixed. 
For instance, when drawing multiple widgets, subsequent widigets:
</p>

<p>
In SWTFixed: Are drawn beneath the first widget.
</p>

<p>
In GTKFixed: Are drawn on top of the first widget.
</p>

<p>
SWTFixed also has support to move widgets up or down layers.
</p>

<p>
SWTFixed is defined in <code>os_custom.h</code> and <code>os_custom.c</code>. In my case they are here:
</p>

<pre class="example">
/home/lufimtse/git/eclipse.platform.swt/bundles/org.eclipse.swt/Eclipse SWT PI/gtk/library/os_custom.c
</pre>
</div>
</div>
<div id="outline-container-sec-5-5" class="outline-3">
<h3 id="sec-5-5"><a id="ID-5df24ddc-8523-4467-a642-c7b0a874cf35"></a><span class="section-number-3">5.5</span> OS.java introduction.</h3>
<div class="outline-text-3" id="text-5-5">
</div>
<div id="outline-container-sec-5-5-1" class="outline-4">
<h4 id="sec-5-5-1"><span class="section-number-4">5.5.1</span> About OS.java</h4>
<div class="outline-text-4" id="text-5-5-1">
<p>
All java is eventually translated to Gtk.
</p>

<p>
The bridge between java and Gtk is in OS.java. OS.java is a file that we write our self (not generated).
It contains many bindings to gtk functions, but not all of them. Sometimes we have to add 
method signatures in there manually for new functions.
</p>

<p>
In my case, it is located here:
</p>
<pre class="example">
/org.eclipse.swt/Eclipse SWT PI/gtk/org/eclipse/swt/internal/gtk/OS.java
</pre>

<p>
There are several types of code in this file. 
</p>

<dl class="org-dl">
<dt>Method bindings</dt><dd>These are typically wrapped in a lock</dd>
</dl>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #8b2252;">/** </span><span style="color: #8b2252;">@param</span><span style="color: #8b2252;"> widget cast=(GtkWidget *) */</span>
<span style="color: #a020f0;">public</span> <span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #a020f0;">native</span> <span style="color: #228b22;">void</span> <span style="color: #0000ff;">_gtk_drag_dest_unset</span>(<span style="color: #228b22;">long</span> <span style="color: #b22222;">/*</span><span style="color: #b22222;">int*/</span> <span style="color: #a0522d;">widget</span>);
<span style="color: #a020f0;">public</span> <span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">void</span> <span style="color: #0000ff;">gtk_drag_dest_unset</span>(<span style="color: #228b22;">long</span> <span style="color: #b22222;">/*</span><span style="color: #b22222;">int*/</span> <span style="color: #a0522d;">widget</span>) {
        lock.lock();
        <span style="color: #a020f0;">try</span> {
                _gtk_drag_dest_unset(widget);
        } <span style="color: #a020f0;">finally</span> {
                lock.unlock();
        }
}
</pre>
</div>

<dl class="org-dl">
<dt>Constants and ENUMS</dt><dd><p>
  C constants and C Enums are delcared as plain ints. 
like so:
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #a020f0;">public</span> <span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">int</span> <span style="color: #a0522d;">GTK_SCROLL_STEP_UP</span> = 6;
</pre>
</div>

<p>
Note, if you need to add a C enum to OS.java, C ENUMS (Enumirations) begin at 0.
</p></dd>
</dl>

<p>
Do note, that the javadoc is parsed by the jni. So be careful about what you put in there.
</p>

<dl class="org-dl">
<dt>Static Strings translated to C-bytes</dt><dd><p>
  Gtk uses some static strings in things like registring event handlers. 
We translate java strings into C strings like so:
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #a020f0;">public</span> <span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">byte</span>[] <span style="color: #a0522d;">key_press_event</span> = ascii(<span style="color: #8b2252;">"key-press-event"</span>);
</pre>
</div></dd>

<dt>the Gtk Version</dt><dd><p>
  A lot of SWT code is wrapped around the if-checks that make sure code runs only on certain GTK versions.
The version code is defined in OS.java like so: 
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #a020f0;">public</span> <span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">boolean</span> <span style="color: #a0522d;">GTK3</span> = GTK_VERSION &gt;= VERSION(3, 0, 0);
</pre>
</div></dd>
</dl>
</div>
</div>
<div id="outline-container-sec-5-5-2" class="outline-4">
<h4 id="sec-5-5-2"><a id="ID-29f1015d-5807-4933-bc2e-ea0de874c472"></a><span class="section-number-4">5.5.2</span> OS.java compilation to os.h os.c etc..</h4>
<div class="outline-text-4" id="text-5-5-2">
<p>
SWT tools compiles OS.java down to a set of files like os.c.
These can be found under:
</p>

<pre class="example">
/home/lufimtse/git/eclipse.platform.swt/bundles/org.eclipse.swt/Eclipse SWT PI/gtk/library/os.c
</pre>

<p>
Do note, some of these we adjust by hand and some of these are generated.
The content of <code>../library/..</code> is as following:
</p>
<dl class="org-dl">
<dt>os.c</dt><dd>This file is automatically generated by SWT Tools. It contains native bindings.</dd>
<dt>os.h</dt><dd>This file we adjust manually. It contains special signatures.</dd>
<dt><code>os_stats.*</code></dt><dd>These are auto-generated.</dd>
<dt><code>os_custom.h</code></dt><dd>This file we adjust manually.
We add new function signatures here when we add a new method to OS.java.</dd>
<dt><code>os_custom.c</code></dt><dd>This file we adjust manually. This contains our custom code, such as the SWTFixed container.</dd>
</dl>

<p>
In later parts of this guide, I will explain how to add new methods to OS.java. 
For now keep the above in mind.
</p>
</div>
</div>
<div id="outline-container-sec-5-5-3" class="outline-4">
<h4 id="sec-5-5-3"><span class="section-number-4">5.5.3</span> Submission of os.h os.c to gerrit</h4>
<div class="outline-text-4" id="text-5-5-3">
<p>
When SWT Tools re-generates os.h os.c etc, they may appear in your git staging area.
</p>
</div>
</div>
</div>
<div id="outline-container-sec-5-6" class="outline-3">
<h3 id="sec-5-6"><span class="section-number-3">5.6</span> SWT Code style notes</h3>
<div class="outline-text-3" id="text-5-6">
</div><div id="outline-container-sec-5-6-1" class="outline-4">
<h4 id="sec-5-6-1"><span class="section-number-4">5.6.1</span> Java doc notes</h4>
<div class="outline-text-4" id="text-5-6-1">
<dl class="org-dl">
<dt>No platform dependent info</dt><dd>No technical details that are platform-specific go into Java docs. (e.g no gtk-specific items).</dd>
</dl>
</div>
</div>
<div id="outline-container-sec-5-6-2" class="outline-4">
<h4 id="sec-5-6-2"><span class="section-number-4">5.6.2</span> Method naming</h4>
<div class="outline-text-4" id="text-5-6-2">
<dl class="org-dl">
<dt>Gtk functions</dt><dd>Any gtk-specific functionality should be <code>gtk_function_name</code>.
Even if it doesn't match one-to-one to a gtk function. (do try to avoid conflicts thou).</dd>
</dl>

<p>
Any other naming should be general enough to be translated to other platforms.
</p>
</div>
</div>
<div id="outline-container-sec-5-6-3" class="outline-4">
<h4 id="sec-5-6-3"><span class="section-number-4">5.6.3</span> Method access modifiers</h4>
<div class="outline-text-4" id="text-5-6-3">
<p>
Methods should in general not have modifiers unless private/public.
</p>

<p>
void myMeth() &#x2026;
</p>

<p>
Avoid 'protected' unless you're sub-classing things.
</p>
</div>
</div>
</div>
<div id="outline-container-sec-5-7" class="outline-3">
<h3 id="sec-5-7"><span class="section-number-3">5.7</span> gerrit Submission, what to include&#xa0;&#xa0;&#xa0;<span class="tag"><span class="GTK">GTK</span></span></h3>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> SWT and Gtk Versions</h2>
<div class="outline-text-2" id="text-6">
</div><div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1"><span class="section-number-3">6.1</span> About Gtk Versions</h3>
<div class="outline-text-3" id="text-6-1">
<p>
In SWT Land, the version of GTK that you're running on can make a big difference in how 
your snippet will behave. This is especially true for all things CSS related because there are many changes in that area.
</p>

<p>
It's not just the difference between Gtk2 &amp; Gtk3, but keep an eye on the differences between:
</p>
<ul class="org-ul">
<li>Gtk3.8 (RHEL7)</li>
<li>Gtk3.10 (CSS Introduced) (many things broke here)</li>
<li>Gtk3.12</li>
<li>Gtk3.14 (Fedora 21)</li>
<li>Gtk3.16 (Fedora 22) (removal of stock icons, things break here) etc&#x2026;</li>
</ul>

<p>
As such, you need to configure a setup where you can run/test on various Gtk Versions.
</p>
</div>
</div>
<div id="outline-container-sec-6-2" class="outline-3">
<h3 id="sec-6-2"><span class="section-number-3">6.2</span> SWT's Gtk Version Support</h3>
<div class="outline-text-3" id="text-6-2">
<p>
At time of writing Gtk 2 &amp; 3 are both supported in SWT. 
</p>

<p>
To find out which exact versions are <b>currently</b> supported by SWT, inspect gtk's Display.java:
</p>

<p>
<a href="http://git.eclipse.org/c/platform/eclipse.platform.swt.git/tree/bundles/org.eclipse.swt/Eclipse%20SWT/gtk/org/eclipse/swt/widgets/Display.java">http://git.eclipse.org/c/platform/eclipse.platform.swt.git/tree/bundles/org.eclipse.swt/Eclipse%20SWT/gtk/org/eclipse/swt/widgets/Display.java</a>
</p>

<p>
And search for code like this:
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #b22222;">/* </span><span style="color: #b22222;">GTK Version */</span>
<span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">int</span> <span style="color: #a0522d;">GTK3_MAJOR</span> = 3;
<span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">int</span> <span style="color: #a0522d;">GTK3_MINOR</span> = 0;
<span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">int</span> <span style="color: #a0522d;">GTK3_MICRO</span> = 0;
<span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">int</span> <span style="color: #a0522d;">GTK2_MAJOR</span> = 2;
<span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">int</span> <span style="color: #a0522d;">GTK2_MINOR</span> = 18;
<span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">int</span> <span style="color: #a0522d;">GTK2_MICRO</span> = 0;
</pre>
</div>

<p>
This means Gtk3.0.0 onwards and Gtk2.18.0 onwards.
</p>

<p>
Once in a while, you will come across bugs where the version is bumped. Keep an eye on this by following
<code>platform-swt-inbox@eclipse.org</code> in bugzilla. E.g <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=446454">https://bugs.eclipse.org/bugs/show_bug.cgi?id=446454</a>
</p>
</div>
</div>
<div id="outline-container-sec-6-3" class="outline-3">
<h3 id="sec-6-3"><span class="section-number-3">6.3</span> Switching Snippets to run on either GTK2 or GTK3.</h3>
<div class="outline-text-3" id="text-6-3">
<p>
Edit the runconfiguration and add the environmental variable: <code>SWT_GTK3=1</code> to run in Gtk3 mode. (or 0 for Gtk2 mode).
</p>

<p>
Similarly, if you want to run your main Eclipse in Gtk3, in bash you can:
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #483d8b;">export</span> <span style="color: #a0522d;">SWT_GTK3</span>=1
eclipse
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-6-4" class="outline-3">
<h3 id="sec-6-4"><a id="ID-a5c7fcf0-377b-404c-9de6-52f94f31c1c4"></a><span class="section-number-3">6.4</span> Gtk version on your system</h3>
<div class="outline-text-3" id="text-6-4">
<p>
If you want to find out which version of Gtk is on your system, execute:
</p>
<div class="org-src-container">

<pre class="src src-sh">pkg-config --modversion gtk+-3.0
</pre>
</div>

<p>
E.g:
</p>
<pre class="example">
RHEL7: 3.8.8
f21 : 3.14.9
</pre>
</div>
</div>
<div id="outline-container-sec-6-5" class="outline-3">
<h3 id="sec-6-5"><span class="section-number-3">6.5</span> Getting gtk version programtically in java/SWT</h3>
<div class="outline-text-3" id="text-6-5">
<p>
Once you'll compile multiple Gtk versions (Gtk 3.10, Gtk 3.12, Gtk 3.14 etc..), then 
you may want to set the title of your snippet to reflect the gtk version.
</p>

<p>
This is very useful to ensure that your snippet is running a specific version of GTK.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #b22222;">//</span><span style="color: #b22222;">Print Gtk version.</span>
  System.out.println(<span style="color: #8b2252;">"GTK Version: "</span> + OS.gtk_major_version() + <span style="color: #8b2252;">"."</span>
      + OS.gtk_minor_version() + <span style="color: #8b2252;">"."</span> + OS.gtk_micro_version());


<span style="color: #b22222;">//</span><span style="color: #b22222;">Set widget title to gtk version:</span>
        <span style="color: #a020f0;">public</span> <span style="color: #a020f0;">static</span> <span style="color: #228b22;">String</span> <span style="color: #0000ff;">getGtkVersion</span> () {
                <span style="color: #a020f0;">return</span> OS.gtk_major_version() + <span style="color: #8b2252;">"."</span> + OS.gtk_minor_version() + <span style="color: #8b2252;">"."</span> + OS.gtk_micro_version();
        }
<span style="color: #b22222;">//</span><span style="color: #b22222;">..</span>
shell.setText (ShellTest.getGtkVersion ());
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-6-6" class="outline-3">
<h3 id="sec-6-6"><span class="section-number-3">6.6</span> Getting gtk version versions Eclipse is running on</h3>
<div class="outline-text-3" id="text-6-6">
<p>
When you fire up Eclipse, sometimes you want to check which version of Gtk things run on. To do this:
</p>
<ul class="org-ul">
<li>Help -&gt; About</li>
<li>[Installation Details]</li>
<li><i>Configuration</i> tab.</li>
<li>Look there for <b>org.eclipse.swt.internal.gtk.version property.</b></li>
</ul>

<p>
Source: <a href="http://blog.vogella.com/2015/03/20/identifying-the-gtk-version-your-eclipse-ide-is-using/">http://blog.vogella.com/2015/03/20/identifying-the-gtk-version-your-eclipse-ide-is-using/</a>
</p>
</div>
</div>
<div id="outline-container-sec-6-7" class="outline-3">
<h3 id="sec-6-7"><span class="section-number-3">6.7</span> Gtk Versions on Fedora/Red Hat</h3>
<div class="outline-text-3" id="text-6-7">
<p>
Sometimes you might have to find out which version of GTK was running on which Fedora/Red Hat.
</p>

<p>
List of GTK versions in general: <a href="http://en.wikipedia.org/wiki/GTK+">http://en.wikipedia.org/wiki/GTK+</a>
</p>

<p>
List of GTK`s in fedora: <a href="http://koji.fedoraproject.org/koji/packageinfo?packageID=10393">http://koji.fedoraproject.org/koji/packageinfo?packageID=10393</a>
</p>

<p>
Red hat equivalent: <a href="https://brewweb.devel.redhat.com/packageinfo?packageID=33894">https://brewweb.devel.redhat.com/packageinfo?packageID=33894</a>
</p>
</div>
</div>
</div>
<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Native Gtk Applications</h2>
<div class="outline-text-2" id="text-7">
</div><div id="outline-container-sec-7-1" class="outline-3">
<h3 id="sec-7-1"><span class="section-number-3">7.1</span> About</h3>
<div class="outline-text-3" id="text-7-1">
<p>
Often you will run into a situation where you have to write native Gtk code to see if the issue is in Gtk or in SWT.
</p>

<p>
You should become comfortable writing and compiling Gtk2 and Gtk3 native code.
</p>
</div>
</div>
<div id="outline-container-sec-7-2" class="outline-3">
<h3 id="sec-7-2"><span class="section-number-3">7.2</span> Brief overview of Gtk</h3>
<div class="outline-text-3" id="text-7-2">
<dl class="org-dl">
<dt>Caution : Gtk Vs Gdk</dt><dd><p>
  It's not all "Gtk". Some functions start with gDk and some with gTk. 
Be attentive to the prefix and seek out the relevant documentation.
</p>

<p>
In general, Gtk is build on top of the underlying Gdk.
</p>

<p>
For example for Drag and drop, there are Gdk and Gtk functions like:
</p>

<div class="org-src-container">

<pre class="src src-c">gtk_drag_cancel ()
gdk_drag_abort&#160;()
</pre>
</div>

<p>
<a href="https://developer.gnome.org/gtk3/stable/gtk3-Drag-and-Drop.html">https://developer.gnome.org/gtk3/stable/gtk3-Drag-and-Drop.html</a>
</p>

<p>
<a href="https://developer.gnome.org/gdk3/stable/gdk3-Drag-and-Drop.html">https://developer.gnome.org/gdk3/stable/gdk3-Drag-and-Drop.html</a>
</p></dd>

<dt>General structure of Gtk <sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup></dt><dd><p>
  In fact, Gtk is a composition of multiple libraries. 
</p>
<div class="org-src-container">

<pre class="src src-sh">//Gtk composition:
GKT+
  |-&gt; X11     (Xlib)     //Window manager
  |-&gt; Glib ()
      |-&gt; Glib ()
      |-&gt; GObject ()     //Object-oriented framework
      |-&gt; GModule ()
      |-&gt; GThread ()
      |-&gt; GIO ()
  |-&gt; Cairo   ()         //2-D Vector renderer 
  |-&gt; GDK ()             //wrapper around low-lvl graphics. (fonts/dnd,cursors)

  |-&gt; GdkPixbuf ()       //image manipulation.
  |-&gt; Pango ()           //Text/Font
  |-&gt; ATK ()             //Accessibility toolkit.

//Structural overview
+------------------------------- ----------+
|             Your Application             |
+------------------------------------------+
|                 GtkAda                   |
|              +-----------------+         |
|              |      GTK        |         |
|         +----+-----------------+----+    |
|         |           GDK             |    |
|    +----+------+         +----------+----+
|    |   Pango   |         |     Cairo     |
+----+-----------+----+----+---------------+
|        GLIB         |   X-Window / Win32  |
+---------------------+--------------------+

//From Gtk to your app:
Xlib &lt;-&gt; GDK &lt;-&gt; GTK &lt;-&gt; Your App //gdk is intermediate
</pre>
</div></dd>
</dl>
</div>
</div>

<div id="outline-container-sec-7-3" class="outline-3">
<h3 id="sec-7-3"><span class="section-number-3">7.3</span> Learning Gtk</h3>
<div class="outline-text-3" id="text-7-3">
<p>
Good places to get you going are:
</p>

<ol class="org-ol">
<li><p>
Quick tutorial:
</p>

<p>
This tutorial might not feel 'satisfying' or might not explain things, but it's a good place to get a general picture: 
<a href="http://zetcode.com/tutorials/gtktutorial/">http://zetcode.com/tutorials/gtktutorial/</a>
</p></li>

<li><p>
The gtk2 book: <i>(Good stuff)</i>
</p>

<p>
The only (decent) book on Gtk at the time of writing covers Gtk2. But it's good to learn about GTK2 and in paralalel look at how things changed in Gtk3.
Gtk2 and Gtk3 are relativley similar. More info here: <a href="http://www.gtkbook.com/">http://www.gtkbook.com/</a>
</p></li>

<li><p>
There is also the official Gtk3 Getting-started-guide:
</p>

<p>
However, it is somewhat dry I found. I never read it except for the DnD part:
<a href="https://developer.gnome.org/gtk3/stable/gtk-getting-started.html">https://developer.gnome.org/gtk3/stable/gtk-getting-started.html</a>
</p></li>
</ol>
</div>
</div>
<div id="outline-container-sec-7-4" class="outline-3">
<h3 id="sec-7-4"><span class="section-number-3">7.4</span> Gtk Api documentation</h3>
<div class="outline-text-3" id="text-7-4">
<dl class="org-dl">
<dt>Gtk2 &amp; Gtk3 Documentation</dt><dd><p>
  There is (Gtk3|Gtk2) &amp;&amp; (Stable|Unstable) documentation, 
to switch between them change 2 -&gt; 3, stable -&gt; unstable. E.g
</p>

<p>
<a href="https://developer.gnome.org/gtk3/stable/GtkWidget.html">https://developer.gnome.org/gtk3/stable/GtkWidget.html</a>
</p>

<p>
<a href="https://developer.gnome.org/gtk3/unstable/GtkWidget.html">https://developer.gnome.org/gtk3/unstable/GtkWidget.html</a>
</p>

<p>
<a href="https://developer.gnome.org/gtk2/stable/GtkWidget.html">https://developer.gnome.org/gtk2/stable/GtkWidget.html</a>
</p></dd>

<dt>Googling Api</dt><dd><p>
  I usually Google with "Gtk" and "ref" in the prefix. This usually get's me to the api.
</p>
<div class="org-src-container">

<pre class="src src-sh">gtk&lt;Version&gt; ref &lt;Key word&gt;

e.g
gtk3 ref gtk_combo_box_text
gtk2 ref gtk_combo_box_text
</pre>
</div></dd>

<dt>Note about unstable api</dt><dd><p>
  You should consider browsing unstable api more often than stable api.
Often you will find that some functions get deprecated in latest versions or
new functions are added to add missing functionality. Or simply the documentation changes.
</p>

<p>
The general rule of thumb is that before adding new method to OS.java, double check the
unstable documentation for that function first.
</p>

<p>
To see a list of available versions, go here and click on the newest:
</p>

<p>
<a href="https://developer.gnome.org/gtk3/">https://developer.gnome.org/gtk3/</a>
</p></dd>
</dl>
</div>
</div>

<div id="outline-container-sec-7-5" class="outline-3">
<h3 id="sec-7-5"><span class="section-number-3">7.5</span> Getting help</h3>
<div class="outline-text-3" id="text-7-5">
<p>
You will get stuck in GTK land sometimes. 
</p>

<p>
Good places to get help are:
</p>
<dl class="org-dl">
<dt>gtk+ irc channel</dt><dd>Folks are very helpful here. I often got responses very quickly.
Mostly good for quick little bits and general wisdom.</dd>

<dt>gtk+ bugzilla</dt><dd>If you think you have come across a bug, or need some official statment from GTK folks 
about some functionality (e.g if something doesn't work in SWT, have a link to a gtk bug
that explains things). Posting a bug to the GTK bugzilla is the way to go. E.g:
<a href="https://bugzilla.gnome.org/show_bug.cgi?id=747798">https://bugzilla.gnome.org/show_bug.cgi?id=747798</a></dd>

<dt>Mailing list</dt><dd>I didn't get many responses when I asked complex questions, but for small &amp; straight forward
stuff, people respond quite well:
See: <a href="http://www.gtk.org/mailing-lists.php">http://www.gtk.org/mailing-lists.php</a></dd>

<dt>Stack overflow</dt><dd>For your broken snippets. Tag things with gtk+
<a href="http://stackoverflow.com/">http://stackoverflow.com/</a></dd>
</dl>

<p>
See: <a href="http://www.gtk.org/development.php">http://www.gtk.org/development.php</a>
</p>
</div>
</div>
<div id="outline-container-sec-7-6" class="outline-3">
<h3 id="sec-7-6"><span class="section-number-3">7.6</span> Gtk Source code</h3>
<div class="outline-text-3" id="text-7-6">
<p>
You should check out the Gtk repository. Often you will look through the Gtk Source code to find things that are not in their Documentation. 
Usually I look for the macros that cast things e.g <code>GTK_CONTAINER(container)</code> or I look at <code>*.h</code> files to see how GtkWidgets are made up.
</p>

<p>
Repo can be checked out via:
</p>

<pre class="example">
git clone git://git.gnome.org/gtk+
</pre>

<p>
See: <a href="http://www.gtk.org/download/">http://www.gtk.org/download/</a>
</p>
</div>
</div>
<div id="outline-container-sec-7-7" class="outline-3">
<h3 id="sec-7-7"><span class="section-number-3">7.7</span> Gtk native code environment</h3>
<div class="outline-text-3" id="text-7-7">
<p>
This is a personal choice. You can use things like Emacs &amp; CEDET or tie Gtk into Eclipse with C-Development tools. 
</p>

<p>
For Emacs, there is a nice guide that covers things:
</p>

<p>
<a href="http://tuhdo.github.io/c-ide.html">http://tuhdo.github.io/c-ide.html</a>
</p>

<p>
After, you might need to link /usr/libi
</p>

<p>
For the latter, I wrote a blog post on how you can configure Eclipse to launch Gtk2/Gtk3 applications:
</p>

<p>
<a href="https://coffeeorientedprogramming.wordpress.com/2014/09/23/hello-world-gtk3-program-in-eclipse/">https://coffeeorientedprogramming.wordpress.com/2014/09/23/hello-world-gtk3-program-in-eclipse/</a>
</p>

<p>
Either way, you might need to link to the Gtk Repository so that Emacs/Eclipse can understand things like ~#include &lt;gtk/gtk.h&gt;
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #483d8b;">cd</span> /usr/include
sudo ln -s ~/git/gtk+/gdk gdk
sudo ln -s ~/git/gtk+/gtk gtk
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-7-8" class="outline-3">
<h3 id="sec-7-8"><span class="section-number-3">7.8</span> Debugging Gtk Apps</h3>
<div class="outline-text-3" id="text-7-8">
</div><div id="outline-container-sec-7-8-1" class="outline-4">
<h4 id="sec-7-8-1"><span class="section-number-4">7.8.1</span> GtkInspector</h4>
<div class="outline-text-4" id="text-7-8-1">
</div><div id="outline-container-sec-7-8-1-1" class="outline-5">
<h5 id="sec-7-8-1-1"><span class="section-number-5">7.8.1.1</span> About</h5>
<div class="outline-text-5" id="text-7-8-1-1">
<p>
Gtk inspector is a good friend when it comes to troubleshooting styles/positioning and functionality of Widgets.
It can provide information about running Gtk Applications. (And note, this includes Eclipse).
</p>

<p>
Things it can do:
</p>
<ul class="org-ul">
<li>Display widget hierarchy</li>
<li>Live tweaking of properties (including CSS styles)</li>
<li>identify widgets by pointing to them</li>
<li>see widget composition (e.g GtkComboBoxText is made of GtkToggleButton, GtkTreeView, GtkEntry etc..)</li>
<li>Change themes on the fly.</li>
<li>And much more.</li>
</ul>

<p>
For example, here I am using GtkInspector to change the color of Entry on the fly with some CSS:
</p>


<div class="figure">
<p><img src="./img/img_2015_04_17__15_16_05.png" alt="img_2015_04_17__15_16_05.png" />
</p>
</div>
</div>
</div>
<div id="outline-container-sec-7-8-1-2" class="outline-5">
<h5 id="sec-7-8-1-2"><span class="section-number-5">7.8.1.2</span> Opening GtkInspector</h5>
<div class="outline-text-5" id="text-7-8-1-2">
<dl class="org-dl">
<dt>Manual Launch</dt><dd><p>
  Once a Gtk3.14+ app is open (this include Eclipse), press:
</p>

<p>
Ctrl+Shift+d  / (Ctrl+Shift+i) 
</p>

<p>
NOTE: Sometimes it doesn't open when the mouse is over some contorls like Canvas. 
In this case, just keep trying to open while hovering over other controls until it fires up.
</p></dd>

<dt>Launch on app ran</dt><dd><p>
  You can set an environmental variable to indicate that GtkInspector should launch right away:
</p>

<pre class="example">
export GTK_DEBUG=interactive
</pre>

<p>
I don't use this much, but it can come in handy if you have troubles launching it manually.
</p></dd>
</dl>
</div>
</div>
<div id="outline-container-sec-7-8-1-3" class="outline-5">
<h5 id="sec-7-8-1-3"><span class="section-number-5">7.8.1.3</span> GtkInspector and reparenting</h5>
<div class="outline-text-5" id="text-7-8-1-3">
<p>
As a note, when you re-parent widgets in Gtk/Swt, the hierarchy doesn't get updated in GtkInspector.
This has an impact on widgets that do re-parenting, e.g SWT.Group/SWT Tabfolder.
</p>

<p>
If hierarchy matters, you should doublecheck pointers.
</p>
</div>
</div>
<div id="outline-container-sec-7-8-1-4" class="outline-5">
<h5 id="sec-7-8-1-4"><span class="section-number-5">7.8.1.4</span> Further</h5>
<div class="outline-text-5" id="text-7-8-1-4">
<p>
You should try to open it on a widget like ControlExample.java
</p>
</div>
</div>
<div id="outline-container-sec-7-8-1-5" class="outline-5">
<h5 id="sec-7-8-1-5"><span class="section-number-5">7.8.1.5</span> References</h5>
<div class="outline-text-5" id="text-7-8-1-5">
<p>
Upgrade ubuntu`s gtk to use gtkInspector:
<a href="http://www.webupd8.org/2014/10/how-to-install-gnome-314-in-ubuntu.html">http://www.webupd8.org/2014/10/how-to-install-gnome-314-in-ubuntu.html</a>
</p>

<p>
My blog post on it:
<a href="https://coffeeorientedprogramming.wordpress.com/2014/10/27/how-to-tell-if-you-are-running-eclipse-on-gtk2-or-on-gtk3/comment-page-1/#comment-8">https://coffeeorientedprogramming.wordpress.com/2014/10/27/how-to-tell-if-you-are-running-eclipse-on-gtk2-or-on-gtk3/comment-page-1/#comment-8</a>
</p>

<p>
Other:
<a href="http://blogs.gnome.org/mclasen/2014/11/23/gtk-inspector-update/">http://blogs.gnome.org/mclasen/2014/11/23/gtk-inspector-update/</a>
<a href="https://wiki.gnome.org/Projects/GTK+/Inspector">https://wiki.gnome.org/Projects/GTK+/Inspector</a>
</p>
</div>
</div>
</div>
<div id="outline-container-sec-7-8-2" class="outline-4">
<h4 id="sec-7-8-2"><span class="section-number-4">7.8.2</span> gtk Debug flags for apps&#xa0;&#xa0;&#xa0;<span class="tag"><span class="GTK">GTK</span></span></h4>
<div class="outline-text-4" id="text-7-8-2">
<p>
You can set launch flags to help debug gtk apps as well as SWT snippets.
</p>

<p>
E.g set global var <code>GTK_DEBUG = geometry</code>  to get detailed frame-sizes.
</p>

<p>
or &#x2013;g-fatal-warnings  will halt the app upon a warning.
</p>

<p>
See:<a href="https://developer.gnome.org/gtk3/3.8/gtk-running.html">debugging gtk+ applicatinos</a>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> GTK SO files Building&#xa0;&#xa0;&#xa0;<span class="tag"><span class="GTK">GTK</span></span></h2>
<div class="outline-text-2" id="text-8">
</div><div id="outline-container-sec-8-1" class="outline-3">
<h3 id="sec-8-1"><span class="section-number-3">8.1</span> About</h3>
<div class="outline-text-3" id="text-8-1">
<p>
You checked out two swt repos. SWT &amp; SWT's binaries.
The SWT binaries contiained ready-build SO files, ready to use.
</p>

<p>
Now sometimes swt developers (inc yourself) add functions in the OS.java, after which they re-build SO files.
When this is the case, if you pull the SWT master branch and try to run a snippet, you will get an 
unsatisfied-link error.
</p>

<p>
In this case, you will have to re-build your SO files your self. See below.
</p>
</div>
</div>
<div id="outline-container-sec-8-2" class="outline-3">
<h3 id="sec-8-2"><span class="section-number-3">8.2</span> Rebuilding SO file</h3>
<div class="outline-text-3" id="text-8-2">
<p>
Now I'm not 100% sure on how it's <b>suppose</b> to be done, but the below is how
I was taught to do it and I shall pass it on:
</p>
</div>
<div id="outline-container-sec-8-2-1" class="outline-4">
<h4 id="sec-8-2-1"><span class="section-number-4">8.2.1</span> Pre-requisites</h4>
<div class="outline-text-4" id="text-8-2-1">
<ul class="org-ul">
<li><p>
<b>SWT Tools</b>
</p>

<p>
Now, for new VMs and for new Eclipse installs, it's common to forget to install
SWT tools when starting this. You won't get told that SWT tools are missing, 
you'll just get weird errors.Double check that they are installed.
</p></li>

<li><p>
<b>Gtk Libs</b>
</p>

<p>
You will need to install the following packages on your system for build.sh below:
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b22222;">#</span><span style="color: #b22222;">non-fedora</span>
sudo yum install -y gtk3-devel gtk2-devel libXtst-devel mesa-libGLU-devel libXt-devel

<span style="color: #b22222;">#</span><span style="color: #b22222;">Fedora: auto insatll all libs needed for Gtk2 building.</span>
sudo yum-builddep gtk2   
sudo yum-builddep gtk3
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-sec-8-2-2" class="outline-4">
<h4 id="sec-8-2-2"><span class="section-number-4">8.2.2</span> Step-by-step</h4>
<div class="outline-text-4" id="text-8-2-2">
<ol class="org-ol">
<li><b>Clean Eclipse Projects</b>

<ul class="org-ul">
<li>Clean all Eclipse build files. (Project -&gt; clean). <i>(I used to forget this step a lot)</i></li>
</ul></li>

<li><b>Build jars</b>  

<ul class="org-ul">
<li><p>
Inside Eclipse,  run build.xml from <code>org.eclipse.swt.gtk.linux.x86_64/build.xml</code> , make sure the following is selected:
</p>
<pre class="example">
build.jars
build_libraries
</pre></li>
<li><p>
The execution will fail. It's ok. You should get something like: <sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup>
</p>
<pre class="example">
/home/lufimtse/git/eclipse.platform.swt/bundles/org.eclipse.swt/buildSWT.xml:918: The following error occurred while executing this line:
/home/lufimtse/git/eclipse.platform.swt/bundles/org.eclipse.swt/buildSWT.xml:890: javax.script.ScriptException: ReferenceError: "importClass" is not defined in &lt;eval&gt; at line number 3
</pre></li>
</ul></li>

<li><b>Navigate to library</b>
<ul class="org-ul">
<li><p>
Open terminal, go to library bin dir inside your SWT repository:
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #483d8b;">cd</span> ~/git/eclipse.platform.swt/bundles/org.eclipse.swt/bin/library/
</pre>
</div></li>
</ul></li>
<li><b>Set ENV Variables</b>

<ul class="org-ul">
<li><p>
Set correct export variables: (otherwise you get "fatal error: jni.h: No such file or directory")
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #483d8b;">export</span> <span style="color: #a0522d;">JAVA_HOME</span>=/usr/lib/jvm/java/
<span style="color: #483d8b;">export</span> <span style="color: #a0522d;">GTK_VERSION</span>=2.0
</pre>
</div></li>
</ul></li>
<li><p>
<b>Re-build wrapper</b>
</p>

<p>
The below will start the build proccess.
</p>
<div class="org-src-container">

<pre class="src src-sh">sh ./build.sh
</pre>
</div>

<p>
In case you get a missing file like:
</p>
<div class="org-src-container">

<pre class="src src-sh">fatal error: X11/extensions/XTest.h: No such file or directory
<span style="color: #b22222;">#</span><span style="color: #b22222;">include &lt;X11/extensions/XTest.h&gt;</span>
</pre>
</div>
<p>
Then you might not have installed all the required packages. (see pre-requires section above).
</p>

<p>
You could also query yum to find out which package  you need to install for the required file
like so:
</p>
<div class="org-src-container">

<pre class="src src-sh">yum whatprovides */XTest.h
</pre>
</div>

<p>
You might see some warnings about deprecated functions. Ideally we should strive to fix SWT so
that we don't have any of those warnings. It's a slow and gradual process.
</p></li>
<li><p>
<b>Copy new .so's across:</b>
</p>

<div class="org-src-container">

<pre class="src src-sh">cp -v ~/git/eclipse.platform.swt/bundles/org.eclipse.swt/bin/library/*.so ~/git/eclipse.platform.swt.binaries/bundles/org.eclipse.swt.gtk.linux.x86_64/
</pre>
</div></li>

<li><p>
<b>Gtk3 build</b>
</p>

<p>
Repeat steps 1-6 (starting with Clean-projects), but in step 4 export gtk3 version instead:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">export GTK_VERSION=3.0
</pre>
</div>
<p>
The first time you build Gtk2 SO files, the 2nd time around you build Gtk3 Wrappers.
</p>

<p>
Now, if you only intend to run on Gtk2 or Gtk3, then building only one of the above suffices.
</p>

<p>
I haven't investigated a way to fully automate this, but if you do find a way, let me know.
</p></li>
</ol>
</div>
</div>
<div id="outline-container-sec-8-2-3" class="outline-4">
<h4 id="sec-8-2-3"><span class="section-number-4">8.2.3</span> Automating the build-proccess</h4>
<div class="outline-text-4" id="text-8-2-3">
<p>
You'll be doing the above a lot, so some of the above can be automated:
</p>

<ol class="org-ol">
<li><b>Clean projects from eclipse</b> (as above)</li>

<li><p>
<b>Build jars</b>
</p>

<p>
Instead of running build.xml from eclipse, you can do the above from the command line:
</p>
<pre class="example">
cd /home/lufimtse/git/eclipse.platform.swt.binaries/bundles/org.eclipse.swt.gtk.linux.x86_64
ant -f build.xml build.jars
ant -f build.xml build_librarie
</pre></li>

<li><p>
<b>Build script</b>
</p>

<p>
I pieced together two scripts swtjnibuild3 / swtjnibuilt2 that run steps 2-6:
</p>

<p>
<b>swtjnibuilt2</b> (for the Gtk2 build)
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b22222;">#</span><span style="color: #b22222;">!/bin/</span><span style="color: #a020f0;">sh</span><span style="color: #b22222;"> </span>
<span style="color: #483d8b;">cd</span> /home/lufimtse/git/eclipse.platform.swt.binaries/bundles/org.eclipse.swt.gtk.linux.x86_64
ant -f build.xml build.jars
ant -f build.xml build_libraries
<span style="color: #483d8b;">cd</span> ~/git/eclipse.platform.swt/bundles/org.eclipse.swt/bin/library/
<span style="color: #483d8b;">export</span> <span style="color: #a0522d;">JAVA_HOME</span>=/usr/lib/jvm/java/
<span style="color: #483d8b;">export</span> <span style="color: #a0522d;">GTK_VERSION</span>=2.0
sh ./build.sh
cp -v ~/git/eclipse.platform.swt/bundles/org.eclipse.swt/bin/library/*.so ~/git/eclipse.platform.swt.binaries/bundles/org.eclipse.swt.gtk.linux.x86_64/
<span style="color: #483d8b;">echo</span> <span style="color: #8b2252;">"--------------------------------\nGTK2 build complete"</span>
</pre>
</div>

<p>
<b>swtjnibuilt3</b> (for Gtk3 build)
</p>

<p>
This is exactly the same as above, except <code>GTK_VERSION=3.0</code> instead of 2.0.
You can either two seperate scripts or write an if-statment based on paramater input.
</p></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-8-3" class="outline-3">
<h3 id="sec-8-3"><span class="section-number-3">8.3</span> References</h3>
<div class="outline-text-3" id="text-8-3">
<p>
<a href="https://www.eclipse.org/swt/jnigen.php">https://www.eclipse.org/swt/jnigen.php</a>
</p>
</div>
</div>
</div>
<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> Adding custom functions to OS.java</h2>
<div class="outline-text-2" id="text-9">
</div><div id="outline-container-sec-9-1" class="outline-3">
<h3 id="sec-9-1"><span class="section-number-3">9.1</span> Introduction</h3>
<div class="outline-text-3" id="text-9-1">
<p>
If you haven't read, first read <a href="#sec-5-5">OS.java introduction.</a> 
</p>

<p>
<b>Note:</b> For java code I referer to "methods". For C code  I refer to "functions".
</p>

<p>
The general process of adding new functions is:
</p>


<div class="figure">
<p><img src="./img/img_2015_04_20__11_40_24.png" alt="img_2015_04_20__11_40_24.png" />
</p>
</div>

<dl class="org-dl">
<dt>Adding new functions</dt><dd>New functions are introduced in Gtk3 and old functions are deprecated.
In these situations we need to manually add these method signatures to OS.java and <code>os_custom.h</code>.</dd>

<dt>Dynamic vs static functions</dt><dd><p>
  Dynamic functions are not build during compile time. They are only called at run time.
This allows us to have Gtk3 functions in a Gtk2 build or run deprecated functions only in 
gtk2 (or some specific gtk* version range).
</p>

<p>
dynamic functions have an annotation <code>@method flag=dynamic</code>
</p></dd>

<dt>Re-building SO-files</dt><dd>After you add new functions to OS.java &amp; os.h,
you will need to rebuild the SO file for Gtk2 &amp; Gtk3.</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-9-2" class="outline-3">
<h3 id="sec-9-2"><a id="ID-4c7ca6e6-243d-49e2-b790-a77321042a1b"></a><span class="section-number-3">9.2</span> Dynamic methods and <code>os_custom.h</code></h3>
<div class="outline-text-3" id="text-9-2">
<p>
Before adding a new function to OS.java, you should understand dynamic functions.
</p>

<dl class="org-dl">
<dt>About dynamic methods/functions</dt><dd><p>
  If you inspect OS.java and look at the javadoc of some of the functions,
you will notice a flag like this:
</p>

<pre class="example">
@method flags=dynamic
</pre>

<p>
This means the command is not compiled, but called dynamically on the fly.
</p>

<p>
This is useful for functions that are specific to certain versions of gtk.
E.g some functions were only introduced in Gtk3, as such those won't compile
on a gtk2 build. As such you make those dynamic.
Similarly, some gtk2 functions are deprecated in gtk3 and so that we only use
them in gtk2, thus we make them dynamic.
</p>

<p>
Note: not all functions have to be dynamic. You should only make them dynamic 
if there is a need for it.
</p></dd>

<dt>Determine if function should be dynamic</dt><dd><p>
   It is important to <b>throughly</b> check if the function that you are about to add
is specific to Gtk2, or Gtk3 or can be included in both.
</p>

<p>
Be attentive, sometimes there are bugs in the documentation,
i.e it might be missing a 'since 3.xyz' flag.
</p>

<p>
The safest way to ensure functionality, is to check <b>both</b> the latest <a href="https://developer.gnome.org/gtk3/stable/">Gtk3</a> and <a href="https://developer.gnome.org/gtk2/stable/">Gtk2</a> 
documentation and  read up about the function in both places.
</p>

<p>
The easiest way to do that, is to find the function, then change the '3' to a '2' in the url
<a href="https://developer.gnome.org/gtk3/stable/GtkWidget.htm">https://developer.gnome.org/gtk3/stable/GtkWidget.htm</a>
<a href="https://developer.gnome.org/gtk2/stable/GtkWidget.ht">https://developer.gnome.org/gtk2/stable/GtkWidget.ht</a>
</p>

<p>
For example, <a href="https://developer.gnome.org/gtk3/stable/GtkWidget.html#gtk-widget-set-halign">wtk<sub>widget</sub><sub>set</sub><sub>halign</sub>()</a> is defined in the Gtk3 documentation and there is no
'since 3.0' flag. However, upon checking of <a href="https://developer.gnome.org/gtk2/stable/GtkWidget.html">GtkWidget in gtk2</a>, I found that the function
doesn't exist there.
</p>

<p>
Another indication of functions not being present in certain gtk versions is that you might
get an 'implicidly defined function' in the build.sh output.
</p>

<p>
Now you should have deterimined if the function should be dynamic or not.
</p></dd>

<dt>Steps to make a function dynamic</dt><dd><ol class="org-ol">
<li>Add the <code>@method flag=dynamic</code> to the javadoc of the function.</li>
<li><p>
Add the signature to <code>os_custom.h</code>.
</p>

<p>
<b>Caution!</b>, there is a postfix '<sub>LIB</sub>' at the of the function:
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #483d8b;">#define</span> <span style="color: #a0522d;">gtk_widget_get_preferred_size_LIB</span> LIB_GTK
                                       ^-- Notice post fix <span style="color: #8b2252;">"_LIB"</span>
</pre>
</div>

<p>
The 2nd part of the Define 'LIB<sub>GTK</sub>' is a pointer to which library the
function comes from. In this case prefered size comes from LIB<sub>GTK</sub>. Libraries are defined as 
</p></li>

<li>Rebuild So file.</li>
</ol></dd>
</dl>
</div>
</div>
<div id="outline-container-sec-9-3" class="outline-3">
<h3 id="sec-9-3"><span class="section-number-3">9.3</span> Adding custom Functions to OS.Java</h3>
<div class="outline-text-3" id="text-9-3">
<p>
Adding your own method signature.
</p>

<dl class="org-dl">
<dt>Check if the function should be dynamic (see above</dt><dd></dd>

<dt>In OS.java add your signature so that it matches the other signatures</dt><dd><p>
   An easy way is to find a method with similar paramaters and copy its signature.
</p>

<p>
Be attentive to pointers with <b>long</b>. They should have an int cast after them so that
things compile on 32 bit machines.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #228b22;">long</span> <span style="color: #b22222;">/*</span><span style="color: #b22222;">int*/</span>
</pre>
</div>
<p>
You should <a href="#sec-4-3">Enable 32/64 bit checking by swt-tools</a>
</p></dd>

<dt>Manually edit <code>os_custom.h</code></dt><dd><p>
   If function is dynamic, manually edit <code>os_custom.h</code>  and add the new method signature in there.
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #483d8b;">#define</span> <span style="color: #a0522d;">gdk_disable_multidevice_LIB</span> LIB_GDK
</pre>
</div>
<p>
If it is not dynamic, this step is not necessary. 
</p></dd>

<dt>Rebuild your so file</dt><dd></dd>
</dl>
</div>
</div>

<div id="outline-container-sec-9-4" class="outline-3">
<h3 id="sec-9-4"><span class="section-number-3">9.4</span> What does SWT tools do</h3>
<div class="outline-text-3" id="text-9-4">
<p>
SWT tools will parse OS.java and generate os.c for you. Note, some files are generated, and
some we edit manually, see <a href="#sec-5-5-2">OS.java compilation to os.h os.c etc..</a>
</p>

<p>
To force OS.java to be rebuild, clean your projects.
</p>
</div>
</div>

<div id="outline-container-sec-9-5" class="outline-3">
<h3 id="sec-9-5"><span class="section-number-3">9.5</span> Adding custom C enums to OS.java</h3>
<div class="outline-text-3" id="text-9-5">
<p>
Enums are <i>enumirations</i>. I.e,  {Red,Green,Blue} is turned into {0,1,2}.
</p>

<p>
To add an enum like <a href="https://developer.gnome.org/gtk3/stable/GtkWidget.html#GtkAlign">GtkAlign</a> to OS.java, declare some static ints like:
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #8b2252;">/**</span>
<span style="color: #8b2252;"> * ## Enums</span>
<span style="color: #8b2252;"> */</span>
<span style="color: #8b2252;">/** GtkAlign enum */</span>
<span style="color: #a020f0;">public</span> <span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">int</span> <span style="color: #a0522d;">GTK_ALIGN_FILL</span> = 0;  <span style="color: #b22222;">//</span><span style="color: #b22222;">Enums start at 0.</span>
<span style="color: #a020f0;">public</span> <span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">int</span> <span style="color: #a0522d;">GTK_ALIGN_START</span> = 1;
<span style="color: #a020f0;">public</span> <span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">int</span> <span style="color: #a0522d;">GTK_ALIGN_END</span> = 2;
<span style="color: #a020f0;">public</span> <span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">int</span> <span style="color: #a0522d;">GTK_ALIGN_CENTER</span> = 3;
<span style="color: #a020f0;">public</span> <span style="color: #a020f0;">static</span> <span style="color: #a020f0;">final</span> <span style="color: #228b22;">int</span> <span style="color: #a0522d;">GTK_ALIGN_BASELINE</span> = 4;
</pre>
</div>

<p>
And when you declare a function, delcare the java-doc paramater cast like this:
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #008b8b;">@param</span> <span style="color: #228b22;">gtkalign</span> <span style="color: #a0522d;">cast</span>=(GtkAlign)    <span style="color: #b22222;">// </span><span style="color: #b22222;">note (GtkAlign) with no pointer, not (GtkAlign *)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-9-6" class="outline-3">
<h3 id="sec-9-6"><span class="section-number-3">9.6</span> Special custom bindings</h3>
<div class="outline-text-3" id="text-9-6">
<p>
In some rare situations you might have a function that you can't easily make dynamic.
E.g an overloaded function that has structs that are supported only in Gtk2/Gtk3.
In java you can overload a function, but in C you cannot.
</p>

<p>
In such situations, we need to inspect the generated os.c, find the "NO__.." line that
is genreated by swt tools and put it into os.h.
</p>

<p>
Example:  g<sub>object</sub><sub>set</sub>
</p>

<p>
Suppose you have:
<code>_g_object_set(long /*int*/ object, byte[] first_property_name, GdkRGBA data, long /*int*/ terminator);</code>
where <code>GdkRGBA</code> is specific to gtk3. 
</p>

<p>
Add the method signature to OS.java. Clean the project and attempt a build.
You will get a build error about GdkRGBA paramater in g<sub>object</sub><sub>set</sub>.
</p>

<p>
Now search os.c for "NO__ &#x2026;. g object set ", you will find something like:
<code>NO__1g_1object_1set__J_3BLorg_eclipse_swt_internal_gtk_GdkRGBA_2J</code>
</p>

<p>
Then in os.h, near ~ #define NO<sub>GdkRGBA</sub> you would add:
<code>#define NO__1g_1object_1set__J_3BLorg_eclipse_swt_internal_gtk_GdkRGBA_2J</code>
</p>

<p>
Meaning: (not very interesting as this is SWT genreated, but FYI:)
J - long
I - int
3B - byte[]
</p>

<p>
NOTE: if there is a 'J' - long in the signature, you need to add a 2nd line with 'I' ints, like:
</p>
<pre class="example">
#define NO__1g_1object_1set__I_3BLorg_eclipse_swt_internal_gtk_GdkRGBA_2I   //J*-&gt;I
#define NO__1g_1object_1set__J_3BLorg_eclipse_swt_internal_gtk_GdkRGBA_2J
</pre>

<p>
Alexander Kurtakov taught me this business.
</p>
</div>
</div>
<div id="outline-container-sec-9-7" class="outline-3">
<h3 id="sec-9-7"><span class="section-number-3">9.7</span> References</h3>
<div class="outline-text-3" id="text-9-7">
<p>
<a href="https://www.eclipse.org/swt/jnigen.php">https://www.eclipse.org/swt/jnigen.php</a>
<a href="https://www.eclipse.org/swt/jnigen_metadata.php">https://www.eclipse.org/swt/jnigen_metadata.php</a>
<a href="http://homepage.cs.uiowa.edu/~slonnegr/wpj/JNI.pdf">http://homepage.cs.uiowa.edu/~slonnegr/wpj/JNI.pdf</a>
</p>
</div>
</div>
</div>
<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> Testing on several different Gtk Versions</h2>
<div class="outline-text-2" id="text-10">
</div><div id="outline-container-sec-10-1" class="outline-3">
<h3 id="sec-10-1"><span class="section-number-3">10.1</span> About</h3>
<div class="outline-text-3" id="text-10-1">
<p>
Your snippet might work well on Gtk3.14, but will fail on Gtk3.8. 
</p>

<p>
Or your snippet might work well on a themed Gtk, but on an unthemed Gtk there may be glitches.
</p>

<p>
This is especially true for CSS &amp; style related changes.
</p>

<p>
To ensure cross-version functionality, you should test on many different versions.
</p>
</div>
</div>
<div id="outline-container-sec-10-2" class="outline-3">
<h3 id="sec-10-2"><span class="section-number-3">10.2</span> Versions to test on</h3>
<div class="outline-text-3" id="text-10-2">
<p>
In general, you should test on major releases, e.g:
</p>
<div class="org-src-container">

<pre class="src src-sh">Gtk2.24  //latest Gtk2 is ok.
Gtk3.8  //RHEL 7 lives here
Gtk3.10 //Ubuntu 12 lives here. Css was introduced.
Gtk3.12 //This version is not very eventful to be honest.
Gtk3.14 //Fedora 21 lives here
Gtk3.16 //Fedora 22 lives here
</pre>
</div>

<p>
To find out which versions are considered <b>Major</b>, see the Reference manual:
<a href="https://developer.gnome.org/gtk3/">https://developer.gnome.org/gtk3/</a>
</p>
</div>
</div>
<div id="outline-container-sec-10-3" class="outline-3">
<h3 id="sec-10-3"><span class="section-number-3">10.3</span> Set up for Multiple GtkVersions</h3>
<div class="outline-text-3" id="text-10-3">
<dl class="org-dl">
<dt>Native Gtk compiling and Gtk in VM's</dt><dd><p>
  You can compile certain gtk versions on your machine, those that are 'close' to 
your current version. (see compiling below).
</p>

<p>
But very old and very new Gtk versions have a lot of dependencies making them hard to build.
I.e, you will get a lot of "missing package/file xyz." messages. E.g on my system (F21) 
I can only build as far as  gtk 3.13 and as low as gtk 3.10.
</p>

<p>
For very old and very new Gtk versions, I use virtual machines with Fedora/RHEL.
</p>

<p>
For VM's, you have to configure the full SWT development setup, including Eclipse, SWT tools and 
the swtjnibuilt2/3 scripts.
</p></dd>

<dt>Example setup</dt><dd><p>
  Currently, I use the following setup:
</p>
<div class="org-src-container">

<pre class="src src-sh">Gtk2.24 -&gt; my machine has this gtk version. I use with <span style="color: #a0522d;">SWT_GTK3</span>=0 flag.

Gtk3.8 -&gt; I have a RHEL 7 VM for testing

Gtk3.10, Gtk3.12 -&gt; I compiled Gtk on Fedora 

Gtk3.14 -&gt; My machine runs this version of Gtk. I use with <span style="color: #a0522d;">SWT_GTK3</span>=1 flag

Gtk3.16 -&gt; I have a Fedora 22 VM.
</pre>
</div></dd>

<dt>Testing workflow</dt><dd><ul class="org-ul">
<li>Normally, during development I will test with the Gtk on my system.</li>
<li>Closer to submission of the patch, I'll test with Gtk3.12 and Gtk3.10 that are also
on my system.</li>
<li>Then I submit to gerrit for review, but leave a note saying that the patch needs more testing.</li>
<li>I pull the patch on the Fedora/RHEL VM's and test them out.</li>
<li><p>
I then amend the patch, saying it's been tested on all these versions and push it to gerrit.
For example: <a href="https://git.eclipse.org/r/#/c/45415/">https://git.eclipse.org/r/#/c/45415/</a>
</p>
<div class="org-src-container">

<pre class="src src-sh">Bug 461616 - [GTK3] Combo improvements<span style="color: #a020f0;"> in</span> background/foreground for gtk3
(fix 2)

- Combox with READ_ONLY now get background as well.
- Menu <span style="color: #8b2252;">'text'</span> gets background. But GtkTreeMenu is inside a private
  struct inside GtkComboBoxText so we can<span style="color: #8b2252;">'t theme it'</span>s background.

Tests:
 - [X] Gtk 3.8
 - [X] Gtk 3.10
 - [X] Gtk 3.12
 - [X] Gtk 3.14
 - [X] Gtk 3.16

Change-Id: Idc315a02dbdb8fbec3f699e39735903709e1ed8c
Signed-off-by: Leo Ufimtsev <a href="mailto:lufimtse%40redhat.com">&lt;lufimtse@redhat.com&gt;</a>
</pre>
</div></li>
</ul></dd>
</dl>

<p>
you might need to compile mu Gtk from scratch.
This is needed for when you want to test SWT snippets on various gtk versions.
</p>
</div>
</div>
<div id="outline-container-sec-10-4" class="outline-3">
<h3 id="sec-10-4"><span class="section-number-3">10.4</span> Gtk from sources</h3>
<div class="outline-text-3" id="text-10-4">
</div><div id="outline-container-sec-10-4-1" class="outline-4">
<h4 id="sec-10-4-1"><a id="ID-0905c371-9881-4efa-a339-8addf199970a"></a><span class="section-number-4">10.4.1</span> Compiling Gtk+</h4>
<div class="outline-text-4" id="text-10-4-1">
<dl class="org-dl">
<dt>Getting dependencies</dt><dd><p>
  First check that you have all the neccessary packages.
</p>

<p>
An easy way of doing this is using:
</p>
<pre class="example">
sudo yum-builddep gtk+
</pre>

<p>
In addition, you may want to check that the following are insatlled:
</p>
<pre class="example">
sudo yum install pkg-config glib3 make gcc gdk-pixbuf2 gdk-pixbuf2-devel glib-devel glib2-devel
</pre></dd>

<dt>Getting the source code</dt><dd><p>
  Git hub repo for GTK is here, the clone link is at the bottom:
</p>

<p>
<a href="https://git.gnome.org/browse/gtk+/">https://git.gnome.org/browse/gtk+/</a>
</p>

<p>
The clone link comes in git/https/ssh protocol. I prefer to use https as it's less painful.
</p>
<pre class="example">
cd ~/git
git clone https://git.gnome.org/browse/gtk+
</pre></dd>

<dt>Check out version you're interested in</dt><dd><p>
  Either master or a tag of a version:  (e.g 2.24, 3.10, 3.4, 3.8)
</p>
<pre class="example">
git checkout gtk-3-10
</pre></dd>

<dt>Build this business</dt><dd><p>
  The first time you might want to run each command one-by-one.
Sometimes you might be missing a utility and if so, autogen will usually tell you.
It's useful to look into autogen.sh to get the exact name of the utility that you're
missing.
then install it (sudo yum install Your<sub>Utility</sub>).
</p>

<div class="org-src-container">

<pre class="src src-shell">./autogen.sh &amp;&amp;
./configure --enable-x11-backend --enable-wayland-backend &amp;&amp;
make &amp;&amp;
<span style="color: #483d8b;">echo</span> <span style="color: #8b2252;">"--- all done"</span>
</pre>
</div></dd>

<dt>Note about Theaming</dt><dd><p>
  By default, with the above build, gtk will look very plain. If you would like it to use
your system theame, you can add the <b>&#x2013;prefix=/usr</b> argument:
</p>
<div class="org-src-container">

<pre class="src src-sh">./configure --prefix=/usr --sysconfdir=/etc --enable-broadway-backend  --enable-x11-backend --disable-wayland-backend
</pre>
</div>
<p>
But do note, that older versions of gtk might not work well with the theme on your system.
I only use this for some rare theaming bugs.
</p></dd>

<dt>Note about debugging</dt><dd>If you intend to debug your gtk later or launch Gtk with debug flags,
you can also add the debug flag:
<code>--enable-debug=yes</code></dd>
</dl>


<dl class="org-dl">
<dt>How to tell if build was good</dt><dd><p>
  In geneal, in shell, if you run:
</p>
<pre class="example">
echo $? 
</pre>
<p>
and if the output is '0', all is well. A higher number is an error of some sort.
</p>

<p>
Example of a successful build:
</p>
<pre class="example">
make
....
echo $?
0
</pre>

<p>
In addition, there should be a .libs folder inside:
</p>
<pre class="example">
../gtk+/gtk/.libs
</pre></dd>

<dt>Troubleshooting</dt><dd><ul class="org-ul">
<li>you might get compile errors for missing libraries.  See getting-dependencies section above.</li>

<li>you might have them installed, but compiler can't find them.</li>
</ul>
<p>
find out where they are installed:
</p>
<pre class="example">
rpm -ql LIBRARY
</pre>

<p>
set compile path to location, e.g:  //Not fully tested.
</p>
<pre class="example">
C_INCLUDE_PATH=/usr/include/glib-2.0/    #LD_LIBRARY_PATH might be better.
</pre></dd>
</dl>
</div>
</div>
<div id="outline-container-sec-10-4-2" class="outline-4">
<h4 id="sec-10-4-2"><span class="section-number-4">10.4.2</span> Copy compiled gtk for re-use</h4>
<div class="outline-text-4" id="text-10-4-2">
<p>
Once you've compiled a version, it might make sense to copy it to another folder so that
you don't have to re-build it each time.
</p>

<p>
Strictly speaking, you just need the '.libs' folder. But I like to copy the whole gtk+ folder.
</p>

<p>
E.g 
</p>
<pre class="example">
cp -r ~/git/gtk+ ~/src/gtk3_10
</pre>
<p>
(it should include the gtk/.libs folder)
</p>

<p>
Another option is to commit all files to the Gtk3 repo under a personal branch and then 
switch between branches to test different versions. 
</p>

<p>
I prefer to copy the files across because this allows me to quickly test different versions
without messing around with git commands.
</p>
</div>
</div>
<div id="outline-container-sec-10-4-3" class="outline-4">
<h4 id="sec-10-4-3"><span class="section-number-4">10.4.3</span> Tie newly built gtk into SWT</h4>
<div class="outline-text-4" id="text-10-4-3">
<p>
Once above is done, you can change the Eclipse run configuration to
point to the newly compiled gtk.
</p>

<dl class="org-dl">
<dt>Env Var setting</dt><dd><p>
   Open environmental variable section of your run configuration, add:
</p>
<pre class="example">
LD_LIBRARY_PATH = /home/lufimtse/src/gtk3_10/gtk/.libs
</pre></dd>
</dl>

<p>
Example:
<img src="./img/img_2015_04_20__13_49_19.png" alt="img_2015_04_20__13_49_19.png" />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-10-5" class="outline-3">
<h3 id="sec-10-5"><span class="section-number-3">10.5</span> References</h3>
<div class="outline-text-3" id="text-10-5">
<p>
//Useful archvwiki:
<a href="http://www.linuxfromscratch.org/blfs/view/svn/x/gtk3.html">http://www.linuxfromscratch.org/blfs/view/svn/x/gtk3.html</a>
</p>

<p>
//official compiling notes:
<a href="https://developer.gnome.org/gtk3/stable/gtk-building.html">https://developer.gnome.org/gtk3/stable/gtk-building.html</a>
</p>
</div>
</div>
</div>
<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11"><span class="section-number-2">11</span> Appendix</h2>
<div class="outline-text-2" id="text-11">
</div><div id="outline-container-sec-11-1" class="outline-3">
<h3 id="sec-11-1"><span class="section-number-3">11.1</span> Eclipse CSS</h3>
<div class="outline-text-3" id="text-11-1">
<p>
Gtk CSS differs from Eclipse CSS.
</p>

<p>
Eclipse dark-theme keeps it's css in:
<a href="http://git.eclipse.org/c/platform/eclipse.platform.ui.git/tree/bundles/org.eclipse.ui.themes/css">http://git.eclipse.org/c/platform/eclipse.platform.ui.git/tree/bundles/org.eclipse.ui.themes/css</a>
</p>
</div>
</div>
<div id="outline-container-sec-11-2" class="outline-3">
<h3 id="sec-11-2"><span class="section-number-3">11.2</span> jhbuild Compiling/Building really new gtk versions on your own system</h3>
<div class="outline-text-3" id="text-11-2">
<p>
If you can't build some Gtk version due to missing dependencies, then there is a tool called
<b>jhbuild</b>.
<a href="https://wiki.gnome.org/Projects/Jhbuild">https://wiki.gnome.org/Projects/Jhbuild</a>
</p>

<p>
It automatically downloads and builds dendencies. (e.g Glib &amp; it's dependencies).
</p>

<p>
I never really got it to work properly, I just kept getting circular dependency issues.
I got something along the lines of:
</p>
<pre class="example">
Requested 'glib-2.0 &gt;= 2.43.4' but version of GLib is 2.42.2
Requested 'atk &gt;= 2.15.1' but version of Atk is 2.14.0
</pre>

<p>
Instead I use the VM's with pre-build Gtk's.
</p>

<p>
However, some useful links may be:
</p>

<p>
Getting started:
<a href="https://developer.gnome.org/jhbuild/stable/getting-started.html">https://developer.gnome.org/jhbuild/stable/getting-started.html</a>
</p>

<p>
Example gtk jhbuildrc:
<a href="https://people.gnome.org/~aruiz/gtk+/standard.jhbuildrc">https://people.gnome.org/~aruiz/gtk+/standard.jhbuildrc</a>
</p>

<p>
Maybe useful: (mac config)
<a href="https://github.com/rhult/gtk-osx-build/blob/master/jhbuildrc-gtk-osx-cfw-10.4">https://github.com/rhult/gtk-osx-build/blob/master/jhbuildrc-gtk-osx-cfw-10.4</a>
</p>
</div>
</div>
<div id="outline-container-sec-11-3" class="outline-3">
<h3 id="sec-11-3"><span class="section-number-3">11.3</span> About Author</h3>
<div class="outline-text-3" id="text-11-3">
<p>
I'm Leo Ufimtsev. I'm currently an Intern at Red Hat doing full time work on SWT.
</p>

<p>
Feel free to follow me on twitter: <a href="https://twitter.com/LeoUfimtsev">https://twitter.com/LeoUfimtsev</a> or check out my blog:
<a href="https://coffeeorientedprogramming.wordpress.com/">https://coffeeorientedprogramming.wordpress.com/</a>
</p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p class="footpara">
A section starts with a major number 1.*.*, 2.*.*.
</p></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <p class="footpara">
As taken from  <a href="http://www.gtkbook.com/">http://www.gtkbook.com/</a>
</p></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <p class="footpara">
I never got around figuring out why the build fails. 
My former mentor showed me how to work around this issue and I've been doing so ever since.
If you find a better aproach to doing this, please let me know.
</p></div>


</div>
</div></div>
<div id="postamble" class="status">
<p class="author">Author: Leo Ufimtsev</p>
<p class="date">Created: 2015-04-20 Mon 15:43</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
